"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5810],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return v}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),v=r,m=d["".concat(s,".").concat(v)]||d[v]||p[v]||o;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},79443:function(e,t,n){var a=(0,n(67294).createContext)(void 0);t.Z=a},80944:function(e,t,n){var a=n(67294),r=n(79443);t.Z=function(){var e=(0,a.useContext)(r.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e}},30547:function(e,t,n){var a=n(67294);t.Z=function(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},49366:function(e,t,n){var a=n(67294),r=n(80944),o=n(86010);t.Z=function(e){var t,n=e.lazy,i=(e.block,e.defaultValue),l=e.values,s=e.groupId,c=(e.className,a.Children.toArray(e.children)),u=null!=l?l:c.map((function(e){return{value:e.props.value,label:e.props.label}})),p=null!=i?i:null==(t=c.find((function(e){return e.props.default})))?void 0:t.props.value,d=(0,r.Z)(),v=d.tabGroupChoices,m=d.setTabGroupChoices,y=(0,a.useState)(p),b=y[0],h=y[1];if(null!=s){var g=v[s];null!=g&&g!==b&&u.some((function(e){return e.value===g}))&&h(g)}var f=function(e){h(e),null!=s&&m(s,e)};return a.createElement("div",{className:"tabs-container"},a.createElement("div",{className:"sm:hidden"},a.createElement("label",{htmlFor:"tabs",className:"sr-only"},"Select a tab"),a.createElement("select",{id:"tabs",name:"tabs",value:b,onChange:function(e){return f(e.currentTarget.value)},className:"block w-full focus:ring-blue-500 focus:border-blue-500 border-gray-300 rounded-md"},u.map((function(e){var t=e.value,n=e.label;return a.createElement("option",{value:t,key:t},null!=n?n:t)})))),a.createElement("div",{className:"hidden sm:block"},a.createElement("nav",{className:"flex space-x-4","aria-label":"Tabs"},u.map((function(e){var t=e.value,n=e.label;return a.createElement("button",{key:t,onClick:function(){return f(t)},className:(0,o.Z)(b===t?"bg-blue-100 text-blue-700":"text-gray-500 hover:text-gray-700","px-3 py-2 font-medium text-sm rounded-md"),"aria-current":b===t?"page":void 0},null!=n?n:t)})))),n?(0,a.cloneElement)(c.filter((function(e){return e.props.value===b}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},c.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==b})}))))}},13901:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return d},default:function(){return m}});var a=n(83117),r=n(80102),o=(n(67294),n(3905)),i=n(49366),l=n(30547),s=["components"],c={title:"Syncing Data (Live Queries)",sidebar_position:4},u=void 0,p={unversionedId:"concepts/syncing-data",id:"concepts/syncing-data",isDocsHomePage:!1,title:"Syncing Data (Live Queries)",description:"Overview",source:"@site/docs/concepts/syncing-data.md",sourceDirName:"concepts",slug:"/concepts/syncing-data",permalink:"/concepts/syncing-data",editUrl:"https://github.com/getditto/docs/edit/master/docs/concepts/syncing-data.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Syncing Data (Live Queries)",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Querying",permalink:"/concepts/querying"},next:{title:"Intro",permalink:"/concepts/security"}},d=[{value:"Overview",id:"overview",children:[{value:"Query-Based Sync",id:"query-based-sync",children:[],level:3}],level:2},{value:"Enabling Sync",id:"enabling-sync",children:[],level:2},{value:"Syncing Data with Live Queries",id:"syncing-data-with-live-queries",children:[],level:2},{value:"Live Queries without Syncing Data",id:"live-queries-without-syncing-data",children:[],level:2},{value:"Subscriptions",id:"subscriptions",children:[],level:2}],v={toc:d};function m(e){var t=e.components,c=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},v,c,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"The most important API, which is fundamental to working with Ditto, is the ability to observe data changes. This allows your app to be reactive, simplifying your architecture, and abstracting the timing complexity of data sync that is occurring in the background. Instead of performing, point-in-time queries, your app can simply register a query to observe, which is called a ",(0,o.kt)("inlineCode",{parentName:"p"},"LiveQuery"),", and you will receive callbacks whenever data changes related to it."),(0,o.kt)("p",null,"This allows you to decouple actions in your applications with UI updates. You can bind your UI to a ",(0,o.kt)("inlineCode",{parentName:"p"},"LiveQuery")," and then simply perform writes to Ditto from your actions elsewhere in the app. The ",(0,o.kt)("inlineCode",{parentName:"p"},"LiveQuery")," will fire in response to those other actions and whenever data is received from other devices as well."),(0,o.kt)("h3",{id:"query-based-sync"},"Query-Based Sync"),(0,o.kt)("p",null,"Ditto's sync system is query-based, which means, that by default the SDK will not sync data with other devices. Instead, the app creates query-based subscriptions that define which data it wants to sync. When the device is subscribed to a query, then other devices will share data matching that query with it:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Query-based Subscriptions",src:n(23842).Z})),(0,o.kt)("p",null,'Given that Ditto works peer-to-peer, devices can form into arbitrary groups based on the proximity to one another, or rather they create an ad-hoc mesh network. Ditto\'s sync system allows for devices to share data through another device, called "multi-hop" sync. The only requirement for this to occur is that all devices in the chain must be subscribed to the same data, as shown below:'),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Multi-hop Subscriptions",src:n(33795).Z})),(0,o.kt)("h2",{id:"enabling-sync"},"Enabling Sync"),(0,o.kt)("p",null,"To enable Ditto to sync data, you'll need to call ",(0,o.kt)("inlineCode",{parentName:"p"},"ditto.tryStartSync()"),". Preferably, you should call ",(0,o.kt)("inlineCode",{parentName:"p"},"tryStartSync()")," early on in your application's life cycle like in your ",(0,o.kt)("inlineCode",{parentName:"p"},"AppDelegate.application(_:didFinishLaunchingWithOptions:)")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"Application.onCreate")," methods. Your application only needs to call this function once."),(0,o.kt)(i.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const ditto = new Ditto()\ntry {\n    ditto.tryStartSync()\n} catch(err) {\n    console.error(err)\n}\n"))),(0,o.kt)(l.Z,{value:"swift",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"let ditto = new Ditto()\ntry {\n    ditto.tryStartSync()\n} catch(let err) {\n    print(err.localizedDescription)\n}\n"))),(0,o.kt)(l.Z,{value:"objc",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},"NSError *error = nil;\n[ditto tryStartSync:&error];\n"))),(0,o.kt)(l.Z,{value:"kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'try {\n    ditto.tryStartSync()\n}\ncatch (e: DittoError) {\n    assertThat(e.message).isEqualTo("The license failed verification. Obtain a valid license token at https://portal.ditto.live.")\n}\n'))),(0,o.kt)(l.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'try {\n    ditto.tryStartSync();\n} catch(DittoError e) {\n    Log.e("Ditto", e.getMessage())\n}\n'))),(0,o.kt)(l.Z,{value:"csharp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"try\n{\n    ditto.TryStartSync();\n}\ncatch (DittoException ex)\n{\n    Console.WriteLine(exception.ToString());\n}\n"))),(0,o.kt)(l.Z,{value:"cpp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"try {\n    ditto.try_start_sync();\n} catch (const DittoError &err) {\n    std::cerr << e.what();\n}\n"))),(0,o.kt)(l.Z,{mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() -> Result<(), Box<dyn Error>> {\n    ditto.try_start_sync()?;\n}\n// Or ...\nif let Err(e) = ditto.try_start_sync() {\n    eprintln!("Error starting Ditto sync: {:?}", e);\n}\n')))),(0,o.kt)("h2",{id:"syncing-data-with-live-queries"},"Syncing Data with Live Queries"),(0,o.kt)("p",null,"Ditto will only sync data with other peers when it has an active ",(0,o.kt)("inlineCode",{parentName:"p"},"LiveQuery"),". A ",(0,o.kt)("inlineCode",{parentName:"p"},"LiveQuery")," is a long-running subscription to a constructed Ditto query. Use a query to specify what types of data to sync with other devices. ",(0,o.kt)("a",{parentName:"p",href:"./querying"},"Learn more about how to create queries")),(0,o.kt)("p",null,"The easiest way to create a ",(0,o.kt)("inlineCode",{parentName:"p"},"LiveQuery"),", simply add ",(0,o.kt)("inlineCode",{parentName:"p"},".observe")," to a query cursor. This API combines two different actions related to observing changes. First, it registers an observer which will fire a callback whenever any data changes related to this query. Second, it also creates a subscription for data from other devices based off the query. For simple applications, using ",(0,o.kt)("inlineCode",{parentName:"p"},".observe")," is easier. However, for more complex applications, where you might want to subscribe to a larger query of data from other devices whenever the app is running, but then have specific live queries for subsets of the data tied to certain views. You can separate the two actions, as described in ",(0,o.kt)("a",{parentName:"p",href:"#subscriptions"},(0,o.kt)("inlineCode",{parentName:"a"},"Subscriptions"))," below."),(0,o.kt)("p",null,"To create a LiveQuery, add ",(0,o.kt)("inlineCode",{parentName:"p"},".observe")," to a query cursor like so:"),(0,o.kt)(i.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const liveQuery = ditto.store.collection('cars')\n    .find(\"color == 'red'\")\n    .observe((cars, event) => {\n        // do something\n    })\n"))),(0,o.kt)(l.Z,{value:"swift",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'// Register live query to update UI\nlet liveQuery = ditto.store.collection("cars").find("color == \'red\'")\n  .observe { cars, event in\n    // do something\n  }\n'))),(0,o.kt)(l.Z,{value:"objc",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},"// Register live query to update UI\nDITLiveQuery *liveQuery = [[collection find:@\"color == 'red'\"]\n    observe:^(NSArray<DITDocument *> *docs, DITLiveQueryEvent *event) {\n\n    }\n}];\n"))),(0,o.kt)(l.Z,{value:"kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'// --- Register live query to update UI\nthis.liveQuery = ditto.store.collection("cars").\n    .findAll()\n    .observe { docs, event ->\n        // Do something...\n    }\n'))),(0,o.kt)(l.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'// --- Register live query to update UI\nthis.liveQuery = ditto.store.collection("cars")\n    .findAll()\n    .observe((docs, event) -> {\n        // Do something...\n    });\n'))),(0,o.kt)(l.Z,{value:"csharp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'// --- Register live query to update UI\nvar liveQuery = ditto.Store.Collection("cars").Find("color == \'red\'").Observe((docs, DittoLiveQueryEvent) =>\n{\n    // Do something...\n});\n'))),(0,o.kt)(l.Z,{value:"cpp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"std::shared_ptr<LiveQuery> query = collection\n  .find(\"color == 'red'\")\n  .observe(LiveQueryEventHandler{\n    [&](std::vector<Document> docs, LiveQueryEvent event) {\n      // do something\n    }});\n"))),(0,o.kt)(l.Z,{value:"rust",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'let store = ditto.store(); // Ditto must have a longer lifetime than all live queries\nlet (tx, rx) = channel();\n{\n    let live_query = store.collection("cars")?.find("color == \\\'red\\\'")\n       .observe(move |docs, event| {\n           match event {\n               LiveQueryEvent::Initial {..} => {.. },\n               LiveQueryEvent::Update {insertions, ..} => {\n                   for idx in insertions.iter() {\n                        if let Some(doc) = docs.get(*idx) {\n                            let _ = tx.send(doc);\n                        }\n                   }\n               },\n               _ => () // do nothing\n           }\n       })?;\n    for doc in rx.iter() {\n        println!("Updated Doc: {:?}", &doc);\n    }\n\n} // IMPORTANT: LiveQuery goes out of scope and is Dropped and terminated here.\n')))),(0,o.kt)("p",null,"Here are some quick facts about the ",(0,o.kt)("inlineCode",{parentName:"p"},"LiveQuery")," behavior."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},".observe")," handler will always fire ",(0,o.kt)("em",{parentName:"li"},"immediately")," with the current set of documents matching the query."),(0,o.kt)("li",{parentName:"ul"},"Subsequent local and remote calls to ",(0,o.kt)("inlineCode",{parentName:"li"},".observe")," will be fired with the new set of documents that match the query."),(0,o.kt)("li",{parentName:"ul"},"To stop the observe callback, either call ",(0,o.kt)("inlineCode",{parentName:"li"},"liveQuery.stop()")," or deallocate the ",(0,o.kt)("inlineCode",{parentName:"li"},"liveQuery")," object. Deallocation can by done simply by assigning it to ",(0,o.kt)("inlineCode",{parentName:"li"},"nil")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"null")," depending on the language and platform."),(0,o.kt)("li",{parentName:"ul"},"You can create as many ",(0,o.kt)("inlineCode",{parentName:"li"},"LiveQuery")," objects as you want."),(0,o.kt)("li",{parentName:"ul"},"Calling ",(0,o.kt)("inlineCode",{parentName:"li"},".observe")," on a query before calling ",(0,o.kt)("inlineCode",{parentName:"li"},"ditto.tryStartSync()"),", will only fire changes for local updates.")),(0,o.kt)("h2",{id:"live-queries-without-syncing-data"},"Live Queries without Syncing Data"),(0,o.kt)("p",null,"There are many situations where your app needs to observe live queries ",(0,o.kt)("em",{parentName:"p"},"without")," initiating syncing with other devices. For example, this is useful if your app intends to treat certain documents and collections as local-only data. In addition, for complex apps, it can be helpful to seperate the observer from the underlying query ",(0,o.kt)("a",{parentName:"p",href:"#subscriptions"},(0,o.kt)("inlineCode",{parentName:"a"},"Subscription")),"."),(0,o.kt)("p",null,"Instead of ",(0,o.kt)("inlineCode",{parentName:"p"},".observe"),", call ",(0,o.kt)("inlineCode",{parentName:"p"},".observeLocal")," like so:"),(0,o.kt)(i.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const liveQuery = ditto.store.collection('cars')\n    .find(\"color == 'red'\")\n    .observeLocal((cars, event) => {\n        // do something\n    })\n"))),(0,o.kt)(l.Z,{value:"swift",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'// --- Action somewhere in your application\nfunc userDidInsertCar() {\n    _ = ditto.store.collection("cars").insert([\n        "model": "Ford",\n        "color": "black"\n    ])\n}\n\n// Register live query to update UI\nlet liveQuery = ditto.store.collection("cars").find("color == \'red\'")\n  .observeLocal { cars, event in\n    // do something\n  }\n'))),(0,o.kt)(l.Z,{value:"objc",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},'// --- Action somewhere in your application\n-(void) userDidInsertCar() {\n    [[ditto.store collection:@"cars"] insert:@{\n        @"model": @"Ford",\n        @"color": @"black"\n    }];\n}\n\n// Register live query to update UI\nDITLiveQuery *liveQuery = [[collection find:@"color == \'red\'"]\n    observeLocal:^(NSArray<DITDocument *> *docs, DITLiveQueryEvent *event) {\n\n    }\n}];\n'))),(0,o.kt)(l.Z,{value:"kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'// --- Action somewhere in your application\nfun userDidInsertCar() {\n    ditto.store.collection("cars").insert(mapOf(\n        "model" to "Ford",\n        "color" to "black"\n    ))\n}\n\n// --- Register live query to update UI\nthis.liveQuery = ditto.store.collection("cars").\n    .findAll()\n    .observeLocal { docs, event ->\n    // Do something...\n}\n'))),(0,o.kt)(l.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'// --- Action somewhere in your application\npublic void userDidInsertCar() {\n    Map<String, Object> content = new HashMap<>();\n    content.put("model", "Ford");\n    content.put("color", "black");\n    ditto.store.collection("cars").insert(content);\n}\n\n// --- Register live query to update UI\nthis.liveQuery = ditto.store.collection("cars")\n    .findAll()\n    .observeLocal((docs, event) -> {\n        // Do something...\n    });\n'))),(0,o.kt)(l.Z,{value:"csharp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'// --- Action somewhere in your application\n// --- Action somewhere in your application\nvoid user_did_insert_car()\n{\n    var carsDocument = new Dictionary<string, object>\n    {\n        { "model", "Ford" },\n        { "color", "black" }\n    };\n    ditto.Store.Collection("cars").Insert(carsDocument);\n}\n\n// --- Register live query to update UI\nvar localLiveQuery = ditto.Store.Collection("cars").Find("color == \'red\'").ObserveLocal((docs, DittoLiveQueryEvent) =>\n{\n    // Do something...\n});\n'))),(0,o.kt)(l.Z,{value:"cpp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'// --- Action somewhere in your application\nvoid user_did_insert_car() {\n    ditto.store.collection("cars").insert({\n        {"model", "Ford"},\n        {"color", "black"}\n    });\n}\n\n// --- Register live query to update UI\nstd::shared_ptr<LiveQuery> query = collection\n  .find("color == \'red\'")\n  .observe_local(LiveQueryEventHandler{\n    [&](std::vector<Document> docs, LiveQueryEvent event) {\n\n    }});\n'))),(0,o.kt)(l.Z,{value:"rust",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'// Some action in your app ...\nlet store = ditto.store();\nlet mut doc_id;\n{\n    let doc_id = store.collection("cars")?.insert(car_1, None, false)?;\n}\n// Elsewhere register handlers for data changes\n{\n    let shared_element = RwLock::new(my_element);\n    let element_copy = shared_element.clone();\n    let live_query = store.collection("cars")\n        .find("color == \\\'red\\\'")\n        .observe_local(move |cars, event|{\n            let element = element_copy.write().unwrap();\n            // do something when data changes\n            // BUT this closure must be permitted to take ownership\n        })?;\n    // stash your live query in something with a long lifetime\n    // or it will be dropped\n}\n')))),(0,o.kt)("p",null,"Note: if your Ditto instance has not called ",(0,o.kt)("inlineCode",{parentName:"p"},"tryStartSync"),", there will be no difference between ",(0,o.kt)("inlineCode",{parentName:"p"},".observe")," and ",(0,o.kt)("inlineCode",{parentName:"p"},".observeLocal"),"."),(0,o.kt)("h2",{id:"subscriptions"},"Subscriptions"),(0,o.kt)("p",null,"In developing more complex applications, it might make sense to decouple your ",(0,o.kt)("inlineCode",{parentName:"p"},"LiveQuery")," observer callbacks with the query ",(0,o.kt)("inlineCode",{parentName:"p"},"Subscription"),". For example, if you want the app to always be subscribing to data during the entire life-cycle of the app, but only create an observer when the user navigates to the UI for that data. In this case, you would use the ",(0,o.kt)("inlineCode",{parentName:"p"},".observeLocal")," API while registering a ",(0,o.kt)("inlineCode",{parentName:"p"},"Subscription")," for the query in a global area of the app."),(0,o.kt)("p",null,"To create subscriptions is similar to, or can also be combined with, ",(0,o.kt)("a",{parentName:"p",href:"#live-queries-without-syncing-data"},"local observers"),":"),(0,o.kt)(i.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Register a subscription globally in the app\nconst subscription = ditto.store.collection('cars')\n    .find(\"color == 'red'\")\n    .subscribe()\n\n// Register a local observer to update UI\nconst liveQuery = ditto.store.collection('cars')\n    .find(\"color == 'red'\")\n    .observeLocal((cars, event) => {\n        // do something\n    })\n"))),(0,o.kt)(l.Z,{value:"swift",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'// Register a subscription globally in the app\nlet subscription = ditto.store.collection("cars")\n    .find("color == \'red\'")\n    .subscribe()\n\n// Register a local observer to update UI\nlet liveQuery = ditto.store.collection("cars").find("color == \'red\'")\n  .observeLocal { cars, event in\n    // do something\n  }\n'))),(0,o.kt)(l.Z,{value:"objc",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},"// Register a subscription globally in the app\nDITSubscription *subscription = [[collection find:@\"color == 'red'\"] subscribe];\n\n// Register a local observer to update UI\nDITLiveQuery *liveQuery = [[collection find:@\"color == 'red'\"]\n    observeLocal:^(NSArray<DITDocument *> *docs, DITLiveQueryEvent *event) {\n\n    }\n}];\n"))),(0,o.kt)(l.Z,{value:"kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'// Register a subscription globally in the app\nthis.subscription = ditto.store.collection("cars").\n    .findAll()\n    .subscribe()\n\n// Register a local observer to update UI\nthis.liveQuery = ditto.store.collection("cars").\n    .findAll()\n    .observeLocal { docs, event ->\n    // Do something...\n}\n'))),(0,o.kt)(l.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'// Register a subscription globally in the app\nthis.subscription = ditto.store.collection("cars").\n    .findAll()\n    .subscribe();\n\n// Register a local observer to update UI\nthis.liveQuery = ditto.store.collection("cars")\n    .findAll()\n    .observeLocal((docs, event) -> {\n        // Do something...\n    });\n'))),(0,o.kt)(l.Z,{value:"csharp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'// Register a subscription globally in the app\nvar subscription = ditto.Store.Collection("cars").Find("color == \'red\'").Subscribe();\n\n// Register a local observer to update UI\nvar localLiveQuery = ditto.Store.Collection("cars").Find("color == \'red\'").ObserveLocal((docs, DittoLiveQueryEvent) =>\n{\n    // Do something...\n});\n'))),(0,o.kt)(l.Z,{value:"cpp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"// Register a subscription globally in the app\nSubscription subscription = collection\n  .find(\"color == 'red'\")\n  .subscribe();\n\n// Register a local observer to update UI\nstd::shared_ptr<LiveQuery> query = collection\n  .find(\"color == 'red'\")\n  .observe_local(LiveQueryEventHandler{\n    [&](std::vector<Document> docs, LiveQueryEvent event) {\n\n    }});\n"))),(0,o.kt)(l.Z,{value:"rust",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'// subscription triggers sync behavior, asks remote peers to push data\n// you need to be able to store this data\nlet subscription = ditto.store().collection("cars").find("color == \\\'red\\\'").subscribe()?;\n\n// Observe local changes to data to update UI\nlet query = ditto.store().collection("cars").find("color == \\\'red\\\'").observe_local()?;\n')))),(0,o.kt)("p",null,"Note: if your Ditto instance has not called ",(0,o.kt)("inlineCode",{parentName:"p"},"tryStartSync"),", ",(0,o.kt)("inlineCode",{parentName:"p"},".subscribe")," will not enable sync."))}m.isMDXComponent=!0},86010:function(e,t,n){function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function r(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}n.d(t,{Z:function(){return r}})},33795:function(e,t,n){t.Z=n.p+"assets/images/multi-hop-subscriptions-192b28bc88d61093dcdac56878a3f332.png"},23842:function(e,t,n){t.Z=n.p+"assets/images/subscriptions-50f375353580de80d1cdb81b560b1a0a.png"}}]);