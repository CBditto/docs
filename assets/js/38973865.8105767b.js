"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4266],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),h=i,y=d["".concat(c,".").concat(h)]||d[h]||p[h]||o;return n?r.createElement(y,a(a({ref:t},u),{},{components:n})):r.createElement(y,a({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},62864:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var r=n(87462),i=n(63366),o=(n(67294),n(3905)),a=["components"],s={},c="Authentication Server",l={unversionedId:"quick-tips/authserver",id:"quick-tips/authserver",isDocsHomePage:!1,title:"Authentication Server",description:"You can configure the C# SDK itself as a Ditto-standard authentication service.",source:"@site/docs/csharp/quick-tips/authserver.md",sourceDirName:"quick-tips",slug:"/quick-tips/authserver",permalink:"/csharp/quick-tips/authserver",editUrl:"https://github.com/getditto/docs/tree/main/docs/csharp/quick-tips/authserver.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Supported Transports",permalink:"/csharp/common/mesh-network/supported-transports"},next:{title:"Overview",permalink:"/csharp/common/security/overview"}},u=[{value:"Keys",id:"keys",children:[],level:3},{value:"Code samples",id:"code-samples",children:[{value:"Server code",id:"server-code",children:[],level:4},{value:"Client code",id:"client-code",children:[],level:4}],level:3}],p={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"authentication-server"},"Authentication Server"),(0,o.kt)("p",null,"You can configure the C# SDK itself as a Ditto-standard authentication service.\nThe server looks at the incoming credentials to decide whether to let a peer\nsyncronize with the server or not. You provide all of the signing and verifying\nkeys yourself through the SDK, thereby making the resulting JWTs (",(0,o.kt)("a",{parentName:"p",href:"https://jwt.io/"},"JSON Web\nTokens"),") properly authenticate with Ditto. "),(0,o.kt)("p",null,"Now the web browser peer has a way to log in and sync with Ditto, in\n",(0,o.kt)("inlineCode",{parentName:"p"},"OnlineWithAuthentication")," mode, while other devices are in SharedKey mode."),(0,o.kt)("p",null,"In this arrangement, the C# server peer chooses the read and write permissions\nthat each authenticating peer will receive. After login, if you proceed to sync\nusing the WebSocket transport, be aware that there is no permission control in\nthe reverse direction: the server peer is always granted read/write access to\nall documents."),(0,o.kt)("h3",{id:"keys"},"Keys"),(0,o.kt)("p",null,"First, you need to create three keys:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a signing key in PEM format:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"openssl ecparam -name prime256v1 -genkey -text | openssl pkcs8 -topk8 -nocrypt -out priv.key\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a verifiying key in PEM format:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"openssl ec -in priv.key -pubout -out pub.key\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a ",(0,o.kt)("a",{parentName:"li",href:"../security/shared-key"},"shared key"),". ")),(0,o.kt)("h3",{id:"code-samples"},"Code samples"),(0,o.kt)("p",null,"We have two small peer Ditto instances running locally:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"One configured as an HTTP listener and identity provider"),(0,o.kt)("li",{parentName:"ul"},"One configured as a WebSocket client.")),(0,o.kt)("h4",{id:"server-code"},"Server code"),(0,o.kt)("p",null,"The server and their other devices can use SharedKey identity while a web\nbrowser can connect to this C# peer over LAN and sync. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs"},'string appId = "YOUR_APP_ID_HERE";\nstring verifyingKey = @"-----BEGIN PUBLIC KEY-----\n....\n-----END PUBLIC KEY-----\n";\n\nstring signingKey = @"-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----";\n\nstring sharedKey = "...";\n\nvar serverIdentity = DittoIdentity.SharedKey(\n    appId,\n    sharedKey\n);\nvar serverDitto = new Ditto(serverIdentity, serverPersistence.Path);\nserverDitto.DeviceName = "TestServer";\nserverDitto.SetOfflineOnlyLicenseToken(TestLicense);\n\n// Server is an HTTP/WebSocket server only\nvar serverConfig = new DittoTransportConfig();\nserverConfig.Listen.Http.Enabled = true;\nserverConfig.Listen.Http.InterfaceIp = "127.0.0.1";\nserverConfig.Listen.Http.Port = 45001;\nserverConfig.Listen.Http.WebsocketSync = true;\nserverConfig.Listen.Http.IdentityProvider = true;\nserverConfig.Listen.Http.IdentityProviderSigningKey = signingKey;\nserverConfig.Listen.Http.IdentityProviderVerifyingKeys.Add(verifyingKey);\nserverDitto.SetTransportConfig(serverConfig);\nserverDitto.TryStartSync();\n\n// Handle any incoming authentication requests\nserverDitto.DittoIdentityProviderAuthenticationRequest += (sender, args) =>\n{\n    if (args.AppId == appId && args.ThirdPartyToken == "jellybean")\n    {\n        var success = new DittoAuthenticationSuccess();\n        success.AccessExpires = DateTime.Now + new TimeSpan(1, 0, 0);\n        success.UserId = "bob";\n        success.ReadEverythingPermission = true;\n        success.WriteEverythingPermission = true;\n        args.Allow(success);\n    }\n    else\n    {\n        args.Deny();\n    }\n};\n')),(0,o.kt)("h4",{id:"client-code"},"Client code"),(0,o.kt)("p",null,"Integrate this into your web application. Because it's a web browser, only the\nWebSocket transport is available."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'\nconst authHandler = {\n    authenticationRequired: async function(authenticator) {\n      console.log("Login request.");\n      await authenticator.loginWithToken("jellybeans", "provider");\n    },\n    authenticationExpiringSoon: function(authenticator, secondsRemaining) {\n      console.log(`Auth token expiring in ${secondsRemaining} seconds`)\n    }\n}\n\nconst identity = { \n    type: \'onlineWithAuthentication\', \n    appID: "c210fe14-1234-4538-94b3-a28e10e55ade", \n    authHandler: authHandler, \n    enableDittoCloudSync: false, \n    customAuthURL: "http://192.168.0.164:8080" \n}\n\nconst ditto = new Ditto(identity, \'ditto\')\n\nconst config = new TransportConfig()\nconfig.connect.websocketURLs.push(\'ws://192.168.0.164:8080\')\nditto.setTransportConfig(config)\nditto.tryStartSync()\n')))}d.isMDXComponent=!0}}]);