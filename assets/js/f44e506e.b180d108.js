"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6410],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=a,h=c["".concat(p,".").concat(m)]||c[m]||u[m]||r;return n?i.createElement(h,o(o({ref:t},d),{},{components:n})):i.createElement(h,o({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},38241:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var i=n(87462),a=(n(67294),n(3905));const r={title:"API Reference",sidebar_position:2},o=void 0,l={unversionedId:"api",id:"api",isDocsHomePage:!1,title:"API Reference",description:"OpenAPI",source:"@site/docs/http/api.md",sourceDirName:".",slug:"/api",permalink:"/http/api",editUrl:"https://github.com/getditto/docs/tree/main/docs/http/api.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"API Reference",sidebar_position:2},sidebar:"docs",previous:{title:"Introduction",permalink:"/http/installation"},next:{title:"Documents",permalink:"/http/common/concepts/documents"}},p=[{value:"OpenAPI",id:"openapi",children:[],level:2},{value:"Usage",id:"usage",children:[{value:"Endpoints",id:"endpoints",children:[],level:3},{value:"Write",id:"write",children:[],level:3},{value:"FindByID",id:"findbyid",children:[],level:3},{value:"Find",id:"find",children:[],level:3}],level:2},{value:"Distinct Values",id:"distinct-values",children:[],level:2}],s={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"openapi"},"OpenAPI"),(0,a.kt)("p",null,"The Open API ",(0,a.kt)("inlineCode",{parentName:"p"},"swagger.json")," spec can be found at the following URL:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"https://{app_id}.cloud.ditto.live/api/v2/swagger.json"))),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"The HTTP API is accessible through the ",(0,a.kt)("inlineCode",{parentName:"p"},"https://{app_id}.cloud.ditto.live/api/v3/store/[method]")," endpoint."),(0,a.kt)("h3",{id:"endpoints"},"Endpoints"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"/api/v3/store/write")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"/api/v3/store/findbyid")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"/api/v3/store/find"))),(0,a.kt)("h3",{id:"write"},"Write"),(0,a.kt)("p",null,"A full example with ",(0,a.kt)("inlineCode",{parentName:"p"},"curl")," that shows how to use the HTTP API to create explicit\ntypes. In this example, we create a ",(0,a.kt)("inlineCode",{parentName:"p"},"friends")," key with a Register that is an\narray, and ",(0,a.kt)("inlineCode",{parentName:"p"},"orderCount")," which is a counter."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'curl -X POST \'https://{app_id}.cloud.ditto.live/api/v3/store/write\' \\\n  --header \'X-DITTO-CLIENT-ID: AAAAAAAAAAAAAAAAAAAABQ==\' \\\n  --header \'Content-Type: application/json\' \\\n  --data-raw \'{\n      "commands": [{\n        "method": "upsert",\n        "collection": "people",\n        "id": "123abc",\n        "value": {\n          "name": "John",\n          "friends": ["Susan"],\n          "orderCount": 5\n        },\n        "valueTypeOverrides": {\n          "orderCount": "counter"\n        }\n      }]\n  }\'\n')),(0,a.kt)("p",null,"To create and modify a mutable type such as Register Map or Counter in the HTTP API\nfor v2, you can annotate the value with the type you intend to use. In v2, Arrays are registers by default. That means you do not need to add\n",(0,a.kt)("inlineCode",{parentName:"p"},"register")," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"valueTypeOverrides")," payload, but you can if you want to be\nexplicit."),(0,a.kt)("p",null,"In this example, We use the ",(0,a.kt)("inlineCode",{parentName:"p"},"counter")," override by adding the following key to the payload:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'"valueTypeOverrides": {\n  "orderCount": "counter",\n  "friends": "register"\n}\n')),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},(0,a.kt)("strong",{parentName:"p"},"Can I issue a find query inside of a write command?")),(0,a.kt)("p",{parentName:"div"},"No. First, send a ",(0,a.kt)("inlineCode",{parentName:"p"},"find"),", and then after a response, send an ",(0,a.kt)("inlineCode",{parentName:"p"},"write")," request."))),(0,a.kt)("h3",{id:"findbyid"},"FindByID"),(0,a.kt)("p",null,"To find this document you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"/api/v3/store/findbyid"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"curl --location --request POST 'https://{app_id}.cloud.ditto.live/api/v2/store/findbyid' \\\n--header 'X-DITTO-CLIENT-ID: AAAAAAAAAAAAAAAAAAAABQ==' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n  \"collection\": \"people\",\n  \"id\": \"123abc\"\n}'\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  "collection": "people",\n  "id": "123abc"\n}\n')),(0,a.kt)("h3",{id:"find"},"Find"),(0,a.kt)("p",null,"When you query for this data using ",(0,a.kt)("inlineCode",{parentName:"p"},"/api/v3/store/find"),", you can use the key ",(0,a.kt)("inlineCode",{parentName:"p"},"serializedAs: latestValuesAndTypes"),"  to receive a response with each\ntype specified:"),(0,a.kt)("p",null,"Request:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'curl -X POST \'https://{app_id}.cloud.ditto.live/api/v2/store/find\' \\\n  --header \'X-DITTO-CLIENT-ID: AAAAAAAAAAAAAAAAAAAABQ==\' \\\n  --header \'Content-Type: application/json\' \\\n  --data-raw \'{\n    "collection": "people",\n    "query": "name==\'John\'",\n    "limit": 2,\n    "serializedAs": "latestValuesAndTypes"\n}\'\n')),(0,a.kt)("p",null,"Response: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "value": {\n    "_id": "123abc",\n    "fields": {\n      "name": {\n          "register": { "value": "John" },\n      },\n      "friends": {\n          "register": { "value": ["Susan"] },\n      },\n      "orderCount": {\n          "counter": { "value": 5 }\n      },\n    }\n  }\n}\n')),(0,a.kt)("p",null,"For more examples, see the corresponding sections in the Concepts section for ",(0,a.kt)("a",{parentName:"p",href:"./common/concepts/querying"},"querying"),", ",(0,a.kt)("a",{parentName:"p",href:"./common/concepts/writing"},"writing"),", and ",(0,a.kt)("a",{parentName:"p",href:"./common/concepts/remove"},"remove"),"."),(0,a.kt)("h2",{id:"distinct-values"},"Distinct Values"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"POST https://{app_id}.cloud.ditto.live/api/v1/collections/<collection_name>/distinct_values")),(0,a.kt)("p",null,"Query for the distinct values in a collection. Returns a single document containing the paths and their distinct values.  Paths are specified as json arrays of strings. This query expects a body of json in the following format:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  "filter": "true"\n  "paths": [\n    "widgets",\n    "nested.device_id",\n    "nested.tags[*]",\n    "nested",\n    "nested.tags"\n  ]\n}\n')),(0,a.kt)("p",null,"Parameters"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"filter - The query used to select documents."),(0,a.kt)("li",{parentName:"ul"},"paths (list) - A list of DittoQl paths to get distinct values for. See Supported Paths section below."),(0,a.kt)("li",{parentName:"ul"},"timeout_millis (number, optional) - the timeout, in milliseconds")),(0,a.kt)("p",null,"Supported paths"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Field access. Eg. ",(0,a.kt)("inlineCode",{parentName:"li"},"fieldA"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"fieldA.fieldB"),"."),(0,a.kt)("li",{parentName:"ul"},"Array projection. Eg. ",(0,a.kt)("inlineCode",{parentName:"li"},"fieldA.arrayB[*]"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"fieldA.arrayB[*].fieldC"),"."),(0,a.kt)("li",{parentName:"ul"},"No other access methods are supported.")),(0,a.kt)("p",null,"Response"),(0,a.kt)("p",null,"  The response will contain an object where the keys are the requested paths (same format as the request) and their values are the unique values at the respective paths.\nNote that only primitive values are returned distinctly. Any arrays or objects present at the specified path will appear in the result as an empty array ",(0,a.kt)("inlineCode",{parentName:"p"},"{}")," or object ",(0,a.kt)("inlineCode",{parentName:"p"},"{}")," respectively."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'HTTP/1.1 200 OK\nContent-Type: application/json\nX-DITTO-TXN-ID: 7\n{\n  "item": {\n    "widgets": [1, 2, 3],\n    "nested.device_id": ["device1", "device2"],\n    "nested.tags[*]": ["tag1", "tag2"],\n    "nested": [{}],\n    "nested.tags": [[]],\n  }\n}\n\n')))}d.isMDXComponent=!0}}]);