(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9842],{54808:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var s=t(87462),a=(t(67294),t(3905));t(8209);const o={title:"3 - Node.js Example"},i=void 0,r={unversionedId:"guides/kafka/nodejs",id:"guides/kafka/nodejs",isDocsHomePage:!1,title:"3 - Node.js Example",description:"In this section we will listen to Kafka events and pipe them to commandline process stdout.",source:"@site/docs/common/guides/kafka/3-nodejs.md",sourceDirName:"guides/kafka",slug:"/guides/kafka/nodejs",permalink:"/common/guides/kafka/nodejs",editUrl:"https://github.com/getditto/docs/edit/main/docs/common/guides/kafka/3-nodejs.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"3 - Node.js Example"},sidebar:"defaultSidebar",previous:{title:"2 - Ditto events",permalink:"/common/guides/kafka/consumer"},next:{title:"Overview",permalink:"/common/security/overview"}},l=[{value:"Prequisites",id:"prequisites",children:[],level:2},{value:"Code Sample",id:"code-sample",children:[],level:2},{value:"Converting Certificates to the proper formats",id:"converting-certificates-to-the-proper-formats",children:[],level:2},{value:"Decoding transactions",id:"decoding-transactions",children:[{value:"Checking <code>transaction.type</code>",id:"checking-transactiontype",children:[],level:3}],level:2},{value:"Parsing <code>documentChanged</code> events",id:"parsing-documentchanged-events",children:[{value:"Inserting a new document",id:"inserting-a-new-document",children:[],level:3},{value:"Updating an existing document",id:"updating-an-existing-document",children:[],level:3},{value:"Removing a document",id:"removing-a-document",children:[],level:3}],level:2},{value:"Parsing <code>requeryRequired</code> event",id:"parsing-requeryrequired-event",children:[],level:2},{value:"Code Sample",id:"code-sample-1",children:[],level:2}],c={toc:l},d="wrapper";function u(e){let{components:n,...o}=e;return(0,a.kt)(d,(0,s.Z)({},c,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In this section we will listen to Kafka events and pipe them to commandline process ",(0,a.kt)("inlineCode",{parentName:"p"},"stdout"),". "),(0,a.kt)("h2",{id:"prequisites"},"Prequisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"An instance of MongoDB."),(0,a.kt)("li",{parentName:"ul"},"Basic understanding of Node.js."),(0,a.kt)("li",{parentName:"ul"},"Local installation of ",(0,a.kt)("a",{parentName:"li",href:"https://nodejs.org/en/"},"Node 16"),". "),(0,a.kt)("li",{parentName:"ul"},"A Ditto application syncing with the Big Peer on the ",(0,a.kt)("a",{parentName:"li",href:"https://portal.ditto.live/"},"Ditto Portal")," that is on a dedicated cluster.")),(0,a.kt)("h2",{id:"code-sample"},"Code Sample"),(0,a.kt)("p",null,"See the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/getditto/external-sync/tree/main/nodejs-mongo"},"github repository")," for example code to connect a Node.js instance to the Ditto Big peer as a Kafka sink to MongoDB."),(0,a.kt)("h2",{id:"converting-certificates-to-the-proper-formats"},"Converting Certificates to the proper formats"),(0,a.kt)("p",null,"First, you must download the proper Kafka certficiates and convert them to the format required by SSL via Node.js. "),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"kafka credentials",src:t(13060).Z})),(0,a.kt)("p",null,"Convert the .p12 files to the required user.key, cluster.crt, and user.crt files. When propmted, use the appropriate cluster certficiate password or user password as described in the portal."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\u276f openssl pkcs12 -in cluster.p12 -out cluster.crt.pem -nokeys\n\u276f openssl x509 -in cluster.crt.pem -out cluster.crt\n\u276f openssl pkcs12 -in user.p12 -out user.crt -clcerts\n\u276f openssl pkcs12 -in user.p12 -out user.key.pem -nocerts\n\u276f openssl pkey -in user.key.pem -out user.key\n")),(0,a.kt)("h2",{id:"decoding-transactions"},"Decoding transactions"),(0,a.kt)("p",null,"All messages from the Ditto CDC are sent to your Kafka sink as JSON. First, you must decode the transaction as JSON. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"try {\n    const transaction = JSON.parse(message.value!.toString())\n    parseTransaction(database, transaction).then(() => {\n        // Success!\n    }).catch(err => {\n        console.error('[ERROR] Got error when parsing transaction', err)\n    })\n} catch (err) {\n    console.error(\"[ERROR]: Failed to parse change\", change)\n}\n")),(0,a.kt)("h3",{id:"checking-transactiontype"},"Checking ",(0,a.kt)("inlineCode",{parentName:"h3"},"transaction.type")),(0,a.kt)("p",null,"Each transaction has a type -- Ditto has two types, ",(0,a.kt)("inlineCode",{parentName:"p"},"requeryRequired")," and\n",(0,a.kt)("inlineCode",{parentName:"p"},"documentChanged"),". "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"async function parseTransaction (database: Db, transaction: DittoTransaction) {\n  const collectionName = transaction.collection\n  const collection = database.collection(collectionName);\n\n  switch (transaction.type) {\n    case 'requeryRequired':\n        onRequeryRequired()\n      return;\n    case 'documentChanged':\n        onDocumentChanged()\n    default: \n      break;\n  }\n}\n")),(0,a.kt)("h2",{id:"parsing-documentchanged-events"},"Parsing ",(0,a.kt)("inlineCode",{parentName:"h2"},"documentChanged")," events"),(0,a.kt)("p",null,"For the ",(0,a.kt)("inlineCode",{parentName:"p"},"onDocumentChanged")," function, we will parse the event into one of three possible types: Insert, Update, and Remove"),(0,a.kt)("h3",{id:"inserting-a-new-document"},"Inserting a new document"),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"change.oldValue")," is equal to ",(0,a.kt)("inlineCode",{parentName:"p"},"null"),", that means that a new document was inserted into the database. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"if (transaction.change.method === 'update' && transaction.change.oldValue === null) {\n  let change: DittoInsert = transaction.change\n  const result = await collection.insertOne(change.newValue);\n  console.log(\n   `A document was inserted with the _id: ${result.insertedId}`,\n  );\n}\n")),(0,a.kt)("h3",{id:"updating-an-existing-document"},"Updating an existing document"),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"change.oldValue")," has a value, that means that a document with the corresponding ",(0,a.kt)("inlineCode",{parentName:"p"},"_id")," was updated to the value indicated in ",(0,a.kt)("inlineCode",{parentName:"p"},"change.newValue"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"if (transaction.change.method === 'upsert' && oldValue !== null) {\n    let change: DittoUpdate = transaction.change\n    const _id = change.oldValue._id\n    const filter = { _id };\n    const result = await collection.replaceOne(filter, change.newValue, {upsert: true});\n    console.log(\n        `${result.matchedCount} document(s) matched the filter, updated ${result.modifiedCount} document(s)`,\n    );\n}\n")),(0,a.kt)("h3",{id:"removing-a-document"},"Removing a document"),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"change.method")," is equal to ",(0,a.kt)("inlineCode",{parentName:"p"},'"remove"'),", then the document has been deleted from Ditto."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"if (transaction.change.method === 'remove') {\n    let change: DittoRemove = transaction.change\n    const _id = transaction.change.value._id\n    const filter = { _id };\n    const result = await collection.deleteOne(filter)\n    console.log(\n    `${result.deletedCount} document(s) matched the filter`,\n    );\n}\n")),(0,a.kt)("h2",{id:"parsing-requeryrequired-event"},"Parsing ",(0,a.kt)("inlineCode",{parentName:"h2"},"requeryRequired")," event"),(0,a.kt)("p",null,"Send an HTTP request to tell the Ditto Big Peer to catch up to the given\ntransaction id as part of ",(0,a.kt)("inlineCode",{parentName:"p"},"transaction.txnId")," and the given ",(0,a.kt)("inlineCode",{parentName:"p"},"collection"),". "),(0,a.kt)("p",null,"Your HTTP Endpoint will look like ",(0,a.kt)("inlineCode",{parentName:"p"},"https://${APP_ID}.cloud.ditto.live")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"function onRequeryRequired (database: Db, transaction: DittoRequeryRequired) {\n  const HTTP_ENDPOINT = httpEndpoint + '/api/v3/store/find'\n  for (const requeryDoc of transaction.documents) {\n    const req = {\n      method: 'post',\n      url: HTTP_ENDPOINT,\n      headers: {\n        'Content-Type': 'application/json',\n        'X-DITTO-TXN-ID': transaction.txnId\n      }, \n      data: {\n        \"collection\": transaction,\n        \"query\": \"true\",\n        \"limit\": 1\n      }\n    }\n\n    axios(req).then(function (response) {\n      if (response.data.message) {\n        // ERROR\n      } else {\n        for (const doc of response.data.documents) {\n          // Insert updated docs\n          const mongodbCollection = database.collection(requeryDoc.collectionName);\n          let missingDocument = doc as DittoHTTPDocument \n          mongodbCollection.replaceOne({_id: missingDocument.id}, missingDocument)\n        }\n      }\n    }).catch(err => {\n      console.error(`[ERROR]: HTTP find request ${req}`)\n      console.error(err)\n    });\n}\n")),(0,a.kt)("h2",{id:"code-sample-1"},"Code Sample"),(0,a.kt)("p",null,"See the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/getditto/external-sync/tree/main/nodejs-mongo"},"github repository")," for the full example Node.js code."))}u.isMDXComponent=!0},46700:(e,n,t)=>{var s={"./af":42786,"./af.js":42786,"./ar":30867,"./ar-dz":14130,"./ar-dz.js":14130,"./ar-kw":96135,"./ar-kw.js":96135,"./ar-ly":56440,"./ar-ly.js":56440,"./ar-ma":47702,"./ar-ma.js":47702,"./ar-sa":16040,"./ar-sa.js":16040,"./ar-tn":37100,"./ar-tn.js":37100,"./ar.js":30867,"./az":31083,"./az.js":31083,"./be":9808,"./be.js":9808,"./bg":68338,"./bg.js":68338,"./bm":67438,"./bm.js":67438,"./bn":8905,"./bn-bd":76225,"./bn-bd.js":76225,"./bn.js":8905,"./bo":11560,"./bo.js":11560,"./br":1278,"./br.js":1278,"./bs":80622,"./bs.js":80622,"./ca":2468,"./ca.js":2468,"./cs":5822,"./cs.js":5822,"./cv":50877,"./cv.js":50877,"./cy":47373,"./cy.js":47373,"./da":24780,"./da.js":24780,"./de":59740,"./de-at":60217,"./de-at.js":60217,"./de-ch":60894,"./de-ch.js":60894,"./de.js":59740,"./dv":5300,"./dv.js":5300,"./el":50837,"./el.js":50837,"./en-au":78348,"./en-au.js":78348,"./en-ca":77925,"./en-ca.js":77925,"./en-gb":22243,"./en-gb.js":22243,"./en-ie":46436,"./en-ie.js":46436,"./en-il":47207,"./en-il.js":47207,"./en-in":44175,"./en-in.js":44175,"./en-nz":76319,"./en-nz.js":76319,"./en-sg":31662,"./en-sg.js":31662,"./eo":92915,"./eo.js":92915,"./es":55655,"./es-do":55251,"./es-do.js":55251,"./es-mx":96112,"./es-mx.js":96112,"./es-us":71146,"./es-us.js":71146,"./es.js":55655,"./et":5603,"./et.js":5603,"./eu":77763,"./eu.js":77763,"./fa":76959,"./fa.js":76959,"./fi":11897,"./fi.js":11897,"./fil":42549,"./fil.js":42549,"./fo":94694,"./fo.js":94694,"./fr":94470,"./fr-ca":63049,"./fr-ca.js":63049,"./fr-ch":52330,"./fr-ch.js":52330,"./fr.js":94470,"./fy":5044,"./fy.js":5044,"./ga":29295,"./ga.js":29295,"./gd":2101,"./gd.js":2101,"./gl":38794,"./gl.js":38794,"./gom-deva":27884,"./gom-deva.js":27884,"./gom-latn":23168,"./gom-latn.js":23168,"./gu":95349,"./gu.js":95349,"./he":24206,"./he.js":24206,"./hi":30094,"./hi.js":30094,"./hr":30316,"./hr.js":30316,"./hu":22138,"./hu.js":22138,"./hy-am":11423,"./hy-am.js":11423,"./id":29218,"./id.js":29218,"./is":90135,"./is.js":90135,"./it":90626,"./it-ch":10150,"./it-ch.js":10150,"./it.js":90626,"./ja":39183,"./ja.js":39183,"./jv":24286,"./jv.js":24286,"./ka":12105,"./ka.js":12105,"./kk":47772,"./kk.js":47772,"./km":18758,"./km.js":18758,"./kn":79282,"./kn.js":79282,"./ko":33730,"./ko.js":33730,"./ku":1408,"./ku.js":1408,"./ky":33291,"./ky.js":33291,"./lb":36841,"./lb.js":36841,"./lo":55466,"./lo.js":55466,"./lt":57010,"./lt.js":57010,"./lv":37595,"./lv.js":37595,"./me":39861,"./me.js":39861,"./mi":35493,"./mi.js":35493,"./mk":95966,"./mk.js":95966,"./ml":87341,"./ml.js":87341,"./mn":5115,"./mn.js":5115,"./mr":10370,"./mr.js":10370,"./ms":9847,"./ms-my":41237,"./ms-my.js":41237,"./ms.js":9847,"./mt":72126,"./mt.js":72126,"./my":56165,"./my.js":56165,"./nb":64924,"./nb.js":64924,"./ne":16744,"./ne.js":16744,"./nl":93901,"./nl-be":59814,"./nl-be.js":59814,"./nl.js":93901,"./nn":83877,"./nn.js":83877,"./oc-lnc":92135,"./oc-lnc.js":92135,"./pa-in":15858,"./pa-in.js":15858,"./pl":64495,"./pl.js":64495,"./pt":89520,"./pt-br":57971,"./pt-br.js":57971,"./pt.js":89520,"./ro":96459,"./ro.js":96459,"./ru":21793,"./ru.js":21793,"./sd":40950,"./sd.js":40950,"./se":10490,"./se.js":10490,"./si":90124,"./si.js":90124,"./sk":64249,"./sk.js":64249,"./sl":14985,"./sl.js":14985,"./sq":51104,"./sq.js":51104,"./sr":49131,"./sr-cyrl":79915,"./sr-cyrl.js":79915,"./sr.js":49131,"./ss":85893,"./ss.js":85893,"./sv":98760,"./sv.js":98760,"./sw":91172,"./sw.js":91172,"./ta":27333,"./ta.js":27333,"./te":23110,"./te.js":23110,"./tet":52095,"./tet.js":52095,"./tg":27321,"./tg.js":27321,"./th":9041,"./th.js":9041,"./tk":19005,"./tk.js":19005,"./tl-ph":75768,"./tl-ph.js":75768,"./tlh":89444,"./tlh.js":89444,"./tr":72397,"./tr.js":72397,"./tzl":28254,"./tzl.js":28254,"./tzm":51106,"./tzm-latn":30699,"./tzm-latn.js":30699,"./tzm.js":51106,"./ug-cn":9288,"./ug-cn.js":9288,"./uk":67691,"./uk.js":67691,"./ur":13795,"./ur.js":13795,"./uz":6791,"./uz-latn":60588,"./uz-latn.js":60588,"./uz.js":6791,"./vi":65666,"./vi.js":65666,"./x-pseudo":14378,"./x-pseudo.js":14378,"./yo":75805,"./yo.js":75805,"./zh-cn":83839,"./zh-cn.js":83839,"./zh-hk":55726,"./zh-hk.js":55726,"./zh-mo":99807,"./zh-mo.js":99807,"./zh-tw":74152,"./zh-tw.js":74152};function a(e){var n=o(e);return t(n)}function o(e){if(!t.o(s,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return s[e]}a.keys=function(){return Object.keys(s)},a.resolve=o,e.exports=a,a.id=46700},13060:(e,n,t)=>{"use strict";t.d(n,{Z:()=>s});const s=t.p+"assets/images/kafka-browser-fc06d4e4570b17e09d3b114112159160.png"}}]);