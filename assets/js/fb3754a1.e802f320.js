"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8220],{3905:function(n,e,t){t.d(e,{Zo:function(){return l},kt:function(){return f}});var i=t(67294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,i)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,i,o=function(n,e){if(null==n)return{};var t,i,o={},r=Object.keys(n);for(i=0;i<r.length;i++)t=r[i],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(i=0;i<r.length;i++)t=r[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var p=i.createContext({}),s=function(n){var e=i.useContext(p),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},l=function(n){var e=s(n.components);return i.createElement(p.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},d=i.forwardRef((function(n,e){var t=n.components,o=n.mdxType,r=n.originalType,p=n.parentName,l=c(n,["components","mdxType","originalType","parentName"]),d=s(t),f=o,y=d["".concat(p,".").concat(f)]||d[f]||u[f]||r;return t?i.createElement(y,a(a({ref:e},l),{},{components:t})):i.createElement(y,a({ref:e},l))}));function f(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var r=t.length,a=new Array(r);a[0]=d;var c={};for(var p in e)hasOwnProperty.call(e,p)&&(c[p]=e[p]);c.originalType=n,c.mdxType="string"==typeof n?n:o,a[1]=c;for(var s=2;s<r;s++)a[s]=t[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},86951:function(n,e,t){t.r(e),t.d(e,{contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return l}});var i=t(87462),o=t(63366),r=(t(67294),t(3905)),a=["components"],c={title:"Prolonged Background Sync",sidebar_position:5},p=void 0,s={unversionedId:"quick-tips/prolonged-background-sync",id:"quick-tips/prolonged-background-sync",isDocsHomePage:!1,title:"Prolonged Background Sync",description:"iOS apps will stop Ditto's sync protocol when the application is put into the",source:"@site/docs/ios/quick-tips/prolonged-background-sync.md",sourceDirName:"quick-tips",slug:"/quick-tips/prolonged-background-sync",permalink:"/ios/quick-tips/prolonged-background-sync",editUrl:"https://github.com/getditto/docs/tree/main/docs/ios/quick-tips/prolonged-background-sync.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Prolonged Background Sync",sidebar_position:5},sidebar:"docs",previous:{title:"Animating UITableView with the Observe API",permalink:"/ios/quick-tips/uitableview-animations-with-observe"},next:{title:"Avoiding Excessive Memory Consumption",permalink:"/ios/quick-tips/avoiding-excessive-memory-consumption"}},l=[],u={toc:l};function d(n){var e=n.components,t=(0,o.Z)(n,a);return(0,r.kt)("wrapper",(0,i.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"iOS apps will stop Ditto's sync protocol when the application is put into the\nbackground. If you need Ditto to continue syncronizing while the application is\nin the background, you need to tell iOS to keep the app active. To do this, we\nrecommend playing silent music in the background."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'final public class BackgroundSync {\n    public static let shared = BackgroundSync()\n    private let player: AVAudioPlayer\n    private let base64AudioString = "UklGRiYAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQIAAAD8/w=="\n\n    public var isOn = false\n\n    private init() {\n        let audioData = Data(base64Encoded: base64AudioString)!\n        try! AVAudioSession.sharedInstance().setCategory(AVAudioSession.Category.playback,\n                                                         mode: .default,\n                                                         options: .mixWithOthers)\n        try! AVAudioSession.sharedInstance().setActive(true)\n        player = try! AVAudioPlayer(data: audioData, fileTypeHint: "wav")\n        player.numberOfLoops = -1\n        player.volume = 0.01\n        player.prepareToPlay()\n    }\n\n    public func start() {\n        if (isOn) { return }\n\n        NotificationCenter.default.addObserver(self, selector: #selector(interuptedAudio), name: AVAudioSession.interruptionNotification, object: AVAudioSession.sharedInstance())\n        self.player.play()\n        print("BackgroundSync started")\n    }\n\n    public func stop() {\n        NotificationCenter.default.removeObserver(self, name: AVAudioSession.interruptionNotification, object: nil)\n        if player.isPlaying {\n            player.stop()\n            print("BackgroundSync stopped")\n        }\n    }\n\n    @objc private func interuptedAudio(_ notification: Notification) {\n        if notification.name == AVAudioSession.interruptionNotification && notification.userInfo != nil {\n            let info = notification.userInfo!\n            var intValue = 0\n            (info[AVAudioSessionInterruptionTypeKey]! as AnyObject).getValue(&intValue)\n            if intValue == 1 { self.player.play() }\n        }\n    }\n}\n')),(0,r.kt)("p",null,"Then, call ",(0,r.kt)("inlineCode",{parentName:"p"},"BackgroundSync.shared.start()")," when your application goes into the background. For example,"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},"@UIApplicationMain\nfinal class AppDelegate: UIResponder, UIApplicationDelegate {\n    var window: UIWindow?\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        // ... your app\n    }\n\n    func applicationWillResignActive(_ application: UIApplication) {\n        BackgroundSync.shared.start()\n    }\n\n    func applicationWillEnterForeground(_ application: UIApplication) {\n        BackgroundSync.shared.stop()\n    }\n}\n")),(0,r.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If you're using scenes, UIKit will not call this method. ",(0,r.kt)("inlineCode",{parentName:"p"},"Use sceneWillEnterForeground()")," instead to prepare your app to enter the foreground. (",(0,r.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623076-applicationwillenterforeground"},"source"),")"))))}d.isMDXComponent=!0}}]);