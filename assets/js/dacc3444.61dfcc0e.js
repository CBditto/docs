"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9262],{3905:function(t,e,n){n.d(e,{Zo:function(){return u},kt:function(){return f}});var r=n(67294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var c=r.createContext({}),l=function(t){var e=r.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},u=function(t){var e=l(t.components);return r.createElement(c.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,i=t.mdxType,o=t.originalType,c=t.parentName,u=s(t,["components","mdxType","originalType","parentName"]),d=l(n),f=i,m=d["".concat(c,".").concat(f)]||d[f]||p[f]||o;return n?r.createElement(m,a(a({ref:e},u),{},{components:n})):r.createElement(m,a({ref:e},u))}));function f(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var o=n.length,a=new Array(o);a[0]=d;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=t,s.mdxType="string"==typeof t?t:i,a[1]=s;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},19380:function(t,e,n){n.r(e),n.d(e,{contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var r=n(87462),i=n(63366),o=(n(67294),n(3905)),a=["components"],s={title:"2 - Syncing data"},c=void 0,l={unversionedId:"tutorial/subscription",id:"tutorial/subscription",isDocsHomePage:!1,title:"2 - Syncing data",description:"2-1 Set up subscription",source:"@site/docs/javascript/tutorial/2-subscription.mdx",sourceDirName:"tutorial",slug:"/tutorial/subscription",permalink:"/javascript/tutorial/subscription",editUrl:"https://github.com/getditto/docs/tree/main/docs/javascript/tutorial/2-subscription.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"2 - Syncing data"},sidebar:"docs",previous:{title:"1 - Setup",permalink:"/javascript/tutorial/setup"},next:{title:"3 - Create tasks",permalink:"/javascript/tutorial/create-task"}},u=[{value:"2-1 Set up subscription",id:"2-1-set-up-subscription",children:[],level:2},{value:"2-2 Listen to changes",id:"2-2-listen-to-changes",children:[],level:2}],p={toc:u};function d(t){var e=t.components,n=(0,i.Z)(t,a);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"2-1-set-up-subscription"},"2-1 Set up subscription"),(0,o.kt)("p",null,"You must create a ",(0,o.kt)("inlineCode",{parentName:"p"},"subscription")," object in the global scope so that\nditto syncronizes in the background throughout the duration of the program."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { init, Ditto } from '@dittolive/ditto'\n\nlet ditto\n//highlight-start\nlet subscription\nlet liveQuery\n//highlight-end\n\nasync function main () {\n  await init()\n\n  ditto = new Ditto({ type: 'onlinePlayground', appID: 'YOUR_APP_ID', token: 'YOUR_TOKEN_HERE'})\n  ditto.startSync()\n\n  //highlight-start\n  // Start a subscription\n  subscription = ditto.store.collection(\"tasks\").find(\"isDeleted == false\").subscribe()\n  //highlight-end\n\n\n}\n\nmain()\n")),(0,o.kt)("h2",{id:"2-2-listen-to-changes"},"2-2 Listen to changes"),(0,o.kt)("p",null,"Now, every time there is a change to a document, you can retrieve those\ndocuments and print them out to the console. Use ",(0,o.kt)("inlineCode",{parentName:"p"},"observeLocal()")," for this, as seen below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { init, Ditto } from \'@dittolive/ditto\'\n\nlet ditto\nlet subscription\n//highlight-start\nlet liveQuery\n//highlight-end\n\nasync function main () {\n  await init()\n\n  ditto = new Ditto({ type: \'onlinePlayground\', appID: \'YOUR_APP_ID\', token: \'YOUR_TOKEN_HERE\'})\n  ditto.startSync()\n\n  subscription = ditto.store.collection("tasks").find("isDeleted == false").subscribe()\n\n  //highlight-start\n  // Listen for changes\n  liveQuery = ditto.store.collection("tasks").find("isDeleted == false").observeLocal((docs, event) => {\n    console.log(docs)\n  })\n  //highlight-end\n\n  ditto.store.collection("tasks").upsert({\n    isCompleted: false,\n    isDeleted: false,\n    body: "Hello world!"\n  })\n}\n\nmain()\n')),(0,o.kt)("p",null,"Now you're ready to make a tasks app!"))}d.isMDXComponent=!0}}]);