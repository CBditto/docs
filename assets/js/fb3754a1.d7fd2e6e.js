"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8220],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return f}});var i=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=i.createContext({}),u=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=u(e.components);return i.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=u(t),f=o,y=d["".concat(s,".").concat(f)]||d[f]||p[f]||r;return t?i.createElement(y,a(a({ref:n},l),{},{components:t})):i.createElement(y,a({ref:n},l))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,a=new Array(r);a[0]=d;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var u=2;u<r;u++)a[u]=t[u];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},86951:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return l}});var i=t(87462),o=t(63366),r=(t(67294),t(3905)),a=["components"],c={title:"Prolonged Background Sync",sidebar_position:5},s=void 0,u={unversionedId:"quick-tips/prolonged-background-sync",id:"quick-tips/prolonged-background-sync",isDocsHomePage:!1,title:"Prolonged Background Sync",description:"iOS apps will deallocate Ditto and stop syncronization when the application is",source:"@site/docs/ios/quick-tips/prolonged-background-sync.md",sourceDirName:"quick-tips",slug:"/quick-tips/prolonged-background-sync",permalink:"/ios/quick-tips/prolonged-background-sync",editUrl:"https://github.com/getditto/docs/tree/main/docs/ios/quick-tips/prolonged-background-sync.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Prolonged Background Sync",sidebar_position:5},sidebar:"docs",previous:{title:"Animating UITableView with the Observe API",permalink:"/ios/quick-tips/uitableview-animations-with-observe"},next:{title:"Avoiding Excessive Memory Consumption",permalink:"/ios/quick-tips/avoiding-excessive-memory-consumption"}},l=[],p={toc:l};function d(e){var n=e.components,t=(0,o.Z)(e,a);return(0,r.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"iOS apps will deallocate Ditto and stop syncronization when the application is\nput out of focus and into the background. If you need Ditto to continue\nsyncronizing while the application is in the background, you need to tell iOS to keep the\napp active."),(0,r.kt)("p",null,"To do this, we recommend playing empty music in the background which will keep the app active."),(0,r.kt)("p",null,"Create an instnace of ",(0,r.kt)("inlineCode",{parentName:"p"},"BackgroundSync")," on your main controller and call\n",(0,r.kt)("inlineCode",{parentName:"p"},"BackgroundSync.start()")," to start playing empty music."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'final public class BackgroundSync {\n    public static let shared = BackgroundSync()\n    private let player: AVAudioPlayer\n    private let base64AudioString = "UklGRiYAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQIAAAD8/w=="\n\n    public var isOn = false\n\n    private init() {\n        let audioData = Data(base64Encoded: base64AudioString)!\n        try! AVAudioSession.sharedInstance().setCategory(AVAudioSession.Category.playback,\n                                                         mode: .default,\n                                                         options: .mixWithOthers)\n        try! AVAudioSession.sharedInstance().setActive(true)\n        player = try! AVAudioPlayer(data: audioData, fileTypeHint: "wav")\n        player.numberOfLoops = -1\n        player.volume = 0.01\n        player.prepareToPlay()\n    }\n\n    public func start() {\n        guard isOn else { return }\n\n        NotificationCenter.default.addObserver(self, selector: #selector(interuptedAudio), name: AVAudioSession.interruptionNotification, object: AVAudioSession.sharedInstance())\n        self.player.play()\n        print("BackgroundSync started")\n    }\n\n    public func stop() {\n        NotificationCenter.default.removeObserver(self, name: AVAudioSession.interruptionNotification, object: nil)\n        if player.isPlaying {\n            player.stop()\n            print("BackgroundSync stopped")\n        }\n    }\n\n    @objc private func interuptedAudio(_ notification: Notification) {\n        if notification.name == AVAudioSession.interruptionNotification && notification.userInfo != nil {\n            let info = notification.userInfo!\n            var intValue = 0\n            (info[AVAudioSessionInterruptionTypeKey]! as AnyObject).getValue(&intValue)\n            if intValue == 1 { self.player.play() }\n        }\n    }\n}\n')))}d.isMDXComponent=!0}}]);