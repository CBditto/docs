"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8866],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),u=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=u(e.components);return a.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=u(t),m=r,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return t?a.createElement(f,l(l({ref:n},s),{},{components:t})):a.createElement(f,l({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=t[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},79443:function(e,n,t){var a=(0,t(67294).createContext)(void 0);n.Z=a},80944:function(e,n,t){var a=t(67294),r=t(79443);n.Z=function(){var e=(0,a.useContext)(r.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e}},30547:function(e,n,t){var a=t(67294);n.Z=function(e){var n=e.children,t=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:r},n)}},49366:function(e,n,t){var a=t(67294),r=t(80944),o=t(86010);n.Z=function(e){var n,t=e.lazy,l=(e.block,e.defaultValue),i=e.values,c=e.groupId,u=(e.className,a.Children.toArray(e.children)),s=null!=i?i:u.map((function(e){return{value:e.props.value,label:e.props.label}})),p=null!=l?l:null==(n=u.find((function(e){return e.props.default})))?void 0:n.props.value,d=(0,r.Z)(),m=d.tabGroupChoices,f=d.setTabGroupChoices,v=(0,a.useState)(p),b=v[0],g=v[1];if(null!=c){var h=m[c];null!=h&&h!==b&&s.some((function(e){return e.value===h}))&&g(h)}var k=function(e){g(e),null!=c&&f(c,e)};return a.createElement("div",{className:"tabs-container"},a.createElement("div",{className:"sm:hidden"},a.createElement("label",{htmlFor:"tabs",className:"sr-only"},"Select a tab"),a.createElement("select",{id:"tabs",name:"tabs",value:b,onChange:function(e){return k(e.currentTarget.value)},className:"block w-full focus:ring-blue-500 focus:border-blue-500 border-gray-300 rounded-md"},s.map((function(e){var n=e.value,t=e.label;return a.createElement("option",{value:n,key:n},null!=t?t:n)})))),a.createElement("div",{className:"hidden sm:block"},a.createElement("nav",{className:"flex space-x-4","aria-label":"Tabs"},s.map((function(e){var n=e.value,t=e.label;return a.createElement("button",{key:n,onClick:function(){return k(n)},className:(0,o.Z)(b===n?"bg-blue-100 text-blue-700":"text-gray-500 hover:text-gray-700","px-3 py-2 font-medium text-sm rounded-md"),"aria-current":b===n?"page":void 0},null!=t?t:n)})))),t?(0,a.cloneElement)(u.filter((function(e){return e.props.value===b}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},u.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==b})}))))}},85802:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return u},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return f}});var a=t(87462),r=t(63366),o=(t(67294),t(3905)),l=t(49366),i=t(30547),c=["components"],u={title:"Update",sidebar_position:3},s=void 0,p={unversionedId:"concepts/update",id:"concepts/update",isDocsHomePage:!1,title:"Update",description:"Updating Documents",source:"@site/docs/concepts/update.mdx",sourceDirName:"concepts",slug:"/concepts/update",permalink:"/concepts/update",editUrl:"https://github.com/getditto/docs/edit/master/docs/concepts/update.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Update",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Upsert",permalink:"/concepts/upsert"},next:{title:"Querying",permalink:"/concepts/querying"}},d=[{value:"Updating Documents",id:"updating-documents",children:[],level:2}],m={toc:d};function f(e){var n=e.components,t=(0,r.Z)(e,c);return(0,o.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"updating-documents"},"Updating Documents"),(0,o.kt)("p",null,"Updating documents are categorized into 3 types of operations:"),(0,o.kt)("p",null,"Standard"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Set - sets value for a given key in the document"),(0,o.kt)("li",{parentName:"ul"},"Remove - removes a value for a given key in the document")),(0,o.kt)("p",null,"Counters"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Replace with counter - will convert a number value for a given key into a counter"),(0,o.kt)("li",{parentName:"ul"},"Increment - unlike a number, a counter allows for increment operations (decrement is performed by incrementing by a negative increment) and these operations will converge")),(0,o.kt)("p",null,"Arrays"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Push - upserts a value on to the end of an array at the document's key"),(0,o.kt)("li",{parentName:"ul"},"Pop - removes a value at the end of an array at the document's key")),(0,o.kt)(l.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"},{label:"HTTP",value:"http"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const docID = await ditto.store.collection('people').upsert({\n  name: \"Frank\",\n  age: 31,\n  ownedCars: 0,\n  friends: []\n})\n\nawait ditto.store.collection('people').findByID(docID).update((mutableDoc) => {\n    mutableDoc['age'] = 32\n    mutableDoc['friends'].push('Susan')\n    \n    mutableDoc._replaceWithCounterAt('ownedCars')\n    mutableDoc._incrementCounterAt('ownedCars', 1)\n})\n"))),(0,o.kt)(i.Z,{value:"swift",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'let docId = ditto.store["people"].upsert([\n    "name": "Frank",\n    "age": 31,\n    "ownedCars": 0,\n    "friends": []\n])\n\nditto.store["people"].findByID(docId).update { mutableDoc in\n    mutableDoc?["age"] = 32\n    mutableDoc?["ownedCars"].replaceWithCounter()\n    mutableDoc?["ownedCars"].increment(amount: 1)\n    mutableDoc?["friends"].push("Susan")\n}\n'))),(0,o.kt)(i.Z,{value:"objc",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},'NSString *docId = [[ditto.store collection:@"people"] upsert:@{\n    @"name": @"Frank",\n    @"age": [NSNumber numberWithInt:31],\n    @"ownedCars": [NSNumber numberWithInt:0],\n    @"friends": @[]\n} error:nil];\n\n[[[ditto.store collection:@"people"] findByID:docId] update:^(DITMutableDocument *doc) {\n   [doc[@"age"] set:[NSNumber numberWithInt:32]];\n   [doc[@"ownedCars"] replaceWithCounter];\n   [doc[@"ownedCars"] increment:1];\n   [doc[@"friends"] push:@"Susan" error:nil];\n} error:nil];\n'))),(0,o.kt)(i.Z,{value:"kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val docId = ditto.store["people"].upsert(mapOf(\n    "name" to "Frank",\n    "age" to 31,\n    "ownedCars" to 0,\n    "friends" to emptyList<String>()\n))\n\nditto.store.collection("people").findByID(docId).update { mutableDoc ->\n    mutableDoc?.let {\n        it["age"].set(32)\n        it["ownedCars"].replaceWithCounter()\n        it["ownedCars"].increment(1)\n        it["friends"].push("Susan")\n        it["name"].replaceText(5, 0, " Smith")\n    }\n}\n'))),(0,o.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'Map<String, Object> content = new HashMap<>();\ncontent.put("name", "Frank");\ncontent.put("age", 31);\ncontent.put("ownedCars", 0);\ncontent.put("friends", Arrays.asList());\nDittoDocumentID docId = ditto.store.collection("people").upsert(content);\n\nditto.store.collection("people").findByID(docId).update(doc -> {\n    try {\n      doc.get("age").set(32);\n      doc.get("ownedCars").replaceWithCounter();\n      doc.get("ownedCars").increment(1);\n      doc.get("friends").push("Susan");\n    } catch (DittoError err) {\n        // Do something with error\n    }\n});\n'))),(0,o.kt)(i.Z,{value:"csharp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'var content = new Dictionary<string, object>\n{\n    { "name", "Bob" },\n    { "age", 40 },\n    { "ownedCars", 0 },\n    { "friends", new List<object>() }\n};\n\nvar docId = ditto.Store.Collection("people").Upsert(content);\nditto.Store.Collection("people").FindById(docId).Update((mutableDoc) => {\n    mutableDoc["age"].Set(32);\n    mutableDoc["ownedCars"].ReplaceWithCounter();\n    mutableDoc["ownedCars"].Increment(1);\n    mutableDoc["friends"].Push("Susan");\n});\n'))),(0,o.kt)(i.Z,{value:"cpp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'DocumentId doc_id = ditto.store.collection("people").upsert({\n  {"name", "Frank"},\n  {"age", 31},\n  {"ownedCars", 0},\n  {"friends": {}}\n});\n\nditto.store\n     .collection("people")\n     .find_by_id(doc_id)\n     .update([](MutableDocument &doc) {\n       doc["age"].set(32);\n       doc["ownedCars"].replace_with_counter();\n       doc["ownedCars"].increment(1);\n       doc["friends"].push("Susan");\n     });\n'))),(0,o.kt)(i.Z,{value:"rust",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'use serde::{Serialize, Deserialize};\n\n#[derive(Serialize,Deserialize)]\nstruct Person {\n  name: String,\n  age: u32,\n  friends: Vec<String>, \n};\n\nlet frank = Person {\n  name: "Frank".to_string(),\n  age: 31,\n  owned_cars: 0,\n  friends: Vec::with_capacity(0)\n};\n\nlet doc_id = ditto.store().collection("people")?.upsert(frank, None, false)?;\nditto.store().collection("people")?.update(|x|{\n  if let Some(doc) = x {\n      doc.set("age", 32).unwrap();\n      doc.replace_with_counter("owned_cars").unwrap();\n      doc.increment("owned_cars", 1).unwrap();\n      doc.push("friends", "Susan").unwrap();\n  }\n})?;\n'))),(0,o.kt)(i.Z,{value:"http",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \'https://<CLOUD_ENDPOINT>/api/v1/store\' \\\n  --header \'X-HYDRA-CLIENT-ID: AAAAAAAAAAAAAAAAAAAABQ==\' \\\n  --header \'Content-Type: application/json\' \\\n  --data-raw \'{\n    "method": "write",\n    "parameters": {\n      "commands": [{\n        "method": "upsert",\n        "collection": "people",\n        "value": {\n          "_id": "123abc",\n          "name": "Frank", \n          "age": 32,\n          "friends": ["Susan"],\n          "owned_cars": 0\n        }\n      }]\n    }\n  }\'\n')),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},(0,o.kt)("strong",{parentName:"p"},"Can I do a query inside of an upsert as part of the HTTP API?")),(0,o.kt)("p",{parentName:"div"},"Unfortunately no. The HTTP API will look to see if a document with that _id\nexists, if so it will merge the two and then insert. To implement ",(0,o.kt)("inlineCode",{parentName:"p"},"update"),"\nbehavior, you must issue two HTTP requests. First, send a ",(0,o.kt)("a",{parentName:"p",href:"/concepts/querying"},"find\nrequest"),", and then based on that, you can ",(0,o.kt)("inlineCode",{parentName:"p"},"upsert")," the\ndocument."))))))}f.isMDXComponent=!0},86010:function(e,n,t){function a(e){var n,t,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=a(e[n]))&&(r&&(r+=" "),r+=t);else for(n in e)e[n]&&(r&&(r+=" "),r+=n);return r}function r(){for(var e,n,t=0,r="";t<arguments.length;)(e=arguments[t++])&&(n=a(e))&&(r&&(r+=" "),r+=n);return r}t.d(n,{Z:function(){return r}})}}]);