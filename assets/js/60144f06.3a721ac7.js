"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4571],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=l,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(g,r(r({ref:t},p),{},{components:n})):a.createElement(g,r({ref:t},p))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,r=new Array(o);r[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:l,r[1]=i;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},79443:function(e,t,n){var a=(0,n(67294).createContext)(void 0);t.Z=a},80944:function(e,t,n){var a=n(67294),l=n(79443);t.Z=function(){var e=(0,a.useContext)(l.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e}},30547:function(e,t,n){var a=n(67294);t.Z=function(e){var t=e.children,n=e.hidden,l=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:l},t)}},49366:function(e,t,n){var a=n(67294),l=n(80944),o=n(86010);t.Z=function(e){var t,n=e.lazy,r=(e.block,e.defaultValue),i=e.values,s=e.groupId,c=(e.className,a.Children.toArray(e.children)),p=null!=i?i:c.map((function(e){return{value:e.props.value,label:e.props.label}})),u=null!=r?r:null==(t=c.find((function(e){return e.props.default})))?void 0:t.props.value,d=(0,l.Z)(),m=d.tabGroupChoices,g=d.setTabGroupChoices,v=(0,a.useState)(u),k=v[0],b=v[1];if(null!=s){var f=m[s];null!=f&&f!==k&&p.some((function(e){return e.value===f}))&&b(f)}var h=function(e){b(e),null!=s&&g(s,e)};return a.createElement("div",{className:"tabs-container"},a.createElement("div",{className:"sm:hidden"},a.createElement("label",{htmlFor:"tabs",className:"sr-only"},"Select a tab"),a.createElement("select",{id:"tabs",name:"tabs",value:k,onChange:function(e){return h(e.currentTarget.value)},className:"block w-full focus:ring-blue-500 focus:border-blue-500 border-gray-300 rounded-md"},p.map((function(e){var t=e.value,n=e.label;return a.createElement("option",{value:t,key:t},null!=n?n:t)})))),a.createElement("div",{className:"hidden sm:block"},a.createElement("nav",{className:"flex space-x-4","aria-label":"Tabs"},p.map((function(e){var t=e.value,n=e.label;return a.createElement("button",{key:t,onClick:function(){return h(t)},className:(0,o.Z)(k===t?"bg-blue-100 text-blue-700":"text-gray-500 hover:text-gray-700","px-3 py-2 font-medium text-sm rounded-md"),"aria-current":k===t?"page":void 0},null!=n?n:t)})))),n?(0,a.cloneElement)(c.filter((function(e){return e.props.value===k}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},c.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==k})}))))}},96615:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return p},metadata:function(){return u},toc:function(){return d},default:function(){return g}});var a=n(83117),l=n(80102),o=(n(67294),n(3905)),r=n(49366),i=n(30547),s=["components"],c={title:"Insert, Update and Remove",sidebar_position:2},p=void 0,u={unversionedId:"concepts/insert-update-remove",id:"concepts/insert-update-remove",isDocsHomePage:!1,title:"Insert, Update and Remove",description:"Inserting Documents",source:"@site/docs/concepts/insert-update-remove.mdx",sourceDirName:"concepts",slug:"/concepts/insert-update-remove",permalink:"/concepts/insert-update-remove",editUrl:"https://github.com/getditto/docs/edit/master/docs/concepts/insert-update-remove.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Insert, Update and Remove",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Data Model",permalink:"/concepts/data-model"},next:{title:"Querying",permalink:"/concepts/querying"}},d=[{value:"Inserting Documents",id:"inserting-documents",children:[{value:"Inserting with a specific <code>_id</code>",id:"inserting-with-a-specific-_id",children:[],level:3},{value:"Default Data",id:"default-data",children:[],level:3}],level:2},{value:"Updating Documents",id:"updating-documents",children:[],level:2},{value:"Upserting Documents",id:"upserting-documents",children:[{value:"Merge",id:"merge",children:[],level:3},{value:"Overwrite",id:"overwrite",children:[],level:3},{value:"Insert If Absent",id:"insert-if-absent",children:[],level:3},{value:"Insert Default If Absent",id:"insert-default-if-absent",children:[],level:3}],level:2},{value:"Removing Documents",id:"removing-documents",children:[{value:"Removing by <code>_id</code>",id:"removing-by-_id",children:[],level:3},{value:"Removing by query",id:"removing-by-query",children:[],level:3}],level:2},{value:"Evicting Data",id:"evicting-data",children:[],level:2}],m={toc:d};function g(e){var t=e.components,n=(0,l.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"inserting-documents"},"Inserting Documents"),(0,o.kt)("p",null,"Insert data into a collection with the insert function. It will return the ",(0,o.kt)("inlineCode",{parentName:"p"},"_id")," of the document that was inserted."),(0,o.kt)(r.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{lable:"Rust",value:"rust"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const docID = await ditto.store.collection('people').insert({\n    name: \"Susan\",\n    age: 31\n})\n"))),(0,o.kt)(i.Z,{value:"swift",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'// Insert JSON-compatible data into Ditto\nlet docId = ditto.store["people"].insert([\n    "name": "Susan",\n    "age": 31\n])\n'))),(0,o.kt)(i.Z,{value:"objc",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},'// Insert JSON-compatible data into Ditto\nDITDocumentID *docID = [[ditto.store collection:@"people"]\n     insert:@{ @"name": @"Susan", @"age": [NSNumber numberWithInt:31] }\n     isDefault:false\n     error:nil];\n'))),(0,o.kt)(i.Z,{value:"kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val docId = ditto.store["people"].insert(mapOf(\n    "name" to "Susan",\n    "age" to 31\n))\n'))),(0,o.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'Map<String, Object> content = new HashMap<>();\ncontent.put("name", "Susan");\ncontent.put("age", 31);\nDittoDocumentID docId = ditto.store.collection("people").insert(content);\n'))),(0,o.kt)(i.Z,{value:"csharp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'var content = new Dictionary<string, object>\n{\n    { "name", "Susan" },\n    { "age", 31 }\n};\nvar docId = ditto.Store.Collection("people").Insert(content);\n'))),(0,o.kt)(i.Z,{value:"cpp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'json content = json({\n    { "name", "Susan" },\n    { "age", 31 }\n});\nDocumentId doc_id = ditto.store.collection("people").insert(content);\n'))),(0,o.kt)(i.Z,{value:"rust",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'use serde_json::json;\nlet content = json!({\n  "name": "Susan",\n  "age": 31\n});\nlet doc_id = ditto.store().collection("people")?.insert(content, None, false)?;\n\n')))),(0,o.kt)("h3",{id:"inserting-with-a-specific-_id"},"Inserting with a specific ",(0,o.kt)("inlineCode",{parentName:"h3"},"_id")),(0,o.kt)("p",null,"There are times where you want to specify the ",(0,o.kt)("inlineCode",{parentName:"p"},"_id")," of the document before insertion. Note that the ",(0,o.kt)("inlineCode",{parentName:"p"},"_id")," is immutable. This means that you cannot change the ",(0,o.kt)("inlineCode",{parentName:"p"},"_id")," once you have inserted the document."),(0,o.kt)(r.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const docID = await ditto.store.collection(\'people\').insert({\n    _id, "123abc",\n    name: "Susan", \n    age: 31\n})\n'))),(0,o.kt)(i.Z,{value:"swift",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'// Insert JSON-compatible data into Ditto\nlet docId = ditto.store["people"].insert([\n    "_id": "123abc",\n    "name": "Susan",\n    "age": 31\n])\n'))),(0,o.kt)(i.Z,{value:"objc",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},'// Insert JSON-compatible data into Ditto\nDITDocumentID *docID = [[ditto.store collection:@"people"]\n     insert:@{ @"_id": "123abc", @"name": @"Susan", @"age": [NSNumber numberWithInt:31] }\n     isDefault:false\n     error:nil];\n'))),(0,o.kt)(i.Z,{value:"kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val docId = ditto.store["people"].insert(mapOf(\n    "_id" to "123abc",\n    "name" to "Susan",\n    "age" to 31\n), DittoDocumentID("123abc"))\n\n'))),(0,o.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'Map<String, Object> content = new HashMap<>();\ncontent.put("_id", "123abc");\ncontent.put("name", "Susan");\ncontent.put("age", 31);\nDittoDocumentID docId = ditto.store.collection("people").insert(content);\n'))),(0,o.kt)(i.Z,{value:"csharp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'var content = new Dictionary<string, object>\n{\n    { "_id_", "123abc" },\n    { "name", "Susan" },\n    { "age", 31 }\n};\nditto.Store.Collection("people").Insert(content);\n'))),(0,o.kt)(i.Z,{value:"cpp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'ditto.store.collection("people").insert({{"_id", "123abc"}, { "name", "Susan" }, { "age", 31 }});\n'))),(0,o.kt)(i.Z,{value:"rust",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'ditto.store().collection("people")?.insert(json!({"_id": DocumentId::new("123abc")?, "name": "Susan", "age": 31}), None, false)?;\n')))),(0,o.kt)("h3",{id:"default-data"},"Default Data"),(0,o.kt)("p",null,'Default Data can be thought of as "placeholder" data.  Default Data is useful when your app needs to load "starter" data from an external data source, like from a backend API, on multiple devices without creating odd "overwriting" behavior.'),(0,o.kt)("p",null,"Ditto's approach to conflict resolution orders changes by time. In most situations, this leads to predictable behavior. However, if your application is inserting the same initial data into multiple devices, such as common data from a central backend API, this could result in overwriting later changes:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Device A inserts a document ",(0,o.kt)("inlineCode",{parentName:"li"},'{"firstName": "Adam"}')," at time = 0 after downloading from a central API."),(0,o.kt)("li",{parentName:"ol"},"Device A updates the document to ",(0,o.kt)("inlineCode",{parentName:"li"},'{"firstName": "Max"}')," at time = 1."),(0,o.kt)("li",{parentName:"ol"},"Device B synchronizes with Device A receiving the document ",(0,o.kt)("inlineCode",{parentName:"li"},'{"firstName": "Max"}')," at time = 2."),(0,o.kt)("li",{parentName:"ol"},"Device B downloads the same document from the backend API ",(0,o.kt)("inlineCode",{parentName:"li"},'{"firstName": "Adam"}')," and inserts at t = 3, which overwrites the previous change synced at time = 1.")),(0,o.kt)("p",null,"In the above example, both Device A and B want to preserve the change by Device A that occurred after downloading the common data. To do so, Ditto offers an additional parameter: isDefault."),(0,o.kt)(r.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const docID = await ditto.store.collection('people').insert({\n    _id: new DocumentID(123),\n    name: \"Susan\",\n    age: 31\n}, { isDefault: true })\n"))),(0,o.kt)(i.Z,{value:"swift",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'let docId = ditto.store.collection("people").insert([\n    "name": "Susan",\n    "age": 31\n], isDefault: true)\n'))),(0,o.kt)(i.Z,{value:"objc",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},'DITDocumentID *docID = [[ditto.store collection:@"people"]\n     insert:@{ @"name": @"Susan", @"age": [NSNumber numberWithInt:31] }\n     isDefault:true\n     error:nil];\n'))),(0,o.kt)(i.Z,{value:"kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val docId = ditto.store.collection("people").insert(mapOf(\n    "name" to "Susan",\n    "age" to 31\n), isDefault: true)\n'))),(0,o.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'Map<String, Object> content = new HashMap<>();\ncontent.put("name", "Susan");\ncontent.put("age", 31);\nDittoDocumentID docId = ditto.store\n                             .collection("people")\n                             .insert(content, new DittoDocumentID("doc-id"), true);\n'))),(0,o.kt)(i.Z,{value:"csharp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'DittoDocumentID docID = ditto.Store\n                        .Collection("people")\n                        .Insert(\n                            {{"name", "Susan"}, {"age", 31}},\n                            new DittoDocumentID("doc-id"),\n                            true\n                        );\n'))),(0,o.kt)(i.Z,{value:"cpp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'json content = json({{ "name", "Susan" }, { "age", 31 }}):\nDocumentId doc_id = ditto.store.collection("people")\n                               .insert(content, DocumentId("doc-id"), true);\n'))),(0,o.kt)(i.Z,{value:"rust",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'ditto.store().collection("people")?.insert(json!({"_id": DocumentId::new("123abc")?, "name": "Susan", "age": 31}), None, true)?;\n')))),(0,o.kt)("h2",{id:"updating-documents"},"Updating Documents"),(0,o.kt)("p",null,"Updating documents are categorized into 3 types of operations:"),(0,o.kt)("p",null,"Standard"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Set - sets value for a given key in the document"),(0,o.kt)("li",{parentName:"ul"},"Remove - removes a value for a given key in the document")),(0,o.kt)("p",null,"Counters"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Replace with counter - will convert a number value for a given key into a counter"),(0,o.kt)("li",{parentName:"ul"},"Increment - unlike a number, a counter allows for increment operations (decrement is performed by incrementing by a negative increment) and these operations will converge")),(0,o.kt)("p",null,"Arrays"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Push - inserts a value on to the end of an array at the document's key"),(0,o.kt)("li",{parentName:"ul"},"Pop - removes a value at the end of an array at the document's key")),(0,o.kt)(r.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const docID = await ditto.store.collection('people').insert({\n  name: \"Frank\",\n  age: 31,\n  ownedCars: 0,\n  friends: []\n})\n\nawait ditto.store.collection('people').findByID(docID).update((mutableDoc) => {\n    mutableDoc['age'] = 32\n    mutableDoc['friends'].push('Susan')\n    \n    mutableDoc._replaceWithCounterAt('ownedCars')\n    mutableDoc._incrementCounterAt('ownedCars', 1)\n})\n"))),(0,o.kt)(i.Z,{value:"swift",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'let docId = ditto.store["people"].insert([\n    "name": "Frank",\n    "age": 31,\n    "ownedCars": 0,\n    "friends": []\n])\n\nditto.store["people"].findByID(docId).update { mutableDoc in\n    mutableDoc?["age"] = 32\n    mutableDoc?["ownedCars"].replaceWithCounter()\n    mutableDoc?["ownedCars"].increment(amount: 1)\n    mutableDoc?["friends"].push("Susan")\n}\n'))),(0,o.kt)(i.Z,{value:"objc",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},'NSString *docId = [[ditto.store collection:@"people"] insert:@{\n    @"name": @"Frank",\n    @"age": [NSNumber numberWithInt:31],\n    @"ownedCars": [NSNumber numberWithInt:0],\n    @"friends": @[]\n} error:nil];\n\n[[[ditto.store collection:@"people"] findByID:docId] update:^(DITMutableDocument *doc) {\n   [doc[@"age"] set:[NSNumber numberWithInt:32]];\n   [doc[@"ownedCars"] replaceWithCounter];\n   [doc[@"ownedCars"] increment:1];\n   [doc[@"friends"] push:@"Susan" error:nil];\n} error:nil];\n'))),(0,o.kt)(i.Z,{value:"kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val docId = ditto.store["people"].insert(mapOf(\n    "name" to "Frank",\n    "age" to 31,\n    "ownedCars" to 0,\n    "friends" to emptyList<String>()\n))\n\nditto.store.collection("people").findByID(docId).update { mutableDoc ->\n    mutableDoc?.let {\n        it["age"].set(32)\n        it["ownedCars"].replaceWithCounter()\n        it["ownedCars"].increment(1)\n        it["friends"].push("Susan")\n        it["name"].replaceText(5, 0, " Smith")\n    }\n}\n'))),(0,o.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'Map<String, Object> content = new HashMap<>();\ncontent.put("name", "Frank");\ncontent.put("age", 31);\ncontent.put("ownedCars", 0);\ncontent.put("friends", Arrays.asList());\nDittoDocumentID docId = ditto.store.collection("people").insert(content);\n\nditto.store.collection("people").findByID(docId).update(doc -> {\n    try {\n      doc.get("age").set(32);\n      doc.get("ownedCars").replaceWithCounter();\n      doc.get("ownedCars").increment(1);\n      doc.get("friends").push("Susan");\n    } catch (DittoError err) {\n        // Do something with error\n    }\n});\n'))),(0,o.kt)(i.Z,{value:"csharp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'var content = new Dictionary<string, object>\n{\n    { "name", "Bob" },\n    { "age", 40 },\n    { "ownedCars", 0 },\n    { "friends", new List<object>() }\n};\n\nvar docId = ditto.Store.Collection("people").Insert(content);\nditto.Store.Collection("people").FindById(docId).Update((mutableDoc) => {\n    mutableDoc["age"].Set(32);\n    mutableDoc["ownedCars"].ReplaceWithCounter();\n    mutableDoc["ownedCars"].Increment(1);\n    mutableDoc["friends"].Push("Susan");\n});\n'))),(0,o.kt)(i.Z,{value:"cpp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'DocumentId doc_id = ditto.store.collection("people").insert({\n  {"name", "Frank"},\n  {"age", 31},\n  {"ownedCars", 0},\n  {"friends": {}}\n});\n\nditto.store\n     .collection("people")\n     .find_by_id(doc_id)\n     .update([](MutableDocument &doc) {\n       doc["age"].set(32);\n       doc["ownedCars"].replace_with_counter();\n       doc["ownedCars"].increment(1);\n       doc["friends"].push("Susan");\n     });\n'))),(0,o.kt)(i.Z,{value:"rust",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'use serde::{Serialize, Deserialize};\n\n#[derive(Serialize,Deserialize)]\nstruct Person {\n  name: String,\n  age: u32,\n  friends: Vec<String>, \n};\n\nlet frank = Person {\n  name: "Frank".to_string(),\n  age: 31,\n  owned_cars: 0,\n  friends: Vec::with_capacity(0)\n};\n\nlet doc_id = ditto.store().collection("people")?.insert(frank, None, false)?;\nditto.store().collection("people")?.update(|x|{\n  if let Some(doc) = x {\n      doc.set("age", 32).unwrap();\n      doc.replace_with_counter("owned_cars").unwrap();\n      doc.increment("owned_cars", 1).unwrap();\n      doc.push("friends", "Susan").unwrap();\n  }\n})?;\n')))),(0,o.kt)("h2",{id:"upserting-documents"},"Upserting Documents"),(0,o.kt)("p",null,"Because Ditto is an eventually consistent system, you will definitely run into situations where you need to ",(0,o.kt)("strong",{parentName:"p"},"upsert")," documents. ",(0,o.kt)("strong",{parentName:"p"},"Upserting")," describes a behavior where you would want to insert a document into a collection if the document ",(0,o.kt)("inlineCode",{parentName:"p"},"_id")," does not not exist. However if the ",(0,o.kt)("inlineCode",{parentName:"p"},"_id")," does exist in your local store, Ditto will ",(0,o.kt)("inlineCode",{parentName:"p"},".update")," the document in place. "),(0,o.kt)("p",null,"To upsert a document, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"collection.insertWithStrategy")," function. You will need to provide the payload of the document that you'd like upsert as well as a ",(0,o.kt)("inlineCode",{parentName:"p"},"DittoWriteStrategy"),". We offer __4 strategies for upserting documents.  "),(0,o.kt)("p",null,"As an example, let's say we have a document in the ",(0,o.kt)("inlineCode",{parentName:"p"},"people")," collection that looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  "_id": "123abc",\n  "name": "Sam",\n  "age": 45,\n  "isOnline": false\n}\n')),(0,o.kt)("h3",{id:"merge"},"Merge"),(0,o.kt)("p",null,"An upsert with a merge strategy will set the properties on the document that match the existing document if it exists. Any properties that do not match are left alone."),(0,o.kt)(r.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'await ditto.store.collection(\'people\').insertWithStrategy({\n  "_id": "123abc",\n  "name": "Joe",\n  "isOnline": true\n}, { writeStrategy: \'merge\' })\n'))),(0,o.kt)(i.Z,{value:"swift",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'try ditto.store["people"].insertWithStrategy([\n  "_id": "123abc",\n  "name": "Joe",\n  "isOnline": true\n], writeStrategy: .merge)\n'))),(0,o.kt)(i.Z,{value:"objc",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},'DITCollection *collection = [ditto.store collection:@"people"];\n[collection insert:@{\n    @"_id": @"123abc",\n    @"name": @"Joe",\n    @"isOnline": YES\n  }\n  withID:customID\n  writeStrategy:DITWriteStrategyMerge\n  error:nil];\n'))),(0,o.kt)(i.Z,{value:"kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'ditto.store["people"].insertWithStrategy([\n  "_id" to "123abc",\n  "name" to "Joe",\n  "isOnline" to true\n], DittoWriteStrategy.Merge)\n'))),(0,o.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"Map<String, Object> map = new HashMap();\nmap.put('_id', \"123abc\")\nmap.put('name', \"Joe\")\nmap.put('isOnline', true)\nditto.store.collection(\"people\").insertWithStrategy(content, null, DittoWriteStrategy.Merge)\n"))),(0,o.kt)(i.Z,{value:"csharp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'ditto.Store.Collection("people").InsertWithStrategy(\n  new Dictionary<string, object> { \n      { "_id", "123abc" }, \n      {"name", "Joe"}, \n      {"isOnline", true} \n    }, \n    DittoWriteStrategy.Merge)\n'))),(0,o.kt)(i.Z,{value:"cpp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'ditto.store.collection("people").insert_with_strategy(\n      {\n        {"_id", "123abc"},\n        {"name", "Joe"},\n        {"isOnline", true}\n      }, custom_id, WriteStrategy::merge);\n'))),(0,o.kt)(i.Z,{value:"rust",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'ditto.store().collection("people")?.insert_with_strategy(\n        json!({\n          "_id": "123abc",\n          "name": "Joe",\n          "isOnline": true\n        }),\n        None,\n        WriteStrategy::InsertIfAbsent,\n    )\n')))),(0,o.kt)("p",null,"Now the document will look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsonc"},'// before\n{\n  "_id": "123abc",\n  "name": "Sam",\n  "age": 45,\n  "isOnline": false\n}\n\n// after\n{\n  "_id": "123abc",\n  "name": "Joe", // updated \n  "age": 45, // left alone, because the payload did not include this key\n  "isOnline": true  // update\n}\n')),(0,o.kt)("h3",{id:"overwrite"},"Overwrite"),(0,o.kt)("p",null,"An overwrite strategy will remove the document if it exists and recreate with it's exact payload. You can think of it as calling ",(0,o.kt)("inlineCode",{parentName:"p"},".remove")," and ",(0,o.kt)("inlineCode",{parentName:"p"},".insert")," in one transaction."),(0,o.kt)(r.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'await ditto.store.collection(\'people\').insertWithStrategy({\n  "_id": "123abc",\n  "name": "Joe",\n  "isOnline": true\n}, { writeStrategy: \'overwrite\' })\n'))),(0,o.kt)(i.Z,{value:"swift",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'try ditto.store["people"].insertWithStrategy([\n  "_id": "123abc",\n  "name": "Joe",\n  "isOnline": true\n], writeStrategy: .overwrite)\n'))),(0,o.kt)(i.Z,{value:"objc",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},'DITCollection *collection = [ditto.store collection:@"people"];\n[collection insert:@{\n    @"_id": @"123abc",\n    @"name": @"Joe",\n    @"isOnline": YES\n  }\n  withID:customID\n  writeStrategy:DITWriteStrategyOverwrite\n  error:nil];\n'))),(0,o.kt)(i.Z,{value:"kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'ditto.store["people"].insertWithStrategy([\n  "_id" to "123abc",\n  "name" to "Joe",\n  "isOnline" to true\n], DittoWriteStrategy.Overwrite)\n'))),(0,o.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"Map<String, Object> map = new HashMap();\nmap.put('_id', \"123abc\")\nmap.put('name', \"Joe\")\nmap.put('isOnline', true)\nditto.store.collection(\"people\").insertWithStrategy(content, null, DittoWriteStrategy.Overwrite)\n"))),(0,o.kt)(i.Z,{value:"csharp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'ditto.Store.Collection("people").InsertWithStrategy(\n  new Dictionary<string, object> { \n      { "_id", "123abc" }, \n      {"name", "Joe"}, \n      {"isOnline", true} \n    }, \n    DittoWriteStrategy.Overwrite)\n'))),(0,o.kt)(i.Z,{value:"cpp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'ditto.store.collection("people").insert_with_strategy(\n      {\n        {"_id", "123abc"},\n        {"name", "Joe"},\n        {"isOnline", true}\n      }, custom_id, WriteStrategy::overwrite);\n'))),(0,o.kt)(i.Z,{value:"rust",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'ditto.store().collection("people")?.insert_with_strategy(\n            json!({\n              "_id": "123abc",\n              "name": "Joe",\n              "isOnline": true\n            }),\n            None,\n            WriteStrategy::Merge,\n        )\n')))),(0,o.kt)("p",null,"The final document will look like the following below. Since the ",(0,o.kt)("inlineCode",{parentName:"p"},"_id")," matched, the document was removed and reinserted."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'// before\n{\n  "_id": "123abc",\n  "name": "Sam",\n  "age": 45,\n  "isOnline": false\n}\n\n// after\n{\n  "_id": "123abc",\n  "name": "Joe",\n  "isOnline": true\n}\n')),(0,o.kt)("h3",{id:"insert-if-absent"},"Insert If Absent"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},".insertIfAbsent")," strategy is quite straight forward. If the ",(0,o.kt)("inlineCode",{parentName:"p"},"_id")," of the payload matched, then the document will not be inserted. If the document with the same ",(0,o.kt)("inlineCode",{parentName:"p"},"_id")," does not exist, then the payload will be inserted. "),(0,o.kt)(r.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'await ditto.store.collection(\'people\').insertWithStrategy({\n  "_id": "123abc",\n  "name": "Joe",\n  "isOnline": true\n}, { writeStrategy: \'insertIfAbsent\' })\n'))),(0,o.kt)(i.Z,{value:"swift",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'try ditto.store["people"].insertWithStrategy([\n  "_id": "123abc",\n  "name": "Joe",\n  "isOnline": true\n], writeStrategy: .insertIfAbsent)\n'))),(0,o.kt)(i.Z,{value:"objc",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},'DITCollection *collection = [ditto.store collection:@"people"];\n[collection insert:@{\n    @"_id": @"123abc",\n    @"name": @"Joe",\n    @"isOnline": YES\n  }\n  withID:customID\n  writeStrategy:DITWriteStrategyInsertIfAbsent\n  error:nil];\n'))),(0,o.kt)(i.Z,{value:"kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'ditto.store["people"].insertWithStrategy([\n  "_id" to "123abc",\n  "name" to "Joe",\n  "isOnline" to true\n], DittoWriteStrategy.InsertIfAbsent)\n'))),(0,o.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"Map<String, Object> map = new HashMap();\nmap.put('_id', \"123abc\")\nmap.put('name', \"Joe\")\nmap.put('isOnline', true)\nditto.store.collection(\"people\").insertWithStrategy(content, null, DittoWriteStrategy.InsertIfAbsent)\n"))),(0,o.kt)(i.Z,{value:"csharp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'ditto.Store.Collection("people").InsertWithStrategy(\n  new Dictionary<string, object> { \n      { "_id", "123abc" }, \n      {"name", "Joe"}, \n      {"isOnline", true} \n    }, \n    DittoWriteStrategy.InsertIfAbsent)\n'))),(0,o.kt)(i.Z,{value:"cpp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'ditto.store.collection("people").insert_with_strategy(\n      {\n        {"_id", "123abc"},\n        {"name", "Joe"},\n        {"isOnline", true}\n      }, custom_id, WriteStrategy::insertIfAbsent);\n'))),(0,o.kt)(i.Z,{value:"rust",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'ditto.store().collection("people")?.insert_with_strategy(\n          json!({\n            "_id": "123abc",\n            "name": "Joe",\n            "isOnline": true\n          }),\n          None,\n          WriteStrategy::InsertIfAbsent,\n      )\n')))),(0,o.kt)("p",null,"Thus using our example, the document is left unchanged. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'// before\n{\n  "_id": "123abc",\n  "name": "Sam",\n  "age": 45,\n  "isOnline": false\n}\n\n// after\n{\n  "_id": "123abc",\n  "name": "Sam",\n  "age": 45,\n  "isOnline": false\n}\n')),(0,o.kt)("h3",{id:"insert-default-if-absent"},"Insert Default If Absent"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"insertDefaultIfAbsent")," is a strategy that is best for ",(0,o.kt)("em",{parentName:"p"},"placeholder")," data. If a document does not exist, the payload will be inserted that will not overwrite other peer's changes when they sync. "),(0,o.kt)(r.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'await ditto.store.collection(\'people\').insertWithStrategy({\n  "_id": "123abc",\n  "name": "Joe",\n  "isOnline": true\n}, { writeStrategy: \'insertDefaultIfAbsent\' })\n'))),(0,o.kt)(i.Z,{value:"swift",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'try ditto.store["people"].insertWithStrategy([\n  "_id": "123abc",\n  "name": "Joe",\n  "isOnline": true\n], writeStrategy: .insertDefaultIfAbsent)\n'))),(0,o.kt)(i.Z,{value:"objc",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},'DITCollection *collection = [ditto.store collection:@"people"];\n[collection insert:@{\n    @"_id": @"123abc",\n    @"name": @"Joe",\n    @"isOnline": YES\n  }\n  withID:customID\n  writeStrategy:DITWriteStrategyInsertDefaultIfAbsent\n  error:nil];\n'))),(0,o.kt)(i.Z,{value:"kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'ditto.store["people"].insertWithStrategy([\n  "_id" to "123abc",\n  "name" to "Joe",\n  "isOnline" to true\n], DittoWriteStrategy.InsertDefaultIfAbsent)\n'))),(0,o.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"Map<String, Object> map = new HashMap();\nmap.put('_id', \"123abc\")\nmap.put('name', \"Joe\")\nmap.put('isOnline', true)\nditto.store.collection(\"people\").insertWithStrategy(content, null, DittoWriteStrategy.InsertDefaultIfAbsent)\n"))),(0,o.kt)(i.Z,{value:"csharp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'ditto.Store.Collection("people").InsertWithStrategy(\n  new Dictionary<string, object> { \n      { "_id", "123abc" }, \n      {"name", "Joe"}, \n      {"isOnline", true} \n    }, \n    DittoWriteStrategy.InsertDefaultIfAbsent)\n'))),(0,o.kt)(i.Z,{value:"cpp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'ditto.store.collection("people").insert_with_strategy(\n      {\n        {"_id", "123abc"},\n        {"name", "Joe"},\n        {"isOnline", true}\n      }, custom_id, WriteStrategy::insertDefaultIfAbsent);\n'))),(0,o.kt)(i.Z,{value:"rust",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'ditto.store().collection("people")?.insert_with_strategy(\n          json!({\n            "_id": "123abc",\n            "name": "Joe",\n            "isOnline": true\n          }),\n          None,\n          WriteStrategy::InsertDefaultIfAbsent,\n      )\n')))),(0,o.kt)("p",null,"Thus using our example, the document is left unchanged. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'// before\n{\n  "_id": "123abc",\n  "name": "Sam",\n  "age": 45,\n  "isOnline": false\n}\n\n// after\n{\n  "_id": "123abc",\n  "name": "Sam",\n  "age": 45,\n  "isOnline": false\n}\n')),(0,o.kt)("h2",{id:"removing-documents"},"Removing Documents"),(0,o.kt)("p",null,"Removes will delete or remove one or more documents from the collection. Calling remove ",(0,o.kt)("strong",{parentName:"p"},"will sync removals to the local device and to other devices as well"),". "),(0,o.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"danger")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Removing documents will remove documents from the local device ",(0,o.kt)("em",{parentName:"p"},"and other peers"),". Your application code should consider ",(0,o.kt)("inlineCode",{parentName:"p"},"remove"),"  calls to be destructive. In other words, if you call remove on document, your application should consider this document ",(0,o.kt)("em",{parentName:"p"},"gone")," throughout your system."),(0,o.kt)("p",{parentName:"div"},(0,o.kt)("strong",{parentName:"p"},"Alternatively:"),' consider using a "soft-delete" pattern in your application for most use cases. For example, use a field like ',(0,o.kt)("inlineCode",{parentName:"p"},"isArchived: true"),' and query for documents to represent a "soft-delete". '),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "_id": "123abc",\n  "name": "Foo",\n  "isArchived": true // add this field\n}\n')),(0,o.kt)("p",{parentName:"div"},"And query non-archived documents like so:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let liveQuery = ditto\n  .store.collection('cars')\n  .find('isArchived == $args.isArchived', { isArchived: false }).observe((documents) => {\n    console.log('these are the unarchived documents', documents)\n  })\n")),(0,o.kt)("p",{parentName:"div"},"You can easily un-archive these documents by calling update on that field like so:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-js"},"ditto.store.collection('cars').update((mutableDoc) => {\n  mutableDoc[\"isArchived\"] = false\n})\n")))),(0,o.kt)("h3",{id:"removing-by-_id"},"Removing by ",(0,o.kt)("inlineCode",{parentName:"h3"},"_id")),(0,o.kt)(r.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"await ditto.store.collection('people').findByID(docID).remove()\n"))),(0,o.kt)(i.Z,{value:"swift",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'ditto.store["people"].findByID(docId).remove()\n'))),(0,o.kt)(i.Z,{value:"objc",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},'DITCollection *collection = [ditto.store collection:@"people"];\n[[collection findByID:@"123"] remove];\n'))),(0,o.kt)(i.Z,{value:"kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'ditto.store["people"].findByID(docId).remove()\n'))),(0,o.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'ditto.store.collection("people").findByID(docId).remove();\n'))),(0,o.kt)(i.Z,{value:"csharp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'ditto.Store.Collection("people").FindByID(docId).Remove();\n'))),(0,o.kt)(i.Z,{value:"cpp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'ditto.store.collection("people").find_by_id(docId).remove();\n'))),(0,o.kt)(i.Z,{value:"rust",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'ditto.store().collection("people")?.find_by_id(doc_id).remove()?;\n')))),(0,o.kt)("h3",{id:"removing-by-query"},"Removing by query"),(0,o.kt)("p",null,'You can also remove several documents with a query string. This example will remove all documents in the "people" collection who has an age property lower than or equal to 32 (',(0,o.kt)("inlineCode",{parentName:"p"},'"age <= 32"'),")"),(0,o.kt)(r.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"await ditto.store.collection('people').find('age <= 32').remove()\n"))),(0,o.kt)(i.Z,{value:"swift",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'ditto.store["people"].find("age <= 32").remove()\n'))),(0,o.kt)(i.Z,{value:"objc",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},'DITCollection *collection = [ditto.store collection:@"people"];\n[[collection find:@"age <= 32"] remove];\n'))),(0,o.kt)(i.Z,{value:"kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'ditto.store["people"].find("age <= 32").remove()\n'))),(0,o.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'ditto.store.collection("people").find("age <= 32").remove();\n'))),(0,o.kt)(i.Z,{value:"csharp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'ditto.Store.Collection("people").Find("age <= 32").Remove();\n'))),(0,o.kt)(i.Z,{value:"cpp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'ditto.store.collection("people").find("age <= 32").remove();\n'))),(0,o.kt)(i.Z,{value:"rust",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'ditto.store().collection("people")?.find("age <= 32").remove()?;\n')))),(0,o.kt)("h2",{id:"evicting-data"},"Evicting Data"),(0,o.kt)("p",null,"There are times where you want to remove data ",(0,o.kt)("em",{parentName:"p"},"without")," syncing the delete operation. This operation is different than remove in that it only removes one of more documents from the local storage and ",(0,o.kt)("strong",{parentName:"p"},"does not sync the change to other devices.")),(0,o.kt)("p",null,"For example, you might use this operation when a device has completed an activity that involved synchronizing data with other devices and has transmitted the data to a backend. At this point, the device can evict the data locally to free up storage, but it does not want to remove the data from any other device."),(0,o.kt)("p",null,"The API is extremely similar to the ",(0,o.kt)("inlineCode",{parentName:"p"},"remove()")," API, however it uses ",(0,o.kt)("inlineCode",{parentName:"p"},"evict()")," instead."),(0,o.kt)(r.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"await ditto.store.collection('people').find('age <= 32').evict()\n"))),(0,o.kt)(i.Z,{value:"swift",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'ditto.store["people"].find("age <= 32").evict()\n'))),(0,o.kt)(i.Z,{value:"objc",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},'DITCollection *collection = [ditto.store collection:@"people"];\n[[collection find:@"age <= 32"] evict];\n'))),(0,o.kt)(i.Z,{value:"kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'ditto.store["people"].find("age <= 32").evict()\n'))),(0,o.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'ditto.store.collection("people").find("age <= 32").evict();\n'))),(0,o.kt)(i.Z,{value:"csharp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'ditto.Store.Collection("people").Find("age <= 32").evict();\n'))),(0,o.kt)(i.Z,{value:"cpp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'ditto.store.collection("people").find("age <= 32").evict();\n'))),(0,o.kt)(i.Z,{value:"rust",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'ditto.store().collection("people")?.find("age <= 32").evict()?;\n')))))}g.isMDXComponent=!0},86010:function(e,t,n){function a(e){var t,n,l="";if("string"==typeof e||"number"==typeof e)l+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(l&&(l+=" "),l+=n);else for(t in e)e[t]&&(l&&(l+=" "),l+=t);return l}function l(){for(var e,t,n=0,l="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(l&&(l+=" "),l+=t);return l}n.d(t,{Z:function(){return l}})}}]);