"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1302],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),f=r,k=p["".concat(s,".").concat(f)]||p[f]||d[f]||o;return n?i.createElement(k,a(a({ref:t},u),{},{components:n})):i.createElement(k,a({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},76597:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var i=n(87462),r=n(63366),o=(n(67294),n(3905)),a=["components"],l={title:"4 - Editing Tasks"},s=void 0,c={unversionedId:"tutorial/uikit/edit-tasks",id:"tutorial/uikit/edit-tasks",isDocsHomePage:!1,title:"4 - Editing Tasks",description:"4-1 Select Task To Complete",source:"@site/docs/ios/tutorial/uikit/4-edit-tasks.md",sourceDirName:"tutorial/uikit",slug:"/tutorial/uikit/edit-tasks",permalink:"/ios/tutorial/uikit/edit-tasks",editUrl:"https://github.com/getditto/docs/tree/master/docs/ios/tutorial/uikit/4-edit-tasks.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"4 - Editing Tasks"},sidebar:"docs",previous:{title:"3 - Showing the List of Tasks",permalink:"/ios/tutorial/uikit/tasks-list-screen"},next:{title:"Overview",permalink:"/ios/common/concepts/overview"}},u=[{value:"4-1 Select Task To Complete",id:"4-1-select-task-to-complete",children:[],level:2},{value:"4-2 Swipe To Delete Task",id:"4-2-swipe-to-delete-task",children:[],level:2},{value:"4-3 Build and Run!",id:"4-3-build-and-run",children:[],level:2}],d={toc:u};function p(e){var t=e.components,l=(0,r.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"4-1-select-task-to-complete"},"4-1 Select Task To Complete"),(0,o.kt)("p",null,"When the user selects the task in the table view, we want to mark the task completed. Adjust your ",(0,o.kt)("inlineCode",{parentName:"p"},"TasksTableViewController")," to include the following code (these functions were already created when the file was generated by Xcode):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},' override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n    // Deselect the row so it is not highlighted\n    tableView.deselectRow(at: indexPath, animated: true)\n    // Retrieve the task at the row selected\n    let task = tasks[indexPath.row]\n    // Update the task to mark completed\n    collection.findByID(task.id).update({ (newTask) in\n        newTask?["isCompleted"].set(!task["isCompleted"].boolValue)\n    })\n}\n\noverride func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {\n    // Return false if you do not want the specified item to be editable.\n    return true\n}\n')),(0,o.kt)("p",null,"This action makes use of Ditto's ",(0,o.kt)("inlineCode",{parentName:"p"},"update()")," API where we are able to find the existing task and set the ",(0,o.kt)("inlineCode",{parentName:"p"},"isCompleted")," value to the opposite of its current value."),(0,o.kt)("h2",{id:"4-2-swipe-to-delete-task"},"4-2 Swipe To Delete Task"),(0,o.kt)("p",null,"Finally, we want to allow the user to delete a task by swiping the row in the table view. Adjust your ",(0,o.kt)("inlineCode",{parentName:"p"},"TasksTableViewController")," to include the following code (this function was already created when the file was generated by Xcode):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"// Override to support editing the table view.\noverride func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {\n    if editingStyle == .delete {\n        // Retrieve the task at the row swiped\n        let task = tasks[indexPath.row]\n        // Delete the task from Ditto\n        collection.findByID(task.id).remove()\n    }\n}\n")),(0,o.kt)("p",null,"This action makes use of Ditto's ",(0,o.kt)("inlineCode",{parentName:"p"},"remove()")," API which will delete it."),(0,o.kt)("h2",{id:"4-3-build-and-run"},"4-3 Build and Run!"),(0,o.kt)("p",null,"\ud83c\udf89 You now have a fully functioning ToDo app. Build and run it on the simulator or devices and observe the automatic data sync provided by Ditto:"),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(62608).Z})))}p.isMDXComponent=!0},62608:function(e,t,n){t.Z=n.p+"assets/images/ios-sync-fd18edfe757e4e6090f03dc59a1b664e.gif"}}]);