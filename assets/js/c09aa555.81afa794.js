"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3389],{3905:function(n,t,e){e.d(t,{Zo:function(){return p},kt:function(){return d}});var o=e(67294);function r(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function a(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,o)}return e}function i(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?a(Object(e),!0).forEach((function(t){r(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):a(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function c(n,t){if(null==n)return{};var e,o,r=function(n,t){if(null==n)return{};var e,o,r={},a=Object.keys(n);for(o=0;o<a.length;o++)e=a[o],t.indexOf(e)>=0||(r[e]=n[e]);return r}(n,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(o=0;o<a.length;o++)e=a[o],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(r[e]=n[e])}return r}var l=o.createContext({}),s=function(n){var t=o.useContext(l),e=t;return n&&(e="function"==typeof n?n(t):i(i({},t),n)),e},p=function(n){var t=s(n.components);return o.createElement(l.Provider,{value:t},n.children)},u={inlineCode:"code",wrapper:function(n){var t=n.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(n,t){var e=n.components,r=n.mdxType,a=n.originalType,l=n.parentName,p=c(n,["components","mdxType","originalType","parentName"]),f=s(e),d=r,g=f["".concat(l,".").concat(d)]||f[d]||u[d]||a;return e?o.createElement(g,i(i({ref:t},p),{},{components:e})):o.createElement(g,i({ref:t},p))}));function d(n,t){var e=arguments,r=t&&t.mdxType;if("string"==typeof n||r){var a=e.length,i=new Array(a);i[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=n,c.mdxType="string"==typeof n?n:r,i[1]=c;for(var s=2;s<a;s++)i[s]=e[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,e)}f.displayName="MDXCreateElement"},79443:function(n,t,e){var o=(0,e(67294).createContext)(void 0);t.Z=o},80944:function(n,t,e){var o=e(67294),r=e(79443);t.Z=function(){var n=(0,o.useContext)(r.Z);if(null==n)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return n}},30547:function(n,t,e){var o=e(67294);t.Z=function(n){var t=n.children,e=n.hidden,r=n.className;return o.createElement("div",{role:"tabpanel",hidden:e,className:r},t)}},49366:function(n,t,e){var o=e(67294),r=e(80944),a=e(86010);t.Z=function(n){var t,e=n.lazy,i=(n.block,n.defaultValue),c=n.values,l=n.groupId,s=(n.className,o.Children.toArray(n.children)),p=null!=c?c:s.map((function(n){return{value:n.props.value,label:n.props.label}})),u=null!=i?i:null==(t=s.find((function(n){return n.props.default})))?void 0:t.props.value,f=(0,r.Z)(),d=f.tabGroupChoices,g=f.setTabGroupChoices,m=(0,o.useState)(u),v=m[0],C=m[1];if(null!=l){var b=d[l];null!=b&&b!==v&&p.some((function(n){return n.value===b}))&&C(b)}var y=function(n){C(n),null!=l&&g(l,n)};return o.createElement("div",{className:"tabs-container"},o.createElement("div",{className:"sm:hidden"},o.createElement("label",{htmlFor:"tabs",className:"sr-only"},"Select a tab"),o.createElement("select",{id:"tabs",name:"tabs",value:v,onChange:function(n){return y(n.currentTarget.value)},className:"block w-full focus:ring-blue-500 focus:border-blue-500 border-gray-300 rounded-md"},p.map((function(n){var t=n.value,e=n.label;return o.createElement("option",{value:t,key:t},null!=e?e:t)})))),o.createElement("div",{className:"hidden sm:block"},o.createElement("nav",{className:"flex space-x-4","aria-label":"Tabs"},p.map((function(n){var t=n.value,e=n.label;return o.createElement("button",{key:t,onClick:function(){return y(t)},className:(0,a.Z)(v===t?"bg-blue-100 text-blue-700":"text-gray-500 hover:text-gray-700","px-3 py-2 font-medium text-sm rounded-md"),"aria-current":v===t?"page":void 0},null!=e?e:t)})))),e?(0,o.cloneElement)(s.filter((function(n){return n.props.value===v}))[0],{className:"margin-vert--md"}):o.createElement("div",{className:"margin-vert--md"},s.map((function(n,t){return(0,o.cloneElement)(n,{key:t,hidden:n.props.value!==v})}))))}},26493:function(n,t,e){e.r(t),e.d(t,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return u},toc:function(){return f},default:function(){return g}});var o=e(87462),r=e(63366),a=(e(67294),e(3905)),i=e(49366),c=e(30547),l=["components"],s={title:"Manual Network Transport Configuration"},p=void 0,u={unversionedId:"advanced/manual-network-transport-configuration",id:"advanced/manual-network-transport-configuration",isDocsHomePage:!1,title:"Manual Network Transport Configuration",description:"There are instances where you may want to configure additional connections configurations for the current Ditto instance. This section will teach you how to configure your Ditto instance to listen for connections on a port explicitly and to connect to remote instances via a host (IP) and port.",source:"@site/docs/advanced/manual-network-transport-configuration.md",sourceDirName:"advanced",slug:"/advanced/manual-network-transport-configuration",permalink:"/advanced/manual-network-transport-configuration",editUrl:"https://github.com/getditto/docs/edit/master/docs/advanced/manual-network-transport-configuration.md",tags:[],version:"current",frontMatter:{title:"Manual Network Transport Configuration"},sidebar:"tutorialSidebar",previous:{title:"Loading the JavaScript ditto.wasm File",permalink:"/advanced/loading-the-javascript-wasm-file"},next:{title:"Monitoring Transport Conditions",permalink:"/advanced/monitoring-network-transports"}},f=[{value:"Explicitly connecting another remote Ditto instance",id:"explicitly-connecting-another-remote-ditto-instance",children:[],level:3},{value:"Listening for Connections on a Specific Port",id:"listening-for-connections-on-a-specific-port",children:[],level:3},{value:"Explicitly enabling Peer to Peer Connections",id:"explicitly-enabling-peer-to-peer-connections",children:[],level:2},{value:"Combining Multiple Transports",id:"combining-multiple-transports",children:[],level:2}],d={toc:f};function g(n){var t=n.components,e=(0,r.Z)(n,l);return(0,a.kt)("wrapper",(0,o.Z)({},d,e,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"There are instances where you may want to configure additional connections configurations for the current Ditto instance. This section will teach you how to configure your Ditto instance to listen for connections on a port explicitly and to connect to remote instances via a host (IP) and port."),(0,a.kt)("p",null," In this tutorial, we  ",(0,a.kt)("em",{parentName:"p"},"Before")," you call ",(0,a.kt)("inlineCode",{parentName:"p"},"tryStartSync()"),", construct a ",(0,a.kt)("inlineCode",{parentName:"p"},"DittoTransportConfig")," value and set ",(0,a.kt)("inlineCode",{parentName:"p"},"ditto.SetTransportConfig"),"."),(0,a.kt)("h3",{id:"explicitly-connecting-another-remote-ditto-instance"},"Explicitly connecting another remote Ditto instance"),(0,a.kt)("p",null,"If you know the host and port of another remote Ditto instance and would like to connect to it, construct a ",(0,a.kt)("inlineCode",{parentName:"p"},"DittoTransportConfig")," object and add the host and port to the ",(0,a.kt)("inlineCode",{parentName:"p"},"DittoTransportConfig.Connect.TcpServers")," property as a ",(0,a.kt)("inlineCode",{parentName:"p"},"string"),". The string format should be ",(0,a.kt)("inlineCode",{parentName:"p"},"host:port"),", separated by a colon."),(0,a.kt)("p",null,"In the example below, we know of two other Ditto instances located on:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Host IP ",(0,a.kt)("inlineCode",{parentName:"li"},"135.1.5.5")," at port ",(0,a.kt)("inlineCode",{parentName:"li"},"12345")),(0,a.kt)("li",{parentName:"ul"},"Host IP ",(0,a.kt)("inlineCode",{parentName:"li"},"185.1.5.5")," at port ",(0,a.kt)("inlineCode",{parentName:"li"},"4567"))),(0,a.kt)(i.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,a.kt)(c.Z,{value:"javascript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import { TransportConfig } from \'@dittolive/ditto\'\n\nconst config = new TransportConfig()\nconfig.connect.tcpServers.push("135.1.5.5:12345")\nconfig.connect.tcpServers.push("185.1.5.5:12345")\nditto.setTransportConfig(config);\nditto.tryStartSync();\n')),(0,a.kt)("p",null,"When running on a web browser, you'll need to specify ",(0,a.kt)("em",{parentName:"p"},"WebSocket")," endpoints. Web browsers are not capable of raw TCP connections. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import { TransportConfig } from \'@dittolive/ditto\'\n\nconst config = new TransportConfig()\nconfig.connect.websocketURLs.push("wss://135.1.5.5:12345")\nconfig.connect.websocketURLs.push("wss://185.1.5.5:12345")\nditto.setTransportConfig(config);\nditto.tryStartSync();\n'))),(0,a.kt)(c.Z,{value:"swift",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'var config = DittoTransportConfig()\n// Connect explicitly to a remote devices\nconfig.connect.tcpServers.add("135.1.5.5:12345")\nconfig.connect.tcpServers.add("185.1.5.5:12345")\n\nditto.setTransportConfig(config: config)\n\ndo {\n  try ditto.tryStartSync()\n} catch (let err) {\n  print(err.localizedDescription)\n}\n'))),(0,a.kt)(c.Z,{value:"objc",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-objc"},'DITMutableTransportConfig *transportConfig = [[DITMutableTransportConfig alloc] init];\n[transportConfig.connect.tcpServers addObject:@"135.1.5.5:12345"];\n[transportConfig.connect.tcpServers addObject:@"185.1.5.5:12345"];\n[ditto setTransportConfig:transportConfig];\nNSError *err = nil;\n[ditto tryStartSync:&err];\n'))),(0,a.kt)(c.Z,{value:"kotlin",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'val transportConfig = DittoTransportConfig();\n\ntransportConfig.connect.tcpServers.add("135.1.5.5:12345");\ntransportConfig.connect.tcpServers.add("185.1.5.5:12345");\n\nditto.tryStartSync()\n'))),(0,a.kt)(c.Z,{value:"java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'DittoTransportConfig config = new DittoTransportConfig();\nDittoConnect connect = new DittoConnect();\nconnect.setTcpServers(Sets.newHashSet("135.1.5.5:12345", "185.1.5.5:12345"));\nconfig.setConnect(connect);\n\ntry {\n    ditto.tryStartSync();    \n} catch(DittoError error) {\n    Log.d("DittoError", error.getLocalizedMessage());\n}\n'))),(0,a.kt)(c.Z,{value:"csharp",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'DittoTransportConfig transportConfig = new DittoTransportConfig();\n// Connect explicitly to a remote device on \ntransportConfig.Connect.TcpServers.Add("135.1.5.5:12345");\n// you can add as many TcpServers as you would like.\ntransportConfig.Connect.TcpServers.Add("185.1.5.5:4567");\n// set the transport config \nditto.SetTransportConfig(transportConfig);\n// now you can start ditto\'s sync \nditto.TryStartSync();\n'))),(0,a.kt)(c.Z,{value:"cpp",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'auto config = ditto::TransportConfig();\n// Connect explicitly to remote devices\nconfig.connect.tcp_servers.insert("135.1.5.5:12345");\nconfig.connect.tcp_servers.insert("185.1.5.5:12345");\n\n// set the transport config \nditto->set_transport_config(config);\n// now you can start ditto\'s sync \nditto->try_start_sync()\n'))),(0,a.kt)(c.Z,{value:"rust",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'let mut config = TransportConfig::new(); // empty\n\nconfig.connect.tcp_servers.insert("135.1.5.5:12345"); // Custom TCP Listener\nconfig.connect.tcp_servers.insert("185.1.5.5:12345"); // Custom TCP Listener\nconfig.connect.websocket_urls.insert("wss://example.com"); // Custom WS endpoint\n\nditto.set_transport_config(config);\nditto.try_start_sync()?;\n')))),(0,a.kt)("p",null,"Feel free to add as many known remote ",(0,a.kt)("inlineCode",{parentName:"p"},"host:port")," strings."),(0,a.kt)("h3",{id:"listening-for-connections-on-a-specific-port"},"Listening for Connections on a Specific Port"),(0,a.kt)("p",null,"You can enable the Ditto instance to listen for incoming connections from other remotes Ditto instances on a specific port. "),(0,a.kt)("p",null,"In this example, we would like our Ditto instance to listen to ",(0,a.kt)("em",{parentName:"p"},"incoming")," connections on port ",(0,a.kt)("inlineCode",{parentName:"p"},"4000")," on ",(0,a.kt)("inlineCode",{parentName:"p"},"localhost"),". "),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"To be safe, please do not use ",(0,a.kt)("inlineCode",{parentName:"p"},"localhost")," when setting the IP interface. Use ",(0,a.kt)("inlineCode",{parentName:"p"},'"0.0.0.0"')," instead."))),(0,a.kt)(i.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,a.kt)(c.Z,{value:"javascript",mdxType:"TabItem"},(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Listening on a port is only available on Node or Electron environments. This functionality will not work when running inside of a web browser. Web browsers do not allow code to listen to a host's IP or port.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const config = new TransportConfig()\nconfig.listen.tcp.isEnabled = true\nconfig.listen.tcp.interfaceIP = "0.0.0.0"\nconfig.listen.tcp.port = 4000\nditto.setTransportConfig(config);\nditto.tryStartSync();\n'))),(0,a.kt)(c.Z,{value:"swift",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'var config = DittoTransportConfig()\n\n// Listen for incoming connections on port 4000\nconfig.listen.tcp.isEnabled = true\nconfig.listen.tcp.interfaceIp = "0.0.0.0"\nconfig.listen.tcp.port = 4000\n\nditto.setTransportConfig(config: config)\n\ndo {\n  try ditto.tryStartSync()\n} catch (let err) {\n  print(err.localizedDescription)\n}\n'))),(0,a.kt)(c.Z,{value:"objc",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-objc"},'DITMutableTransportConfig *transportConfig = [[DITMutableTransportConfig alloc] init];\n[transportConfig.listen.tcp setEnabled:true];\n[transportConfig.listen.tcp setInterfaceIp:@"0.0.0.0"];\n[transportConfig.listen.tcp setPort:4000];\n[ditto setTransportConfig:transportConfig];\nNSError *err = nil;\n[ditto tryStartSync:&err];\n'))),(0,a.kt)(c.Z,{value:"kotlin",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'val transportConfig = DittoTransportConfig();\ntransportConfig.connect.tcpServers.add("135.1.5.5:12345");\ntransportConfig.connect.tcpServers.add("185.1.5.5:12345");\nditto.tryStartSync()\n'))),(0,a.kt)(c.Z,{value:"java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'DittoTransportConfig config = new DittoTransportConfig();\nconfig.enableAllPeerToPeer();\n\nDittoListen listen = new DittoListen();\nDittoTcpListenConfig tcpListenConfig = new DittoTcpListenConfig();\ntcpListenConfig.setEnabled(true);\ntcpListenConfig.setInterfaceIp("0.0.0.0");\ntcpListenConfig.setPort(4000);\nlisten.setTcp(tcpListenConfig);\nconfig.setListen(listen);\n\ntry {\n    ditto.tryStartSync();    \n} catch(DittoError error) {\n    Log.d("DittoError", error.getLocalizedMessage());\n}\n'))),(0,a.kt)(c.Z,{value:"csharp",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'DittoTransportConfig transportConfig = new DittoTransportConfig();\ntransportConfig.Listen.Tcp = new DittoTcpListenConfig();\n// By default Listen.Tcp.Enabled is false, be sure to set it to true.\ntransportConfig.Listen.Tcp.Enabled = true;\n// if you want to listen on localhost, most likely you will use 0.0.0.0\n// do not use "localhost" as a string\ntransportConfig.Listen.Tcp.InterfaceIp = "0.0.0.0"; \n// specify your port.\ntransportConfig.Listen.Tcp.Port = 4000; \nditto.SetTransportConfig(transportConfig);\n\n// now you can call `ditto.TryStartSync()` \nditto.TryStartSync();\n'))),(0,a.kt)(c.Z,{value:"cpp",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'auto config = ditto::TransportConfig();\n\nconf.listen.tcp.enabled = true;\nconf.listen.http.enabled = false;\nconf.listen.tcp.interface_ip = "0.0.0.0";\nconf.listen.tcp.port = 4000;\n\nditto->set_transport_config(conf);\nditto->try_start_sync()\n'))),(0,a.kt)(c.Z,{value:"rust",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'let mut config = TransportConfig::new(); // empty\n\nconfig.listen.tcp.enabled = true;\nconfig.listen.tcp.interface_ip = "0.0.0.0";\nconfig.listen.tcp.port = 4000;\nconfig.listen.http.enabled = false;\n\nditto.set_transport_config(config);\nditto.try_start_sync()?;\n')))),(0,a.kt)("p",null,"Incoming connections from other Ditto instances will be able to connect only if the port is accessible. Depending on your deployment ",(0,a.kt)("em",{parentName:"p"},"be sure to check that external connections can reach the port")," that you have specified in your configuration. You may need to set up port forwarding if external ports map differently to your host."),(0,a.kt)("h2",{id:"explicitly-enabling-peer-to-peer-connections"},"Explicitly enabling Peer to Peer Connections"),(0,a.kt)("p",null,"If you do not attempt to configure a ",(0,a.kt)("inlineCode",{parentName:"p"},"DittoTransportConfig")," but call ",(0,a.kt)("inlineCode",{parentName:"p"},"ditto.TryStartSync()"),", your Ditto instance will automatically attempt to connect to other ditto instances on the Local Area Network. However, if you supply a ",(0,a.kt)("inlineCode",{parentName:"p"},"DittoTransportConfig"),", this will not automatically be enabled. You'll need to remember to enable local area network peer to peer connnections with ",(0,a.kt)("inlineCode",{parentName:"p"},"EnableAllPeerToPeer()"),"."),(0,a.kt)("h2",{id:"combining-multiple-transports"},"Combining Multiple Transports"),(0,a.kt)("p",null,"You can specify several modes of transport configuration within ",(0,a.kt)("inlineCode",{parentName:"p"},"DittoTransportConfig"),". The following snippet shows you a ditto instance that can:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Connect to local area network devices"),(0,a.kt)("li",{parentName:"ol"},"Listen for incoming remote connections"),(0,a.kt)("li",{parentName:"ol"},"Connect to remote devices with a known host and port. ")),(0,a.kt)(i.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,a.kt)(c.Z,{value:"javascript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import { TransportConfig } from "@dittolive/ditto"\n\nconst config = new TransportConfig()\n// 1. Enable All Peer to Peer Connections\nconfig.setAllPeerToPeerEnabled(true);\n\n// 2. Listen for incoming connections on port 4000\nconfig.listen.tcp.isEnabled = true\nconfig.listen.tcp.interfaceIp = "0.0.0.0"\nconfig.listen.tcp.port = 4000\n\n// 3. Connect explicitly to remote devices\nditto.setTransportConfig(config);\nditto.tryStartSync();\n'))),(0,a.kt)(c.Z,{value:"swift",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},'var config = DittoTransportConfig()\n// 1. Enable All Peer to Peer Connections\nconfig.enableAllPeerToPeer()\n\n// 2. Listen for incoming connections on port 4000\nconfig.listen.tcp.isEnabled = true\nconfig.listen.tcp.interfaceIp = "0.0.0.0"\nconfig.listen.tcp.port = 4000\n\n// 3. Connect explicitly to remote devices\nconfig.connect.tcpServers.add("135.1.5.5:12345")\nconfig.connect.tcpServers.add("185.1.5.5:12345")\n\nditto.setTransportConfig(config: config)\n\ndo {\n  try ditto.tryStartSync()\n} catch (let err) {\n  print(err.localizedDescription)\n}\n'))),(0,a.kt)(c.Z,{value:"objc",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-objc"},'DITMutableTransportConfig *transportConfig = [[DITMutableTransportConfig alloc] init];\n// 1. Enable Local Area Network Connections\n[transportConfig enableAllPeerToPeer];\n// 2. Listen for incoming connections on port 4000\n[transportConfig.listen.tcp setEnabled:true];\n[transportConfig.listen.tcp setInterfaceIp:@"0.0.0.0"];\n[transportConfig.listen.tcp setPort:4000];\n// 3. Connect explicitly to remote devices\n[transportConfig.connect.tcpServers addObject:@"135.1.5.5:12345"];\n[transportConfig.connect.tcpServers addObject:@"185.1.5.5:12345"];\n\n[ditto setTransportConfig:transportConfig];\nNSError *err = nil;\n[ditto tryStartSync:&err];\n'))),(0,a.kt)(c.Z,{value:"kotlin",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'val transportConfig = DittoTransportConfig();\n// 1. Enable All Peer to Peer Connections\ntransportConfig.enableAllPeerToPeer();\n// 2. Listen for incoming connections on port 4000\ntransportConfig.listen.tcp.enabled = true;\ntransportConfig.listen.http.enabled = false;\ntransportConfig.listen.tcp.interfaceIp = "0.0.0.0";\ntransportConfig.listen.tcp.port = 4000;\n// 3. Connect explicitly to remote devices\ntransportConfig.connect.tcpServers.add("135.1.5.5:12345");\ntransportConfig.connect.tcpServers.add("185.1.5.5:12345");\n\nditto.tryStartSync()\n'))),(0,a.kt)(c.Z,{value:"java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'DittoTransportConfig config = new DittoTransportConfig();\n\n// 1. Enable Peer to Peer Connections\nconfig.enableAllPeerToPeer();\n\n// 2. Listen for incoming connections on port 4000\nDittoListen listen = new DittoListen();\nDittoTcpListenConfig tcpListenConfig = new DittoTcpListenConfig();\ntcpListenConfig.setEnabled(true);\ntcpListenConfig.setInterfaceIp("0.0.0.0");\ntcpListenConfig.setPort(4000);\nlisten.setTcp(tcpListenConfig);\nconfig.setListen(listen);\n// 3. Connect explicitly to remote devices\nDittoConnect connect = new DittoConnect();\nconnect.setTcpServers(Sets.newHashSet("135.1.5.5:12345", "185.1.5.5:12345"));\nconfig.setConnect(connect);\n\ntry {\n    ditto.tryStartSync();    \n} catch(DittoError error) {\n    Log.d("DittoError", error.getLocalizedMessage());\n}\n'))),(0,a.kt)(c.Z,{value:"csharp",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'DittoTransportConfig transportConfig = new DittoTransportConfig();\n\n// 1. Enable Local Area Network Connections\ntransportConfig.EnableAllPeerToPeer();\n\n// 2. Listen for incoming connections on port 4000\ntransportConfig.Listen.Tcp.Enabled = true;\ntransportConfig.Listen.Tcp.InterfaceIp = "0.0.0.0";\ntransportConfig.Listen.Tcp.Port = 4000;\n\n// 3. Connect explicitly to remote devices\ntransportConfig.Connect.TcpServers.Add("135.1.5.5:12345");\ntransportConfig.Connect.TcpServers.Add("185.1.5.5:12345");\n\nditto.SetTransportConfig(transportConfig);\n\nditto.TryStartSync();\n'))),(0,a.kt)(c.Z,{value:"cpp",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'auto config = ditto::TransportConfig();\n// 1. Enable All Peer to Peer Connections\nconfig.enable_all_peer_to_peer();\n\n// 2. Listen for incoming connections on port 4000\nconfig.listen.tcp.enabled = true;\nconfig.listen.http.enabled = false;\nconfig.listen.tcp.interface_ip = "0.0.0.0";\nconfig.listen.tcp.port = 4000;\n\n// 3. Connect explicitly to remote devices\nconfig.connect.tcp_servers.insert("135.1.5.5:12345");\nconfig.connect.tcp_servers.insert("185.1.5.5:12345");\n\nditto->set_transport_config(config);\nditto->try_start_sync()\n'))),(0,a.kt)(c.Z,{value:"rust",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'let mut config = TransportConfig::new(); // empty\n\n// 1. Enable auto-discovery of peer to peer connections\nconfig.enable_all_peer_to_peer(); // Auto-connect via lan and bluetooth\n\n// 2. Configure TCP Listener\nconfig.listen.tcp.enabled = true;\nconfig.listen.tcp.interface_ip = "0.0.0.0";\nconfig.listen.tcp.port = 4000;\nconfig.listen.http.enabled = false;\n\n// 3. Configure explicit, hard coded connections\nconfig.connect.tcp_servers.insert("135.1.5.5:12345"); // Custom TCP Listener\nconfig.connect.websocket_urls.insert("wss://example.com"); // Custom WS endpoint\n\nditto.set_transport_config(config);\nditto.try_start_sync()?;\n')))))}g.isMDXComponent=!0},86010:function(n,t,e){function o(n){var t,e,r="";if("string"==typeof n||"number"==typeof n)r+=n;else if("object"==typeof n)if(Array.isArray(n))for(t=0;t<n.length;t++)n[t]&&(e=o(n[t]))&&(r&&(r+=" "),r+=e);else for(t in n)n[t]&&(r&&(r+=" "),r+=t);return r}function r(){for(var n,t,e=0,r="";e<arguments.length;)(n=arguments[e++])&&(t=o(n))&&(r&&(r+=" "),r+=t);return r}e.d(t,{Z:function(){return r}})}}]);