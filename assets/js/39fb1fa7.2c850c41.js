"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1796],{3905:function(t,e,n){n.d(e,{Zo:function(){return s},kt:function(){return h}});var i=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,i,r=function(t,e){if(null==t)return{};var n,i,r={},o=Object.keys(t);for(i=0;i<o.length;i++)n=o[i],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(i=0;i<o.length;i++)n=o[i],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var u=i.createContext({}),l=function(t){var e=i.useContext(u),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},s=function(t){var e=l(t.components);return i.createElement(u.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return i.createElement(i.Fragment,{},e)}},p=i.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,u=t.parentName,s=c(t,["components","mdxType","originalType","parentName"]),p=l(n),h=r,m=p["".concat(u,".").concat(h)]||p[h]||d[h]||o;return n?i.createElement(m,a(a({ref:e},s),{},{components:n})):i.createElement(m,a({ref:e},s))}));function h(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,a=new Array(o);a[0]=p;var c={};for(var u in e)hasOwnProperty.call(e,u)&&(c[u]=e[u]);c.originalType=t,c.mdxType="string"==typeof t?t:r,a[1]=c;for(var l=2;l<o;l++)a[l]=n[l];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},79443:function(t,e,n){var i=(0,n(67294).createContext)(void 0);e.Z=i},80944:function(t,e,n){var i=n(67294),r=n(79443);e.Z=function(){var t=(0,i.useContext)(r.Z);if(null==t)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return t}},30547:function(t,e,n){var i=n(67294);e.Z=function(t){var e=t.children,n=t.hidden,r=t.className;return i.createElement("div",{role:"tabpanel",hidden:n,className:r},e)}},49366:function(t,e,n){var i=n(67294),r=n(80944),o=n(86010);e.Z=function(t){var e,n=t.lazy,a=(t.block,t.defaultValue),c=t.values,u=t.groupId,l=(t.className,i.Children.toArray(t.children)),s=null!=c?c:l.map((function(t){return{value:t.props.value,label:t.props.label}})),d=null!=a?a:null==(e=l.find((function(t){return t.props.default})))?void 0:e.props.value,p=(0,r.Z)(),h=p.tabGroupChoices,m=p.setTabGroupChoices,g=(0,i.useState)(d),y=g[0],_=g[1];if(null!=u){var f=h[u];null!=f&&f!==y&&s.some((function(t){return t.value===f}))&&_(f)}var v=function(t){_(t),null!=u&&m(u,t)};return i.createElement("div",{className:"tabs-container"},i.createElement("div",{className:"sm:hidden"},i.createElement("label",{htmlFor:"tabs",className:"sr-only"},"Select a tab"),i.createElement("select",{id:"tabs",name:"tabs",value:y,onChange:function(t){return v(t.currentTarget.value)},className:"block w-full focus:ring-blue-500 focus:border-blue-500 border-gray-300 rounded-md"},s.map((function(t){var e=t.value,n=t.label;return i.createElement("option",{value:e,key:e},null!=n?n:e)})))),i.createElement("div",{className:"hidden sm:block"},i.createElement("nav",{className:"flex space-x-4","aria-label":"Tabs"},s.map((function(t){var e=t.value,n=t.label;return i.createElement("button",{key:e,onClick:function(){return v(e)},className:(0,o.Z)(y===e?"bg-blue-100 text-blue-700":"text-gray-500 hover:text-gray-700","px-3 py-2 font-medium text-sm rounded-md"),"aria-current":y===e?"page":void 0},null!=n?n:e)})))),n?(0,i.cloneElement)(l.filter((function(t){return t.props.value===y}))[0],{className:"margin-vert--md"}):i.createElement("div",{className:"margin-vert--md"},l.map((function(t,e){return(0,i.cloneElement)(t,{key:e,hidden:t.props.value!==y})}))))}},84544:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return p},default:function(){return m}});var i=n(83117),r=n(80102),o=(n(67294),n(3905)),a=n(49366),c=n(30547),u=["components"],l={title:"Setup Client Side"},s=void 0,d={unversionedId:"concepts/security/online-with-authentication/setup-client-side",id:"concepts/security/online-with-authentication/setup-client-side",isDocsHomePage:!1,title:"Setup Client Side",description:"Configure your Client App",source:"@site/docs/concepts/security/online-with-authentication/setup-client-side.mdx",sourceDirName:"concepts/security/online-with-authentication",slug:"/concepts/security/online-with-authentication/setup-client-side",permalink:"/concepts/security/online-with-authentication/setup-client-side",editUrl:"https://github.com/getditto/docs/edit/master/docs/concepts/security/online-with-authentication/setup-client-side.mdx",tags:[],version:"current",frontMatter:{title:"Setup Client Side"},sidebar:"tutorialSidebar",previous:{title:"Setting up your Authentication Webhook",permalink:"/concepts/security/online-with-authentication/setup-authentication-webhook"},next:{title:"Ditto Cloud HTTP Interface",permalink:"/concepts/http"}},p=[{value:"Configure your Client App",id:"configure-your-client-app",children:[],level:2}],h={toc:p};function m(t){var e=t.components,n=(0,r.Z)(t,u);return(0,o.kt)("wrapper",(0,i.Z)({},h,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"configure-your-client-app"},"Configure your Client App"),(0,o.kt)(a.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,o.kt)(c.Z,{value:"javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { init, Ditto } from \"@dittolive/ditto\"\n(async () => {\n  await init() // you need to call this at least once before using any of the Ditto API\n\n  const authHandler = {\n    authenticationRequired: function(authenticator) {\n      authenticator.loginWithToken(ThirdPartyAuth.getToken(), \"third_party\", (err) => {\n        console.log(`Login request completed. Error? ${err}`)\n      })\n    },\n    authenticationExpiringSoon: function(authenticator, secondsRemaining) {\n      console.log(`Auth token expiring in ${secondsRemaining} seconds`)\n    }\n  }\n\n  const identity = {\n    type: 'onlineWithAuthentication',\n    appID: 'REPLACE_ME_WITH_YOUR_APP_ID',\n    authHandler\n  }\n\n  const ditto = new Ditto(identity, '/persistence/file/path')\n  ditto.setLicenseToken(\"REPLACE_ME_WITH_YOUR_LICENSE_TOKEN\")\n  ditto.tryStartSync()\n})()\n"))),(0,o.kt)(c.Z,{value:"swift",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'struct AuthDelegate: DittoAuthenticationDelegate {\n    func authenticationRequired(authenticator: DittoAuthenticator) {\n        authenticator.loginWithToken(ThirdPartyAuth.getToken(), provider: "third_party") { err in\n            print("Login request completed. Error? \\(err)")\n        }\n    }\n\n    func authenticationExpiringSoon(authenticator: DittoAuthenticator, secondsRemaining: Int64) {\n        print("Auth token expiring in \\(secondsRemaining)")\n    }\n}\n\nlet identity = DittoIdentity.onlineWithAuthentication(\n    appID: "REPLACE_ME_WITH_YOUR_APP_ID",\n    authenticationDelegate: AuthDelegate()\n)\n\nlet ditto = Ditto(identity: identity)\ntry! ditto.setLicenseToken("REPLACE_ME_WITH_YOUR_LICENSE_TOKEN")\ntry! ditto.tryStartSync()\n'))),(0,o.kt)(c.Z,{value:"objc",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},'@interface AuthDelegate : NSObject <DITAuthenticationDelegate>\n@end\n\n@implementation AuthDelegate\n- (void)authenticationRequired:(nonnull DITAuthenticator *)authenticator {\n    [authenticator loginWithToken:[ThirdPartyAuth getToken] provider:@"third_party" completion:^(NSError * _Nullable err) {\n        NSLog(@"Login request completed. Error? %@", err);\n    }];\n}\n\n- (void)authenticationExpiringSoon:(nonnull DITAuthenticator *)authenticator\n                  secondsRemaining:(int64_t)secondsRemaining {\n    NSLog(@"Auth token expiring in %lld seconds", secondsRemaining);\n}\n@end\n\nDITIdentity *identity = [[DITIdentity alloc] initOnlineWithAuthenticationWithAppID:@"REPLACE_ME_WITH_YOUR_APP_ID"\n                                                            authenticationDelegate:[[AuthDelegate alloc] init];\nDITDitto *ditto = [[DITDitto alloc] initWithIdentity:identity];\nNSError *error = nil;\n[ditto setLicenseToken: @"REPLACE_ME_WITH_YOUR_LICENSE_TOKEN" error:&error];\n[ditto tryStartSync:&error];\n'))),(0,o.kt)(c.Z,{value:"kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'class AuthCallback: DittoAuthenticationCallback {\n    override fun authenticationRequired(authenticator: DittoAuthenticator) {\n        authenticator.loginWithToken(ThirdPartyAuth.getToken(), "third_party") { err ->\n            println("Login request completed. Error? $err")\n        }\n    }\n\n    override fun authenticationExpiringSoon(\n        authenticator: DittoAuthenticator,\n        secondsRemaining: Long\n    ) {\n        println("Auth token expiring in $secondsRemaining seconds")\n    }\n}\n\nval androidDependencies = AndroidDittoDependencies(context)\nval identity = DittoIdentity.OnlineWithAuthentication(\n    androidDependencies,\n    "REPLACE_ME_WITH_YOUR_APP_ID",\n    AuthCallback()\n)\nval ditto = Ditto(androidDependencies, identity)\ntry {\n  ditto.setLicenseToken("REPLACE_ME_WITH_YOUR_LICENSE_TOKEN")\n  ditto.tryStartSync()\n} catch(e: DittoError) {\n  Log.e("Ditto error", e.message!!)\n}\n'))),(0,o.kt)(c.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'class AuthCallback implements DittoAuthenticationCallback {\n    @Override\n    public void authenticationRequired(@NonNull DittoAuthenticator authenticator) {\n        authenticator.loginWithToken(ThirdPartyAuth.getToken(), "third_party", err -> {\n            System.out.println("Login request completed. Error? " + err.toString());\n        });\n    }\n\n    @Override\n    public void authenticationExpiringSoon(@NonNull DittoAuthenticator authenticator, long secondsRemaining) {\n        System.out.println("Auth token expiring in " + secondsRemaining + " seconds");\n    }\n}\n\nDittoDependencies androidDependencies = new DefaultAndroidDittoDependencies(this.context);\nDittoIdentity identity = new DittoIdentity.OnlineWithAuthentication(\n    customDirDependencies,\n    "REPLACE_ME_WITH_YOUR_APP_ID",\n    new AuthCallback()\n);\nDitto ditto = new Ditto(androidDependencies);\n\ntry {\n  ditto.setLicenseToken("REPLACE_ME_WITH_YOUR_LICENSE_TOKEN");\n  ditto.tryStartSync();\n} catch(DittoError e) {\n  Log.e("Ditto Error", e.getMessage())\n}\n'))),(0,o.kt)(c.Z,{value:"csharp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'class AuthDelegate : IDittoAuthenticationDelegate\n{\n    public async void AuthenticationRequired(DittoAuthenticator authenticator)\n    {\n        var res = await authenticator.LoginWithToken(ThirdPartyAuth.GetToken(), "third_party");\n        System.Console.WriteLine($"Login request completed. Error? {res}");\n    }\n\n    public async void AuthenticationExpiringSoon(DittoAuthenticator authenticator, long secondsRemaining)\n    {\n        System.Console.WriteLine($"Auth token expiring in {secondsRemaining} seconds");\n    }\n}\n\nvar identity = DittoIdentity.OnlineWithAuthentication(\n    "REPLACE_ME_WITH_YOUR_APP_ID",\n    new AuthDelegate());\n\ntry\n{\n    var ditto = new Ditto(identity);\n    ditto.SetLicenseToken("REPLACE_ME_WITH_YOUR_LICENSE_TOKEN");\n    ditto.TryStartSync();\n}\ncatch (DittoException ex)\n{\n    System.Console.WriteLine($"Ditto Error {ex.Message}");\n}\n'))),(0,o.kt)(c.Z,{value:"cpp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'class AuthCallback: public AuthenticationCallback {\npublic:\n  void authentication_required(std::shared_ptr<Authenticator> authenticator) {\n    authenticator->login_with_token("123", "third_party", [](std::unique_ptr<DittoError> err) {\n      std::cout << "Login request completed. Error?" << err->what() << std::endl;\n    });\n  }\n\n  void authentication_expiring_soon(std::shared_ptr<Authenticator> authenticator,\n                                    std::int64_t seconds_remaining) {\n    std::cout << "Auth token expiring in " << seconds_remaining << " seconds" << std::endl;\n  }\n};\n\nIdentity identity = Identity::OnlineWithAuthentication(\n  "REPLACE_ME_WITH_YOUR_APP_ID",\n  std::make_shared<AuthCallback>()\n);\ntry {\n  Ditto ditto = Ditto(identity, "/your-persistence-path");\n  ditto.set_license_token("REPLACE_ME_WITH_YOUR_LICENSE_TOKEN");\n  ditto.try_start_sync();\n} catch (const DittoError &err) {\n  std::cout << err.what() << std::endl;\n}\n'))),(0,o.kt)(c.Z,{value:"rust",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'use dittolive_ditto::prelude::*;\nuse std::sync::Arc;\nuse std::time::Duration;\n\nstruct AuthHandler {\n    token: String,\n    provider: String,\n}\n\nimpl DittoAuthenticationEventHandler for AuthHandler {\n    fn authentication_required(&self, auth: dittolive_ditto::auth::DittoAuthenticator) {\n        auth.login_with_token(&self.token, &self.provider) {\n            ::log::info!("Login request completed. Error? {:?}", &e);\n        }\n    }\n\n    fn authentication_expiring_soon(\n        &self,\n        _auth: dittolive_ditto::auth::DittoAuthenticator,\n        seconds_remaining: std::time::Duration,\n    ) {\n        ::log::info!(\n            "Auth token expiring in {} seconds",\n            seconds_remaining.as_secs()\n        );\n    }\n}\n\nimpl Default for AuthHandler {\n    fn default() -> Self {\n        AuthHandler {\n            token: ThirdPartyAuth::get_token(),\n            provider: String::from("third_party"),\n        }\n    }\n}\n\nlet mut ditto = Ditto::builder()\n    // creates a `ditto_data` folder in the directory containing the executing process\n    .with_root(Arc::new(PersistentRoot::current_exe()?))\n    .with_identity(|ditto_root| {\n      // Provided as an env var, may also be provided as hardcoded string\n      let app_id = AppId::from_env("DITTO_APP_ID")?;\n      let auth_event_handler = AuthHandler::default();\n      let enable_cloud_sync = true;\n      let custom_auth_url = None;\n      // return the Result<Identity, _> at the end of this closure\n      OnlineWithAuthentication::new(\n          ditto_root,\n          app_id,\n          auth_event_handler,\n          enable_cloud_sync,\n          custom_auth_url,\n      )\n    })\n    .with_transport_config(|_identity| {\n        let mut config = TransportConfig::enable_all_peer_to_peer()\n    })\n    .build()?;\n\nditto.set_license_from_env("DITTO_LICENSE")?; // May also be provided as a string\nditto.try_start_sync()?;\n')))))}m.isMDXComponent=!0},86010:function(t,e,n){function i(t){var e,n,r="";if("string"==typeof t||"number"==typeof t)r+=t;else if("object"==typeof t)if(Array.isArray(t))for(e=0;e<t.length;e++)t[e]&&(n=i(t[e]))&&(r&&(r+=" "),r+=n);else for(e in t)t[e]&&(r&&(r+=" "),r+=e);return r}function r(){for(var t,e,n=0,r="";n<arguments.length;)(t=arguments[n++])&&(e=i(t))&&(r&&(r+=" "),r+=e);return r}n.d(e,{Z:function(){return r}})}}]);