"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5810],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,v=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(v,l(l({ref:t},u),{},{components:n})):a.createElement(v,l({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},79443:function(e,t,n){var a=(0,n(67294).createContext)(void 0);t.Z=a},80944:function(e,t,n){var a=n(67294),r=n(79443);t.Z=function(){var e=(0,a.useContext)(r.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e}},30547:function(e,t,n){var a=n(67294);t.Z=function(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},49366:function(e,t,n){var a=n(67294),r=n(80944),o=n(86010);t.Z=function(e){var t,n=e.lazy,l=(e.block,e.defaultValue),i=e.values,s=e.groupId,c=(e.className,a.Children.toArray(e.children)),u=null!=i?i:c.map((function(e){return{value:e.props.value,label:e.props.label}})),p=null!=l?l:null==(t=c.find((function(e){return e.props.default})))?void 0:t.props.value,d=(0,r.Z)(),m=d.tabGroupChoices,v=d.setTabGroupChoices,b=(0,a.useState)(p),y=b[0],g=b[1];if(null!=s){var h=m[s];null!=h&&h!==y&&u.some((function(e){return e.value===h}))&&g(h)}var k=function(e){g(e),null!=s&&v(s,e)};return a.createElement("div",{className:"tabs-container"},a.createElement("div",{className:"sm:hidden"},a.createElement("label",{htmlFor:"tabs",className:"sr-only"},"Select a tab"),a.createElement("select",{id:"tabs",name:"tabs",value:y,onChange:function(e){return k(e.currentTarget.value)},className:"block w-full focus:ring-blue-500 focus:border-blue-500 border-gray-300 rounded-md"},u.map((function(e){var t=e.value,n=e.label;return a.createElement("option",{value:t,key:t},null!=n?n:t)})))),a.createElement("div",{className:"hidden sm:block"},a.createElement("nav",{className:"flex space-x-4","aria-label":"Tabs"},u.map((function(e){var t=e.value,n=e.label;return a.createElement("button",{key:t,onClick:function(){return k(t)},className:(0,o.Z)(y===t?"bg-blue-100 text-blue-700":"text-gray-500 hover:text-gray-700","px-3 py-2 font-medium text-sm rounded-md"),"aria-current":y===t?"page":void 0},null!=n?n:t)})))),n?(0,a.cloneElement)(c.filter((function(e){return e.props.value===y}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},c.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==y})}))))}},13901:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return d},default:function(){return v}});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),l=n(49366),i=n(30547),s=["components"],c={title:"Syncing Data",sidebar_position:6},u=void 0,p={unversionedId:"concepts/syncing-data",id:"concepts/syncing-data",isDocsHomePage:!1,title:"Syncing Data",description:"Live Queries",source:"@site/docs/concepts/syncing-data.md",sourceDirName:"concepts",slug:"/concepts/syncing-data",permalink:"/concepts/syncing-data",editUrl:"https://github.com/getditto/docs/edit/master/docs/concepts/syncing-data.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Syncing Data",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Evict",permalink:"/concepts/evict"},next:{title:"Online Playground",permalink:"/concepts/online-playground"}},d=[{value:"Live Queries",id:"live-queries",children:[{value:"1. Enabling Sync",id:"1-enabling-sync",children:[],level:3},{value:"2. Creating a Live Query",id:"2-creating-a-live-query",children:[],level:3},{value:"3. More Details",id:"3-more-details",children:[],level:3}],level:2},{value:"Live Queries without Syncing Data",id:"live-queries-without-syncing-data",children:[],level:2},{value:"Subscriptions",id:"subscriptions",children:[],level:2}],m={toc:d};function v(e){var t=e.components,c=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},m,c,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"live-queries"},"Live Queries"),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Ditto Small Peers ",(0,o.kt)("em",{parentName:"p"},"only")," syncs data when you have enabled sync and have any active live queries."))),(0,o.kt)("h3",{id:"1-enabling-sync"},"1. Enabling Sync"),(0,o.kt)("p",null,"To enable Ditto to sync data, you'll need to call ",(0,o.kt)("inlineCode",{parentName:"p"},"ditto.tryStartSync()"),". Preferably, you should call ",(0,o.kt)("inlineCode",{parentName:"p"},"tryStartSync()")," early on in your application's life cycle like in your ",(0,o.kt)("inlineCode",{parentName:"p"},"AppDelegate.application(_:didFinishLaunchingWithOptions:)")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"Application.onCreate")," methods. Your application only needs to call this function once."),(0,o.kt)(l.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const ditto = new Ditto()\ntry {\n    ditto.tryStartSync()\n} catch(err) {\n    console.error(err)\n}\n"))),(0,o.kt)(i.Z,{value:"swift",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"let ditto = new Ditto()\ntry {\n    ditto.tryStartSync()\n} catch(let err) {\n    print(err.localizedDescription)\n}\n"))),(0,o.kt)(i.Z,{value:"objc",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},"NSError *error = nil;\n[ditto tryStartSync:&error];\n"))),(0,o.kt)(i.Z,{value:"kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'try {\n    ditto.tryStartSync()\n}\ncatch (e: DittoError) {\n    assertThat(e.message).isEqualTo("The license failed verification. Obtain a valid license token at https://portal.ditto.live.")\n}\n'))),(0,o.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'try {\n    ditto.tryStartSync();\n} catch(DittoError e) {\n    Log.e("Ditto", e.getMessage())\n}\n'))),(0,o.kt)(i.Z,{value:"csharp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"try\n{\n    ditto.TryStartSync();\n}\ncatch (DittoException ex)\n{\n    Console.WriteLine(exception.ToString());\n}\n"))),(0,o.kt)(i.Z,{value:"cpp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"try {\n    ditto.try_start_sync();\n} catch (const DittoError &err) {\n    std::cerr << e.what();\n}\n"))),(0,o.kt)(i.Z,{mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() -> Result<(), Box<dyn Error>> {\n    ditto.try_start_sync()?;\n}\n// Or ...\nif let Err(e) = ditto.try_start_sync() {\n    eprintln!("Error starting Ditto sync: {:?}", e);\n}\n')))),(0,o.kt)("h3",{id:"2-creating-a-live-query"},"2. Creating a Live Query"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Create a query with a cursor and call ",(0,o.kt)("inlineCode",{parentName:"li"},".observe")," to subscribe to realtime changes both locally and remotely that fit the query. ",(0,o.kt)("a",{parentName:"li",href:"./querying"},"Learn more about how to create queries")),(0,o.kt)("li",{parentName:"ul"},"The callback will immediately run for documents that fit the query "),(0,o.kt)("li",{parentName:"ul"},"The callback will rerun for each sync or write transaction."),(0,o.kt)("li",{parentName:"ul"},"The return value is a ",(0,o.kt)("inlineCode",{parentName:"li"},"liveQuery")," object. If the ",(0,o.kt)("inlineCode",{parentName:"li"},"liveQuery")," object is deallocated the live query will stop."),(0,o.kt)("li",{parentName:"ul"},"To manually stop the ",(0,o.kt)("inlineCode",{parentName:"li"},"liveQuery"),", set it either to ",(0,o.kt)("inlineCode",{parentName:"li"},"null")," or call ",(0,o.kt)("inlineCode",{parentName:"li"},"liveQuery.stop()")),(0,o.kt)("li",{parentName:"ul"},"You can create as many ",(0,o.kt)("inlineCode",{parentName:"li"},"LiveQuery")," objects as you want."),(0,o.kt)("li",{parentName:"ul"},"Calling ",(0,o.kt)("inlineCode",{parentName:"li"},".observe")," on a query before calling ",(0,o.kt)("inlineCode",{parentName:"li"},"ditto.tryStartSync()"),", will only fire changes for local updates.")),(0,o.kt)(l.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const liveQuery = ditto.store.collection('cars')\n    .find(\"color == 'red'\")\n    .observe((cars, event) => {\n        // do something\n    })\n"))),(0,o.kt)(i.Z,{value:"swift",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'// Register live query to update UI\nlet liveQuery = ditto.store.collection("cars").find("color == \'red\'")\n  .observe { cars, event in\n    // do something\n  }\n'))),(0,o.kt)(i.Z,{value:"objc",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},"// Register live query to update UI\nDITLiveQuery *liveQuery = [[collection find:@\"color == 'red'\"]\n    observe:^(NSArray<DITDocument *> *docs, DITLiveQueryEvent *event) {\n\n    }\n}];\n"))),(0,o.kt)(i.Z,{value:"kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'// --- Register live query to update UI\nthis.liveQuery = ditto.store.collection("cars").\n    .findAll()\n    .observe { docs, event ->\n        // Do something...\n    }\n'))),(0,o.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'// --- Register live query to update UI\nthis.liveQuery = ditto.store.collection("cars")\n    .findAll()\n    .observe((docs, event) -> {\n        // Do something...\n    });\n'))),(0,o.kt)(i.Z,{value:"csharp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'// --- Register live query to update UI\nvar liveQuery = ditto.Store.Collection("cars").Find("color == \'red\'").Observe((docs, DittoLiveQueryEvent) =>\n{\n    // Do something...\n});\n'))),(0,o.kt)(i.Z,{value:"cpp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"std::shared_ptr<LiveQuery> query = collection\n  .find(\"color == 'red'\")\n  .observe(LiveQueryEventHandler{\n    [&](std::vector<Document> docs, LiveQueryEvent event) {\n      // do something\n    }});\n"))),(0,o.kt)(i.Z,{value:"rust",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'let store = ditto.store(); // Ditto must have a longer lifetime than all live queries\nlet (tx, rx) = channel();\n{\n    let live_query = store.collection("cars")?.find("color == \\\'red\\\'")\n       .observe(move |docs, event| {\n           match event {\n               LiveQueryEvent::Initial {..} => {.. },\n               LiveQueryEvent::Update {insertions, ..} => {\n                   for idx in insertions.iter() {\n                        if let Some(doc) = docs.get(*idx) {\n                            let _ = tx.send(doc);\n                        }\n                   }\n               },\n               _ => () // do nothing\n           }\n       })?;\n    for doc in rx.iter() {\n        println!("Updated Doc: {:?}", &doc);\n    }\n\n} // IMPORTANT: LiveQuery goes out of scope and is Dropped and terminated here.\n')))),(0,o.kt)("h3",{id:"3-more-details"},"3. More Details"),(0,o.kt)("p",null,"Ditto's sync system is query-based, which means, that by default the SDK will not sync data with other devices. Instead, the app creates query-based subscriptions that define which data it wants to sync. When the device is subscribed to a query, then other devices will share data matching that query with it:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Query-based Subscriptions",src:n(23842).Z})),(0,o.kt)("p",null,'Given that Ditto works peer-to-peer, devices can form into arbitrary groups based on the proximity to one another, or rather they create an ad-hoc mesh network. Ditto\'s sync system allows for devices to share data through another device, called "multi-hop" sync. The only requirement for this to occur is that all devices in the chain must be subscribed to the same data, as shown below:'),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Multi-hop Subscriptions",src:n(33795).Z})),(0,o.kt)("h2",{id:"live-queries-without-syncing-data"},"Live Queries without Syncing Data"),(0,o.kt)("p",null,"There are many situations where your app needs to observe live queries ",(0,o.kt)("em",{parentName:"p"},"without")," initiating syncing with other devices. For example, this is useful if your app intends to treat certain documents and collections as local-only data. In addition, for complex apps, it can be helpful to seperate the observer from the underlying query ",(0,o.kt)("a",{parentName:"p",href:"#subscriptions"},(0,o.kt)("inlineCode",{parentName:"a"},"Subscription")),"."),(0,o.kt)("p",null,"Instead of ",(0,o.kt)("inlineCode",{parentName:"p"},".observe"),", call ",(0,o.kt)("inlineCode",{parentName:"p"},".observeLocal")," like so:"),(0,o.kt)(l.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const liveQuery = ditto.store.collection('cars')\n    .find(\"color == 'red'\")\n    .observeLocal((cars, event) => {\n        // do something\n    })\n"))),(0,o.kt)(i.Z,{value:"swift",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'// --- Action somewhere in your application\nfunc userDidInsertCar() {\n    _ = ditto.store.collection("cars").upsert([\n        "model": "Ford",\n        "color": "black"\n    ])\n}\n\n// Register live query to update UI\nlet liveQuery = ditto.store.collection("cars").find("color == \'red\'")\n  .observeLocal { cars, event in\n    // do something\n  }\n'))),(0,o.kt)(i.Z,{value:"objc",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},'// --- Action somewhere in your application\n-(void) userDidInsertCar() {\n    [[ditto.store collection:@"cars"] upsert:@{\n        @"model": @"Ford",\n        @"color": @"black"\n    }];\n}\n\n// Register live query to update UI\nDITLiveQuery *liveQuery = [[collection find:@"color == \'red\'"]\n    observeLocal:^(NSArray<DITDocument *> *docs, DITLiveQueryEvent *event) {\n\n    }\n}];\n'))),(0,o.kt)(i.Z,{value:"kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'// --- Action somewhere in your application\nfun userDidInsertCar() {\n    ditto.store.collection("cars").upsert(mapOf(\n        "model" to "Ford",\n        "color" to "black"\n    ))\n}\n\n// --- Register live query to update UI\nthis.liveQuery = ditto.store.collection("cars").\n    .findAll()\n    .observeLocal { docs, event ->\n    // Do something...\n}\n'))),(0,o.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'// --- Action somewhere in your application\npublic void userDidInsertCar() {\n    Map<String, Object> content = new HashMap<>();\n    content.put("model", "Ford");\n    content.put("color", "black");\n    ditto.store.collection("cars").upsert(content);\n}\n\n// --- Register live query to update UI\nthis.liveQuery = ditto.store.collection("cars")\n    .findAll()\n    .observeLocal((docs, event) -> {\n        // Do something...\n    });\n'))),(0,o.kt)(i.Z,{value:"csharp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'// --- Action somewhere in your application\n// --- Action somewhere in your application\nvoid user_did_insert_car()\n{\n    var carsDocument = new Dictionary<string, object>\n    {\n        { "model", "Ford" },\n        { "color", "black" }\n    };\n    ditto.Store.Collection("cars").Upsert(carsDocument);\n}\n\n// --- Register live query to update UI\nvar localLiveQuery = ditto.Store.Collection("cars").Find("color == \'red\'").ObserveLocal((docs, DittoLiveQueryEvent) =>\n{\n    // Do something...\n});\n'))),(0,o.kt)(i.Z,{value:"cpp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'// --- Action somewhere in your application\nvoid user_did_insert_car() {\n    ditto.store.collection("cars").upsert({\n        {"model", "Ford"},\n        {"color", "black"}\n    });\n}\n\n// --- Register live query to update UI\nstd::shared_ptr<LiveQuery> query = collection\n  .find("color == \'red\'")\n  .observe_local(LiveQueryEventHandler{\n    [&](std::vector<Document> docs, LiveQueryEvent event) {\n\n    }});\n'))),(0,o.kt)(i.Z,{value:"rust",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'// Some action in your app ...\nlet store = ditto.store();\nlet mut doc_id;\n{\n    let doc_id = store.collection("cars")?.insert(car_1, None, false)?;\n}\n// Elsewhere register handlers for data changes\n{\n    let shared_element = RwLock::new(my_element);\n    let element_copy = shared_element.clone();\n    let live_query = store.collection("cars")\n        .find("color == \\\'red\\\'")\n        .observe_local(move |cars, event|{\n            let element = element_copy.write().unwrap();\n            // do something when data changes\n            // BUT this closure must be permitted to take ownership\n        })?;\n    // stash your live query in something with a long lifetime\n    // or it will be dropped\n}\n')))),(0,o.kt)("p",null,"Note: if your Ditto instance has not called ",(0,o.kt)("inlineCode",{parentName:"p"},"tryStartSync"),", there will be no difference between ",(0,o.kt)("inlineCode",{parentName:"p"},".observe")," and ",(0,o.kt)("inlineCode",{parentName:"p"},".observeLocal"),"."),(0,o.kt)("h2",{id:"subscriptions"},"Subscriptions"),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"We plan on deprecating Subscriptions because they offer no real benefit over a Live Query. To sync data throughout the entire "))),(0,o.kt)("p",null,"In developing more complex applications, it might make sense to decouple your ",(0,o.kt)("inlineCode",{parentName:"p"},"LiveQuery")," observer callbacks with the query ",(0,o.kt)("inlineCode",{parentName:"p"},"Subscription"),". For example, if you want the app to always be subscribing to data during the entire life-cycle of the app, but only create an observer when the user navigates to the UI for that data. In this case, you would use the ",(0,o.kt)("inlineCode",{parentName:"p"},".observeLocal")," API while registering a ",(0,o.kt)("inlineCode",{parentName:"p"},"Subscription")," for the query in a global area of the app."),(0,o.kt)("p",null,"To create subscriptions is similar to, or can also be combined with, ",(0,o.kt)("a",{parentName:"p",href:"#live-queries-without-syncing-data"},"local observers"),":"),(0,o.kt)(l.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Register a subscription globally in the app\nconst subscription = ditto.store.collection('cars')\n    .find(\"color == 'red'\")\n    .subscribe()\n\n// Register a local observer to update UI\nconst liveQuery = ditto.store.collection('cars')\n    .find(\"color == 'red'\")\n    .observeLocal((cars, event) => {\n        // do something\n    })\n"))),(0,o.kt)(i.Z,{value:"swift",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},'// Register a subscription globally in the app\nlet subscription = ditto.store.collection("cars")\n    .find("color == \'red\'")\n    .subscribe()\n\n// Register a local observer to update UI\nlet liveQuery = ditto.store.collection("cars").find("color == \'red\'")\n  .observeLocal { cars, event in\n    // do something\n  }\n'))),(0,o.kt)(i.Z,{value:"objc",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-objc"},"// Register a subscription globally in the app\nDITSubscription *subscription = [[collection find:@\"color == 'red'\"] subscribe];\n\n// Register a local observer to update UI\nDITLiveQuery *liveQuery = [[collection find:@\"color == 'red'\"]\n    observeLocal:^(NSArray<DITDocument *> *docs, DITLiveQueryEvent *event) {\n\n    }\n}];\n"))),(0,o.kt)(i.Z,{value:"kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'// Register a subscription globally in the app\nthis.subscription = ditto.store.collection("cars").\n    .findAll()\n    .subscribe()\n\n// Register a local observer to update UI\nthis.liveQuery = ditto.store.collection("cars").\n    .findAll()\n    .observeLocal { docs, event ->\n    // Do something...\n}\n'))),(0,o.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'// Register a subscription globally in the app\nthis.subscription = ditto.store.collection("cars").\n    .findAll()\n    .subscribe();\n\n// Register a local observer to update UI\nthis.liveQuery = ditto.store.collection("cars")\n    .findAll()\n    .observeLocal((docs, event) -> {\n        // Do something...\n    });\n'))),(0,o.kt)(i.Z,{value:"csharp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'// Register a subscription globally in the app\nvar subscription = ditto.Store.Collection("cars").Find("color == \'red\'").Subscribe();\n\n// Register a local observer to update UI\nvar localLiveQuery = ditto.Store.Collection("cars").Find("color == \'red\'").ObserveLocal((docs, DittoLiveQueryEvent) =>\n{\n    // Do something...\n});\n'))),(0,o.kt)(i.Z,{value:"cpp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"// Register a subscription globally in the app\nSubscription subscription = collection\n  .find(\"color == 'red'\")\n  .subscribe();\n\n// Register a local observer to update UI\nstd::shared_ptr<LiveQuery> query = collection\n  .find(\"color == 'red'\")\n  .observe_local(LiveQueryEventHandler{\n    [&](std::vector<Document> docs, LiveQueryEvent event) {\n\n    }});\n"))),(0,o.kt)(i.Z,{value:"rust",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'// subscription triggers sync behavior, asks remote peers to push data\n// you need to be able to store this data\nlet subscription = ditto.store().collection("cars").find("color == \\\'red\\\'").subscribe()?;\n\n// Observe local changes to data to update UI\nlet query = ditto.store().collection("cars").find("color == \\\'red\\\'").observe_local()?;\n')))),(0,o.kt)("p",null,"Note: if your Ditto instance has not called ",(0,o.kt)("inlineCode",{parentName:"p"},"tryStartSync"),", ",(0,o.kt)("inlineCode",{parentName:"p"},".subscribe")," will not enable sync."))}v.isMDXComponent=!0},86010:function(e,t,n){function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function r(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}n.d(t,{Z:function(){return r}})},33795:function(e,t,n){t.Z=n.p+"assets/images/multi-hop-subscriptions-192b28bc88d61093dcdac56878a3f332.png"},23842:function(e,t,n){t.Z=n.p+"assets/images/subscriptions-50f375353580de80d1cdb81b560b1a0a.png"}}]);