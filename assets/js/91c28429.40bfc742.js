"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9627],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,v=d["".concat(c,".").concat(m)]||d[m]||s[m]||r;return n?a.createElement(v,l(l({ref:t},u),{},{components:n})):a.createElement(v,l({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},79443:function(e,t,n){var a=(0,n(67294).createContext)(void 0);t.Z=a},80944:function(e,t,n){var a=n(67294),o=n(79443);t.Z=function(){var e=(0,a.useContext)(o.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e}},30547:function(e,t,n){var a=n(67294);t.Z=function(e){var t=e.children,n=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:o},t)}},49366:function(e,t,n){var a=n(67294),o=n(80944),r=n(86010);t.Z=function(e){var t,n=e.lazy,l=(e.block,e.defaultValue),i=e.values,c=e.groupId,p=(e.className,a.Children.toArray(e.children)),u=null!=i?i:p.map((function(e){return{value:e.props.value,label:e.props.label}})),s=null!=l?l:null==(t=p.find((function(e){return e.props.default})))?void 0:t.props.value,d=(0,o.Z)(),m=d.tabGroupChoices,v=d.setTabGroupChoices,b=(0,a.useState)(s),f=b[0],g=b[1];if(null!=c){var k=m[c];null!=k&&k!==f&&u.some((function(e){return e.value===k}))&&g(k)}var h=function(e){g(e),null!=c&&v(c,e)};return a.createElement("div",{className:"tabs-container"},a.createElement("div",{className:"sm:hidden"},a.createElement("label",{htmlFor:"tabs",className:"sr-only"},"Select a tab"),a.createElement("select",{id:"tabs",name:"tabs",value:f,onChange:function(e){return h(e.currentTarget.value)},className:"block w-full focus:ring-blue-500 focus:border-blue-500 border-gray-300 rounded-md"},u.map((function(e){var t=e.value,n=e.label;return a.createElement("option",{value:t,key:t},null!=n?n:t)})))),a.createElement("div",{className:"hidden sm:block"},a.createElement("nav",{className:"flex space-x-4","aria-label":"Tabs"},u.map((function(e){var t=e.value,n=e.label;return a.createElement("button",{key:t,onClick:function(){return h(t)},className:(0,r.Z)(f===t?"bg-blue-100 text-blue-700":"text-gray-500 hover:text-gray-700","px-3 py-2 font-medium text-sm rounded-md"),"aria-current":f===t?"page":void 0},null!=n?n:t)})))),n?(0,a.cloneElement)(p.filter((function(e){return e.props.value===f}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},p.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==f})}))))}},65881:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return d},default:function(){return v}});var a=n(87462),o=n(63366),r=(n(67294),n(3905)),l=n(49366),i=n(30547),c=["components"],p={title:"Upsert",sidebar_position:3},u=void 0,s={unversionedId:"concepts/upsert",id:"concepts/upsert",isDocsHomePage:!1,title:"Upsert",description:"Upserting Documents",source:"@site/docs/concepts/upsert.mdx",sourceDirName:"concepts",slug:"/concepts/upsert",permalink:"/concepts/upsert",editUrl:"https://github.com/getditto/docs/edit/master/docs/concepts/upsert.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Upsert",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Update",permalink:"/concepts/update"},next:{title:"Querying",permalink:"/concepts/querying"}},d=[{value:"Upserting Documents",id:"upserting-documents",children:[{value:"Upserting with a specific <code>_id</code>",id:"upserting-with-a-specific-_id",children:[],level:3},{value:"Default Data",id:"default-data",children:[],level:3}],level:2}],m={toc:d};function v(e){var t=e.components,n=(0,o.Z)(e,c);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"upserting-documents"},"Upserting Documents"),(0,r.kt)("p",null," ",(0,r.kt)("strong",{parentName:"p"},"Upserting")," describes a behavior where you would want to insert a document into a collection if the document ",(0,r.kt)("inlineCode",{parentName:"p"},"_id")," does not not exist."),(0,r.kt)(l.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"},{label:"HTTP",value:"http"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"javascript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const docID = await ditto.store.collection('people').upsert({\n    name: \"Susan\",\n    age: 31\n})\n"))),(0,r.kt)(i.Z,{value:"swift",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'// upsert JSON-compatible data into Ditto\nlet docId = ditto.store["people"].upsert([\n    "name": "Susan",\n    "age": 31\n])\n'))),(0,r.kt)(i.Z,{value:"objc",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-objc"},'// upsert JSON-compatible data into Ditto\nDITDocumentID *docID = [[ditto.store collection:@"people"]\n     upsert:@{ @"name": @"Susan", @"age": [NSNumber numberWithInt:31] }\n     isDefault:false\n     error:nil];\n'))),(0,r.kt)(i.Z,{value:"kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'val docId = ditto.store["people"].upsert(mapOf(\n    "name" to "Susan",\n    "age" to 31\n))\n'))),(0,r.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'Map<String, Object> content = new HashMap<>();\ncontent.put("name", "Susan");\ncontent.put("age", 31);\nDittoDocumentID docId = ditto.store.collection("people").upsert(content);\n'))),(0,r.kt)(i.Z,{value:"csharp",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var content = new Dictionary<string, object>\n{\n    { "name", "Susan" },\n    { "age", 31 }\n};\nvar docId = ditto.Store.Collection("people").upsert(content);\n'))),(0,r.kt)(i.Z,{value:"cpp",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'json content = json({\n    { "name", "Susan" },\n    { "age", 31 }\n});\nDocumentId doc_id = ditto.store.collection("people").upsert(content);\n'))),(0,r.kt)(i.Z,{value:"rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use serde_json::json;\nlet content = json!({\n  "name": "Susan",\n  "age": 31\n});\nlet doc_id = ditto.store().collection("people")?.upsert(content, None, false)?;\n'))),(0,r.kt)(i.Z,{value:"http",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST \'https://<CLOUD_ENDPOINT>/api/v1/store\' \\\n  --header \'X-HYDRA-CLIENT-ID: AAAAAAAAAAAAAAAAAAAABQ==\' \\\n  --header \'Content-Type: application/json\' \\\n  --data-raw \'{\n    "method": "write",\n    "parameters": {\n      "commands": [{\n        "method": "upsert",\n        "collection": "people",\n        "value": {\n          "name": "Susan", "age": 31\n        }\n      }]\n    }\n  }\'\n')),(0,r.kt)("p",null,"  NOTE: The HTTP API does not return the id, but a ",(0,r.kt)("inlineCode",{parentName:"p"},"txn_id")," which can be used to request the document ",(0,r.kt)("inlineCode",{parentName:"p"},"_id"),". See ",(0,r.kt)("a",{parentName:"p",href:"/concepts/http#transactions"},"HTTP API Reference")," for more details."))),(0,r.kt)("h3",{id:"upserting-with-a-specific-_id"},"Upserting with a specific ",(0,r.kt)("inlineCode",{parentName:"h3"},"_id")),(0,r.kt)("p",null,"There are times where you want to specify the ",(0,r.kt)("inlineCode",{parentName:"p"},"_id")," of the document before upsertion.  If the ",(0,r.kt)("inlineCode",{parentName:"p"},"_id")," exists, Ditto will update the document in place. Note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"_id")," is immutable. This means that you cannot change the ",(0,r.kt)("inlineCode",{parentName:"p"},"_id")," once you have upserted the document."),(0,r.kt)("p",null,"As an example, let's say we have a document in the ",(0,r.kt)("inlineCode",{parentName:"p"},"people")," collection that looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  "_id": "123abc",\n  "name": "Sam",\n  "age": 45,\n  "isOnline": false\n}\n')),(0,r.kt)(l.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"},{label:"HTTP",value:"http"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"javascript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'await ditto.store.collection(\'people\').upsert({\n  "_id": docID,\n  "name": "Joe",\n  "isOnline": true\n})\n'))),(0,r.kt)(i.Z,{value:"swift",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'try ditto.store["people"].upsert([\n  "_id": docId,\n  "name": "Joe",\n  "isOnline": true\n])\n'))),(0,r.kt)(i.Z,{value:"objc",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-objc"},'DITCollection *collection = [ditto.store collection:@"people"];\n[collection upsert:@{\n    @"_id": @"123abc",\n    @"name": @"Joe",\n    @"isOnline": YES\n  }\n  withID:customID\n  error:nil];\n'))),(0,r.kt)(i.Z,{value:"kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'ditto.store["people"].upsert(mapOf(\n  "_id" to "123abc",\n  "name" to "Joe",\n  "isOnline" to true\n))\n'))),(0,r.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Map<String, Object> map = new HashMap();\nmap.put('_id', docId)\nmap.put('name', \"Joe\")\nmap.put('isOnline', true)\nditto.store.collection(\"people\").upsert(content)\n"))),(0,r.kt)(i.Z,{value:"csharp",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'var update = new Dictionary<string, object>\n{\n  { "_id", docId }, \n  {"name", "Joe"}, \n  {"isOnline", true} \n};\nditto.Store.Collection("people").Upsert(update)\n'))),(0,r.kt)(i.Z,{value:"cpp",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'ditto.store.collection("people").upsert({{"_id", "123abc"}, { "name", "Susan" }, { "age", 31 }});\n'))),(0,r.kt)(i.Z,{value:"rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'ditto.store().collection("people")?.upsert(json!({"_id": DocumentId::new("123abc")?, "name": "Susan", "age": 31}), None, false)?;\n'))),(0,r.kt)(i.Z,{value:"http",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'curl -X POST \'https://<CLOUD_ENDPOINT>/api/v1/store\' \\\n  --header \'X-HYDRA-CLIENT-ID: AAAAAAAAAAAAAAAAAAAABQ==\' \\\n  --header \'Content-Type: application/json\' \\\n  --data-raw \'{\n    "method": "write",\n    "parameters": {\n      "commands": [{\n        "method": "upsert",\n        "collection": "people",\n        "value": {\n          "_id": "123abc",\n          "name": "Susan", \n          "age": 31\n        }\n      }]\n    }\n  }\'\n')))),(0,r.kt)("h3",{id:"default-data"},"Default Data"),(0,r.kt)("p",null,'Default Data can be thought of as "placeholder" data.  Default Data is useful when your app needs to load "starter" data from an external data source, like from a backend API, on multiple devices without creating odd "overwriting" behavior.'),(0,r.kt)("p",null,"Ditto's approach to conflict resolution orders changes by time. In most situations, this leads to predictable behavior. However, if your application is upserting the same initial data into multiple devices, such as common data from a central backend API, this could result in overwriting later changes:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Device A upserts a document ",(0,r.kt)("inlineCode",{parentName:"li"},'{"firstName": "Adam"}')," at time = 0 after downloading from a central API."),(0,r.kt)("li",{parentName:"ol"},"Device A updates the document to ",(0,r.kt)("inlineCode",{parentName:"li"},'{"firstName": "Max"}')," at time = 1."),(0,r.kt)("li",{parentName:"ol"},"Device B synchronizes with Device A receiving the document ",(0,r.kt)("inlineCode",{parentName:"li"},'{"firstName": "Max"}')," at time = 2."),(0,r.kt)("li",{parentName:"ol"},"Device B downloads the same document from the backend API ",(0,r.kt)("inlineCode",{parentName:"li"},'{"firstName": "Adam"}')," and upserts at t = 3, which overwrites the previous change synced at time = 1.")),(0,r.kt)("p",null,"In the above example, both Device A and B want to preserve the change by Device A that occurred after downloading the common data. To do so, Ditto offers an additional parameter: isDefault."),(0,r.kt)(l.Z,{groupId:"programming-language",defaultValue:"javascript",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"},{label:"HTTP",value:"http"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"javascript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const docID = await ditto.store.collection('people').upsert({\n    _id: new DocumentID(123),\n    name: \"Susan\",\n    age: 31\n}, { isDefault: true })\n"))),(0,r.kt)(i.Z,{value:"swift",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift"},'let docId = ditto.store.collection("people").upsert([\n    "name": "Susan",\n    "age": 31\n], isDefault: true)\n'))),(0,r.kt)(i.Z,{value:"objc",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-objc"},'DITDocumentID *docID = [[ditto.store collection:@"people"]\n     upsert:@{ @"name": @"Susan", @"age": [NSNumber numberWithInt:31] }\n     isDefault:true\n     error:nil];\n'))),(0,r.kt)(i.Z,{value:"kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'val docId = ditto.store.collection("people").upsert(mapOf(\n    "name" to "Susan",\n    "age" to 31\n), isDefault: true)\n'))),(0,r.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'Map<String, Object> content = new HashMap<>();\ncontent.put("name", "Susan");\ncontent.put("age", 31);\nDittoDocumentID docId = ditto.store\n                             .collection("people")\n                             .upsert(content, new DittoDocumentID("doc-id"), true);\n'))),(0,r.kt)(i.Z,{value:"csharp",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'DittoDocumentID docID = ditto.Store\n                        .Collection("people")\n                        .upsert(\n                            {{"name", "Susan"}, {"age", 31}},\n                            new DittoDocumentID("doc-id"),\n                            true\n                        );\n'))),(0,r.kt)(i.Z,{value:"cpp",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'json content = json({{ "name", "Susan" }, { "age", 31 }}):\nDocumentId doc_id = ditto.store.collection("people")\n                               .upsert(content, DocumentId("doc-id"), true);\n'))),(0,r.kt)(i.Z,{value:"rust",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'ditto.store().collection("people")?.upsert(json!({"_id": DocumentId::new("123abc")?, "name": "Susan", "age": 31}), None, true)?;\n'))),(0,r.kt)(i.Z,{value:"http",mdxType:"TabItem"},"Default Data is not supported by the HTTP API.")))}v.isMDXComponent=!0},86010:function(e,t,n){function a(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}function o(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(o&&(o+=" "),o+=t);return o}n.d(t,{Z:function(){return o}})}}]);