"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[970],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,f=u["".concat(s,".").concat(m)]||u[m]||p[m]||i;return n?a.createElement(f,r(r({ref:t},d),{},{components:n})):a.createElement(f,r({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var c=2;c<i;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},73513:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return d},default:function(){return u}});var a=n(87462),o=n(63366),i=(n(67294),n(3905)),r=["components"],l={title:"Loading the JavaScript ditto.wasm File"},s=void 0,c={unversionedId:"advanced/loading-the-javascript-wasm-file",id:"advanced/loading-the-javascript-wasm-file",isDocsHomePage:!1,title:"Loading the JavaScript ditto.wasm File",description:"Unlike most JavaScript libraries, Ditto's JavaScript runs as a WebAssembly module in the browser environment. WebAssembly modules have to be loaded asynchronously. Thus, before you call any of the Ditto API's, you must call await init() at least once in your application. Preferably, you should call this early in the entry point of your application.",source:"@site/docs/advanced/loading-the-javascript-wasm-file.md",sourceDirName:"advanced",slug:"/advanced/loading-the-javascript-wasm-file",permalink:"/advanced/loading-the-javascript-wasm-file",editUrl:"https://github.com/getditto/docs/edit/master/docs/advanced/loading-the-javascript-wasm-file.md",tags:[],version:"current",frontMatter:{title:"Loading the JavaScript ditto.wasm File"},sidebar:"tutorialSidebar",previous:{title:"Ditto Identities",permalink:"/advanced/identities"},next:{title:"Manual Network Transport Configuration",permalink:"/advanced/manual-network-transport-configuration"}},d=[{value:"Customizing a URL of a <code>ditto.wasm</code> file.",id:"customizing-a-url-of-a-dittowasm-file",children:[],level:2}],p={toc:d};function u(e){var t=e.components,n=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Unlike most JavaScript libraries, Ditto's JavaScript runs as a WebAssembly module in the browser environment. WebAssembly modules have to be loaded asynchronously. Thus, before you call any of the Ditto API's, you must call ",(0,i.kt)("inlineCode",{parentName:"p"},"await init()")," at least once in your application. Preferably, you should call this early in the entry point of your application. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { init, Ditto } from '@dittolive/ditto'\n\n(async () => {\n  await init() // you need to call this at least once before using any of the Ditto API\n  const identity = { type: 'onlinePlayground', appID: 'com.example.ditto' }\n  const ditto = new Ditto(identity, '/playground')\n})()\n")),(0,i.kt)("p",null,"By default, ",(0,i.kt)("inlineCode",{parentName:"p"},"init()")," will asynchronously download the underlying WebAssembly module from our CDN. Once this is complete, then you can use Ditto APIs. Note, if you call ",(0,i.kt)("inlineCode",{parentName:"p"},"init()")," in a NodeJS or Electron app, nothing will happen since the runtime will use a native binary."),(0,i.kt)("h2",{id:"customizing-a-url-of-a-dittowasm-file"},"Customizing a URL of a ",(0,i.kt)("inlineCode",{parentName:"h2"},"ditto.wasm")," file."),(0,i.kt)("p",null,"There are times where your application may not have access to the CDN and needs the ",(0,i.kt)("inlineCode",{parentName:"p"},".wasm")," file from another location. Once you've ran ",(0,i.kt)("inlineCode",{parentName:"p"},"npm install @dittolive/ditto"),", we've already included a copy of ",(0,i.kt)("inlineCode",{parentName:"p"},"ditto.wasm")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"node_modules/@dittolive/ditto")," directory. It's up to you if you'd like to host it on your own server or load it from a local static directory. "),(0,i.kt)("p",null,"You can customize the URL of the ",(0,i.kt)("inlineCode",{parentName:"p"},"ditto.wasm")," file like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { init, Ditto } from '@dittolive/ditto'\n\n(async () => {\n  // Pass the URL to the ditto.wasm file:\n  await init({ webAssemblyModule: 'https://my-app/assets/ditto.wasm' })\n  // Then use Ditto as you normally would:\n  const identity = { type: 'development', appID: 'live.ditto.playground' }\n  const ditto = new Ditto(identity, '/playground')\n  // ...\n})\n")),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Make sure to properly configure the server to\nreturn the correct MIME type (",(0,i.kt)("inlineCode",{parentName:"p"},"application/wasm"),") and the\n",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin"},(0,i.kt)("inlineCode",{parentName:"a"},"Access-Control-Allow-Origin")),"\nheader if the ",(0,i.kt)("inlineCode",{parentName:"p"},".wasm")," file is served from a different domain. For production\nenvironments, make sure to use compression (",(0,i.kt)("inlineCode",{parentName:"p"},"gzip"),") and proper caching headers."))))}u.isMDXComponent=!0}}]);