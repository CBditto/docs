(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6112],{41689:function(e,t,n){"use strict";n.r(t),n.d(t,{contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return d},metadata:function(){return p},toc:function(){return u}});var o=n(87462),i=n(63366),r=(n(67294),n(3905)),a=n(98532),s=n(80151),c=["components"],d={title:"Installation"},l=void 0,p={unversionedId:"installation",id:"installation",isDocsHomePage:!1,title:"Installation",description:"Ditto's JavaScript SDK can run either in the browser, NodeJS, or Electron",source:"@site/docs/javascript/installation.mdx",sourceDirName:".",slug:"/installation",permalink:"/pr-preview/pr-218/javascript/installation",editUrl:"https://github.com/getditto/docs/tree/master/docs/javascript/installation.mdx",tags:[],version:"current",frontMatter:{title:"Installation"},sidebar:"docs",next:{title:"Overview",permalink:"/pr-preview/pr-218/javascript/common/concepts/overview"}},u=[],h={toc:u};function f(e){var t=e.components,n=(0,i.Z)(e,c);return(0,r.kt)("wrapper",(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Ditto's JavaScript SDK can run either in the browser, NodeJS, or Electron\nenvironments. React Native support is currently under development. For more\ninformation about browser, NodeJS and Electron support ",(0,r.kt)("a",{parentName:"p",href:"./supported-platforms"},"click\nhere.")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Add the JS package with either npm or yarn.")),(0,r.kt)(s.Yv,{framework:"js",mdxType:"InstallCode"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm install --save @dittolive/ditto\n# or with yarn\nyarn add @dittolive/ditto\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Import it like any other NPM package in your source and start using it:")),(0,r.kt)(a.p,{name:"online-playground",language:"javascript",mdxType:"Snippet"}),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Need to run NodeJS on a Linux or Raspberry Pi? ",(0,r.kt)("a",{parentName:"p",href:"/installation/linux"},"Make sure to read this.")))))}f.isMDXComponent=!0},80151:function(e,t,n){"use strict";n.d(t,{Yv:function(){return B},ZP:function(){return q}});var o,i,r,a,s,c,d,l,p,u,h,f,m,g,y=n(81880),_=n(67294),w=n(49366),D=n(30547),v=n(52263),b=n(81249),T=n.n(b),I=n(18464),A=n(30381),S=n.n(A),k=n(9980),C=n.n(k),x=n(99013),j=n(99151)||{},O=n(91395);j.bigpeer=O;var P,E,F,L,Z=(P=j,E=C()(),F=["android","cocoa","cpp","dotnet","js","rustsdk","bigpeer"],L={},Object.keys(P).forEach((function(e){F.includes(e)&&(L[e]=[],Object.keys(P[e]).sort((function(e,t){return"Ditto"===e||"DittoObjC"===e||"DittoSwift"===e||"Ditto"===t||"DittoObjC"===t||"DittoSwift"===t?-1:t.length-e.length})).forEach((function(t){Object.keys(P[e][t]).filter((function(e){return"latest"!==e})).sort((function(e,t){return T().compare(t,e)})).forEach((function(n){var d=P[e][t][n],l={framework:t,version:n,apiReferenceDocsURL:d.api_reference_docs_url,dateReleased:S()(d.date_released).format("ddd MMM Do YYYY, h:mm a"),description:E.render(d.description)};if("cocoa"===e&&(l.installationSnippet=E.render((0,I.C)(o||(o=(0,y.Z)(["\n              ~~~ruby\n              pod '","', '=","'\n              ~~~\n              "])),t,n)),l.friendlyName="Cocoa",l.friendlyDescription="iOS 12.0 and higher","DittoObjC"===t?l.languageOrPlatform="ObjC":"DittoSwift"===t&&(l.languageOrPlatform="Swift")),"android"===e){var p=t.toLowerCase();l.installationSnippet=E.render((0,I.C)(i||(i=(0,y.Z)(['\n              ~~~html\n              implementation "live.ditto:',":",'"\n              ~~~'])),p,n)),l.friendlyName="Android",l.friendlyDescription="Android v7.1 and higher"}"cpp"===e&&(l.friendlyName="C++",l.friendlyDescription="C++11 and higher",l.installationSnippet=E.render((0,I.C)(r||(r=(0,y.Z)(["\n              iOS\n              ~~~shell\n              curl -O https://software.ditto.live/cpp-ios/Ditto/","/dist/Ditto.tar.gz && tar xvfz Ditto.tar.gz\n              ~~~\n\n              Linux x64_64\n              ~~~shell\n              curl -O https://software.ditto.live/cpp-linux-x86_64/Ditto/","/dist/Ditto.tar.gz && tar xvfz Ditto.tar.gz\n              ~~~\n              "])),n,n))),"dotnet"===e&&(l.friendlyName=".NET",l.friendlyDescription=".NET Standard 2.1",l.installationSnippet=E.render((0,I.C)(a||(a=(0,y.Z)(["\n              Command Line\n              ~~~html\n              Install-Package Ditto -Version ",'\n              ~~~\n\n              PackageReference\n              ~~~xml\n              <PackageReference Include="Ditto" Version=','" />\n              ~~~\n              '])),n,n))),"js"===e&&(l.friendlyName="JS",l.friendlyDescription="Web only",l.installationSnippet=E.render((0,I.C)(s||(s=(0,y.Z)(["\n              ~~~shell\n              npm install --save @dittolive/ditto@","\n              ~~~\n\n              If you have yarn:\n\n              ~~~shell\n              yarn add @dittolive/ditto@","\n              ~~~\n              "])),n,n))),"rustsdk"===e&&(l.friendlyName="Rust",l.friendlyDescription="Rust 1.31 (2018 Edition)",l.installationSnippet=E.render((0,I.C)(c||(c=(0,y.Z)(["\n              ~~~toml\n              [dependencies.dittolive-ditto]\n              version = ","\n              ~~~\n              "])),n))),"bigpeer"===e&&(l.friendlyName="Big Peer",l.friendlyDescription="Cloud",l.installationSnippet=""),L[e].push(l)}))})))})),L);function N(e){var t=e.sdkInfos,n=e.title;return _.createElement("div",null,t.map((function(e,t){return _.createElement("div",{key:t,className:"margin-bottom--md"},_.createElement("h3",null,n," Version ",e.version," "),_.createElement("p",null,"Released: ",e.dateReleased),_.createElement("p",{className:""},"Release Notes:"),_.createElement("div",{dangerouslySetInnerHTML:{__html:e.description}}),e.installationSnippet.length>0&&_.createElement(_.Fragment,null,_.createElement("p",null,"Installation: "),_.createElement("div",{dangerouslySetInnerHTML:{__html:e.installationSnippet}})),e.apiReferenceDocsURL&&_.createElement("a",{role:"button",style:{color:"white",textDecoration:"none"},className:"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 text-white",href:e.apiReferenceDocsURL},"API Reference URL"))})))}function q(){(0,v.Z)().siteConfig;var e=Z;return _.createElement("div",{className:"prose prose-lg max-w-none"},_.createElement("div",{className:"col margin-vert--lg",style:{maxWidth:"800px"}},_.createElement(w.Z,{defaultValue:"swift",groupId:"framework",values:[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"ObjC",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"},{label:"Big Peer",value:"bigpeer"}]},_.createElement(D.Z,{value:"javascript"},_.createElement(N,{title:"JavaScript",sdkInfos:e.js})),_.createElement(D.Z,{value:"swift"},_.createElement(N,{title:"DittoSwift",sdkInfos:e.cocoa})),_.createElement(D.Z,{value:"objc"},_.createElement(N,{title:"DittoObjC",sdkInfos:e.cocoa})),_.createElement(D.Z,{value:"java"},_.createElement(N,{title:"Java Android",sdkInfos:e.android})),_.createElement(D.Z,{value:"kotlin"},_.createElement(N,{title:"Kotlin Android",sdkInfos:e.android})),_.createElement(D.Z,{value:"csharp"},_.createElement(N,{title:"C# / .NET",sdkInfos:e.dotnet})),_.createElement(D.Z,{value:"cpp"},_.createElement(N,{title:"C++ Linux / iOS",sdkInfos:e.cpp})),_.createElement(D.Z,{value:"rust"},_.createElement(N,{title:"Rust",sdkInfos:e.rustsdk})),_.createElement(D.Z,{value:"bigpeer"},_.createElement(N,{title:"Big Peer",sdkInfos:e.bigpeer})))))}function B(e){var t=e.framework,n=e.variant,o=Z[t][0],i="";switch(t){case"js":i=(0,I.C)(d||(d=(0,y.Z)(["\n        # using npm\n        npm install @dittolive/ditto@"," --save\n\n        # using yarn\n        yarn add @dittolive/ditto@","\n      "])),o.version,o.version);break;case"cocoa":"swift"===n&&(i=(0,I.C)(l||(l=(0,y.Z)(["\n        pod 'DittoSwift', '=","'\n      "])),o.version)),"objc"===n&&(i=(0,I.C)(p||(p=(0,y.Z)(["\n        pod 'DittoObjC', '=","'\n      "])),o.version));break;case"android":i=(0,I.C)(u||(u=(0,y.Z)(['\n      dependencies {\n        // ...\n        implementation "live.ditto:ditto:','"\n      }\n\n      android {\n        // ...\n\n        compileOptions {\n            sourceCompatibility JavaVersion.VERSION_1_8\n            targetCompatibility JavaVersion.VERSION_1_8\n        }\n      }\n      '])),o.version);case"dotnet":"package-manager"===n&&(i=(0,I.C)(h||(h=(0,y.Z)(["Install-Package Ditto -Version ",""])),o.version)),"cli"===n&&(i=(0,I.C)(f||(f=(0,y.Z)(["dotnet add package Ditto --version ",""])),o.version)),"package-reference"===n&&(i=(0,I.C)(m||(m=(0,y.Z)(['<PackageReference Include="Ditto" Version="','" />'])),o.version));break;case"cpp":i="curl -O https://software.ditto.live/cpp-"+n+"/Ditto/"+o.version+"/dist/Ditto.tar.gz && tar xvfz Ditto.tar.gz";break;case"rustsdk":i=(0,I.C)(g||(g=(0,y.Z)(['\n      [dependencies.dittolive-ditto]\n      version = "','"\n      '])),o.version)}return _.createElement(x.Z,null,i)}},98532:function(e,t,n){"use strict";n.d(t,{p:function(){return d},Z:function(){return l}});var o=n(67294),i=n(80944),r=JSON.parse('{"rust":{"remove-query":"let removed_ids = col_tx\\n    .find_with_args(\\"color == $args.color\\", json!({\\"color\\": \\"yellow\\"}))\\n    .remove()\\n    .unwrap();\\n\\n","evict":"let evicted_ids = collection\\n    .find_with_args(\\"$args.color == color\\", json!({\\"color\\": \\"red\\"}))\\n    .sort(vec![sort_param])\\n    .evict()\\n    .unwrap();\\n\\n","insert":"let id1 = collection\\n    .insert(json!({\\"some\\": \\"value\\"}), Some(&custom_id), false)\\n    .unwrap();\\n\\n","sync-basic":"let res = ditto.try_start_sync();\\n\\n","datamodel":"let store = ditto.store();\\nlet collection = store.collection(\\"people\\").unwrap();\\n\\n","upsert-id":"let doc_id = DocumentId::new(&\\"123abc\\".to_string()).unwrap();\\nlet person = json!({ // Person implements serde::Serialize\\n    \\"_id\\": doc_id,\\n    \\"name\\": \\"Susan\\".to_string(),\\n    \\"age\\": 31,\\n});\\ncollection.upsert(person).unwrap();\\n\\n","upsert":"let person = json!({\\n    \\"name\\": \\"Susan\\".to_string(),\\n    \\"age\\": 31,\\n});\\nlet collection = ditto.store().collection(\\"people\\").unwrap();\\nlet id = collection.upsert(person).unwrap();\\n\\n","remove-id":"collection.find_by_id(id).remove().unwrap();\\n\\n","upsert-composite-primary-key":"let collection = ditto.store().collection(\\"people\\").unwrap();\\nlet complex_id = PersonId {\\n    user_id: \\"456abc\\".to_string(),\\n    work_id: 789,\\n};\\nlet doc_id = DocumentId::new(&serde_json::json!(complex_id)).unwrap();\\nlet doc = json!({\\n    \\"_id\\": doc_id,\\n    \\"name\\": \\"Susan\\".to_string(),\\n    \\"age\\": 31,\\n});\\ncollection.upsert(doc).unwrap();\\n\\n","upsert-datatypes":"collection\\n    .upsert(json!({\\n      \\"boolean\\": true,\\n      \\"string\\": \\"Hello World\\",\\n      \\"number\\": 10,\\n      \\"map\\": {\\n        \\"key\\": \\"value\\"\\n      },\\n      \\"array\\": [1,2,3],\\n      \\"null\\": null,\\n    }))\\n    .unwrap();\\n\\n","upsert-default-data":"let default_id = DocumentId::new(&\\"123abc\\".to_string()).unwrap();\\nlet data = json!({ // Person implements serde::Serialize\\n    \\"_id\\": default_id,\\n    \\"name\\": \\"Susan\\".to_string(),\\n    \\"age\\": 31,\\n});\\ncollection\\n    .upsert_with_strategy(data, WriteStrategy::InsertDefaultIfAbsent)\\n    .unwrap();\\n\\n","attachment":"let store = ditto.store();\\nlet collection = store.collection(\\"foo\\")?;\\nlet attachment_file_path = images_dir.join(\\"image.png\\");\\nlet mut metadata = HashMap::new();\\nmetadata.insert(\\"some\\".to_owned(), \\"string\\".to_owned());\\nlet attachment =\\n    collection.new_attachment(attachment_file_path.to_str().unwrap(), metadata)?;\\nlet doc_id = DocumentId::new(&\\"123abc\\".to_string())?;\\nlet content = json!({\\"_id\\": doc_id, \\"some\\": \\"string\\", \\"my_attachment\\": attachment});\\nlet _ = collection.upsert(content)?;\\n// Later or on another peer ...\\nlet doc = collection.find_by_id(doc_id).exec()?;\\nlet attachment_token = doc.get::<DittoAttachmentToken>(\\"my_attachment\\")?;\\nlet (tx, rx) = channel();\\nlet m_tx = std::sync::Mutex::new(tx);\\nlet fetcher = collection.fetch_attachment(attachment_token, move |event| {\\n    // completion handler\\n    if let DittoAttachmentFetchEvent::Completed { attachment } = event {\\n        let tx = m_tx.lock().unwrap();\\n        tx.send(attachment).unwrap();\\n    }\\n})?;\\nlet fetched_attachment = rx.recv().unwrap(); // may also use an async version or other sync strategy\\nlet attachment_file_path = fetched_attachment.path();\\nstd::fs::read(attachment_file_path)?;\\n\\n","counter":"let collection = ditto.store().collection(\\"people\\").unwrap();\\nlet doc_id = collection\\n    .upsert(json!({\\"name\\": \\"Frank\\", \\"owned_cars\\": 0}))\\n    .unwrap();\\n\\ncollection\\n    .find_by_id(doc_id)\\n    .update(|x| {\\n        if let Some(doc) = x {\\n            doc.replace_with_counter(\\"owned_cars\\", false).unwrap();\\n            doc.increment(\\"owned_cars\\", 1.0).unwrap();\\n        }\\n    })\\n    .unwrap();\\n\\n","array":"let people = ditto.store().collection(\\"people\\").unwrap();\\nlet id = people\\n    .upsert(json!({\\"name\\": \\"Frank\\", \\"friends\\": []}))\\n    .unwrap();\\n\\npeople\\n    .find_by_id(id)\\n    .update(|opt_doc| {\\n        if let Some(doc) = opt_doc {\\n            doc.push(\\"friends\\", \\"Susan\\").unwrap();\\n        }\\n    })\\n    .unwrap();\\n\\n","update":"let collection = ditto.store().collection(\\"people\\").unwrap();\\nlet doc_id = collection\\n    .upsert(json!({\\"name\\": \\"Frank\\", \\"owned_cars\\": 0, \\"friends\\": []}))\\n    .unwrap();\\n\\ncollection\\n    .find_by_id(doc_id)\\n    .update(|opt_doc| {\\n        if let Some(doc) = opt_doc {\\n            doc.set(\\"age\\", 32).unwrap();\\n            doc.replace_with_counter(\\"owned_cars\\", false).unwrap();\\n            doc.increment(\\"owned_cars\\", 1.0).unwrap();\\n            doc.push(\\"friends\\", \\"Susan\\").unwrap();\\n        }\\n    })\\n    .unwrap();\\n\\n","query-basic":"collection\\n    .find(\\"favoriteBook.title == \\\\\'The Great Gatsby\\\\\'\\")\\n    .exec()?;\\n\\n","query-args":"let args = json!({\\"name\\": \\"Susan\\", \\"age\\": 32});\\ncollection\\n    .find_with_args(\\"name == $args.name && arg <= $args.age\\", args)\\n    .exec()?;\\n\\n","query-sort":"let sort_param = ffi_sdk::COrderByParam {\\n    query_c_str: c!(\\"miles\\"),\\n    direction: ffi_sdk::QuerySortDirection::Ascending,\\n};\\ncollection\\n    .find(\\"color == \\\\\'red\\\\\'\\")\\n    .sort(vec![sort_param])\\n    .exec()?;\\n\\n","query-limit":"let sort_param = ffi_sdk::COrderByParam {\\n    query_c_str: c!(\\"rank\\"),\\n    direction: ffi_sdk::QuerySortDirection::Ascending,\\n};\\ncollection\\n    .find(\\"color == \\\\\'red\\\\\'\\")\\n    .sort(vec![sort_param])\\n    .limit(100)\\n    .exec()?;\\n\\n","subscribe":"let store = ditto.store(); // Ditto must have a longer lifetime than all live queries\\nlet live_query = store\\n    .collection(\\"cars\\")?\\n    .find(\\"color == \\\\\'red\\\\\'\\")\\n    .subscribe();\\n\\n","sync-observe":"let store = ditto.store(); // Ditto must have a longer lifetime than all live queries\\nlet (tx, rx) = channel();\\n{\\n    let live_query = store.collection(\\"cars\\")?.find(\\"color == \\\\\'red\\\\\'\\").observe(\\n        move |mut docs: Vec<BoxedDocument>, event| {\\n            match event {\\n                LiveQueryEvent::Initial { .. } => { /* handle if appropriate */ }\\n                LiveQueryEvent::Update { mut insertions, .. } => {\\n                    insertions.sort_by(|a, b| b.cmp(a));\\n                    for idx in insertions.iter() {\\n                        let doc = docs.remove(*idx);\\n                        let _ = tx.send(doc).unwrap();\\n                    }\\n                }\\n            }\\n        },\\n    )?;\\n    store\\n        .collection(\\"cars\\")?\\n        .upsert(json!({\\"color\\": \\"red\\"}))\\n        .unwrap();\\n    for doc in rx.iter() {\\n        println!(\\"New doc {:?}\\", doc);\\n    }\\n} // IMPORTANT: LiveQuery goes out of scope and is Dropped and terminated here.\\n\\n","sync-observe-local":"// Some action in your app ...\\nlet store = ditto.store();\\nstore.collection(\\"cars\\")?.upsert(json!({\\"color\\": \\"red\\"}))?;\\n// Elsewhere register handlers for data changes\\n{\\n    let live_query = store\\n        .collection(\\"cars\\")?\\n        .find(\\"color == \\\\\'red\\\\\'\\")\\n        .observe_local(move |cars, event| {\\n            println!(\\"cars {:?}, event {:?}\\", cars, event);\\n            // do something when data changes\\n            // BUT this closure must be permitted to take ownership\\n        })?;\\n    // stash your live query in something with a long lifetime\\n    // or it will be dropped\\n}\\n\\n","shared-key":"// This is just an example. You should use OpenSSL to generate a unique shared key for every application.\\nlet p256_der_b64: &str = \\"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgFUUrOkOH52QN+Rr6uDSDsk4hUTcD1eW4mT0UnGGptFehRANCAATJ3fG8TVLQcDwUV18BJJI8efK0hQAjzB3VJeYOVbfOlqnfukVId0V25r/abxwjD3HfHuPsCGEiefzzmkMbjPo9\\";\\nlet app_id = AppId::from_env(\\"app\\")?;\\nlet ditto = Ditto::builder()\\n    .with_root(Arc::new(PersistentRoot::from_current_exe()?))\\n    .with_identity(|ditto_root| identity::SharedKey::new(ditto_root, app_id, p256_der_b64))?\\n    .with_minimum_log_level(CLogLevel::Info)\\n    .build()?;\\nditto.try_start_sync()?;\\n\\n","online-playground":"let ditto = Ditto::builder()\\n    // creates a `ditto_data` folder in the directory containing the executing process\\n    .with_root(Arc::new(PersistentRoot::from_current_exe()?))\\n    .with_identity(|ditto_root| {\\n        // Provided as an env var, may also be provided as hardcoded string\\n        let app_id = AppId::from_env(\\"00000000-0000-4000-0000-000000000000\\")?;\\n        let shared_token = std::env::var(\\"REPLACE_ME_WITH_A_SHARED_TOKEN\\").unwrap();\\n        let enable_cloud_sync = true;\\n        let custom_auth_url = None;\\n        OnlinePlaygroundV2::new(\\n            ditto_root,\\n            app_id,\\n            shared_token,\\n            enable_cloud_sync,\\n            custom_auth_url,\\n        )\\n    })?\\n    .build()?;\\n\\nditto.try_start_sync()?;\\n\\n","offline-playground":"let ditto = Ditto::builder()\\n    // creates a `ditto_data` folder in the directory containing the executing process\\n    .with_root(Arc::new(PersistentRoot::from_current_exe()?))\\n    .with_identity(|ditto_root| {\\n        // Provided as an env var, may also be provided as hardcoded string\\n        let app_id = AppId::from_env(\\"00000000-0000-4000-0000-000000000000\\")?;\\n        OfflinePlayground::new(ditto_root, app_id)\\n    })?\\n    .build()?;\\n\\nditto.try_start_sync()?;\\nlet res = ditto.set_offline_only_license_token(&license_token);\\n\\n","network-remote-ditto":"let mut config = TransportConfig::new(); // empty\\n\\nconfig\\n    .connect\\n    .tcp_servers\\n    .insert(\\"135.1.5.5:12345\\".to_string()); // Custom TCP Listener\\nconfig\\n    .connect\\n    .tcp_servers\\n    .insert(\\"185.1.5.5:12345\\".to_string()); // Custom TCP Listener\\nconfig\\n    .connect\\n    .websocket_urls\\n    .insert(\\"wss://example.com\\".to_string()); // Custom WS endpoint\\n\\nditto.set_transport_config(config);\\nditto.try_start_sync()?;\\n\\n","network-listen":"let mut config = TransportConfig::new(); // empty\\n\\nconfig.listen.tcp.enabled = true;\\nconfig.listen.tcp.interface_ip = \\"0.0.0.0\\".to_string();\\nconfig.listen.tcp.port = 4000;\\nconfig.listen.http.enabled = false;\\n\\nditto.set_transport_config(config);\\nditto.try_start_sync()?;\\n\\n","network-multiple-transports":"let mut config = TransportConfig::new(); // empty\\n\\n// 1. Enable auto-discovery of peer to peer connections\\nconfig.enable_all_peer_to_peer(); // Auto-connect via lan and bluetooth\\n\\n// 2. Configure TCP Listener\\nconfig.listen.tcp.enabled = true;\\nconfig.listen.tcp.interface_ip = \\"0.0.0.0\\".to_string();\\nconfig.listen.tcp.port = 4000;\\nconfig.listen.http.enabled = false;\\n\\n// 3. Configure explicit, hard coded connections\\nconfig\\n    .connect\\n    .tcp_servers\\n    .insert(\\"135.1.5.5:12345\\".to_string()); // Custom TCP Listener\\nconfig\\n    .connect\\n    .websocket_urls\\n    .insert(\\"wss://example.com\\".to_string()); // Custom WS endpoint\\n\\nditto.set_transport_config(config);\\nditto.try_start_sync()?;\\n\\n"},"objc":{"attachment":"NSBundle *testBundle = [NSBundle bundleForClass:self.class];\\nNSURL *attachmentTestImage = [testBundle URLForResource:@\\"attachment_test\\" withExtension:@\\"png\\"];\\nNSData *attachmentData = [NSData dataWithContentsOfURL:attachmentTestImage];\\n\\nNSDictionary<NSString *, NSString *> *metadata = @{@\\"name\\": @\\"my_image.png\\"};\\nDITAttachment *attachment = [collection newAttachment:attachmentTestImage.path metadata:metadata];\\n\\nDITDocumentID *docID = [collection upsert:@{@\\"some\\": @\\"string\\", @\\"my_attachment\\": attachment} error:nil];\\nDITDocument *doc = [[collection findByID:docID] exec];\\nDITAttachmentToken *attachmentToken = doc[@\\"my_attachment\\"].attachmentToken;\\n\\nDITAttachmentFetcher *fetcher = [collection fetchAttachment:attachmentToken onFetchEvent:^(DITAttachmentFetchEvent *event) {\\n    switch (event.type) {\\n        case DITAttachmentFetchEventTypeCompleted: {\\n            DITAttachmentFetchEventCompleted *completed = [event asCompleted];\\n            DITAttachment *fetchedAttachment = completed.attachment;\\n            NSData *fetchedAttachmentData = [fetchedAttachment getData:nil];\\n            XCTAssertEqualObjects(fetchedAttachmentData, attachmentData);\\n            XCTAssertEqualObjects(fetchedAttachment.metadata, metadata);\\n            [attachmentRoundtripExpectation fulfill];\\n            break;\\n        }\\n        case DITAttachmentFetchEventTypeProgress:\\n            break;\\n        default:\\n            XCTFail(@\\"Got an attachment fetch event of something other than completed or progress\\");\\n            break;\\n    }\\n}];\\n\\n\\n","counter":"[[collection find:@\\"make == \'Honda\'\\"] updateWithBlock:^(NSArray<DITMutableDocument *> *docs) {\\n    for (DITMutableDocument *doc in docs) {\\n        [doc[@\\"mileage\\"] replaceWithCounter];\\n        [doc[@\\"mileage\\"] increment:1];\\n    }\\n}];\\n\\n","datamodel":"DITCollection *collection = [store collection:@\\"people\\"];\\n\\n","upsert-id":"DITDocumentID *docId = [collection upsert:@{@\\"_id\\": @\\"123abc\\", @\\"name\\": @\\"Susan\\", @\\"age\\": @32 } error:nil];\\nNSLog(@\\"%@\\", docId); // => \\"123abc\\"\\n\\n","upsert":"DITDocumentID *docID = [[ditto.store collection:@\\"people\\"]\\n                         upsert:@{ @\\"name\\": @\\"Susan\\", @\\"age\\": @31 }\\n                         error:nil];\\n\\n","upsert-composite-primary-key":"DITDocumentID *docID = [[ditto.store collection:@\\"people\\"]\\n                upsert:@{\\n                  @\\"_id\\": @{ @\\"userId\\": @\\"456abc\\", @\\"workId\\": @789 },\\n                  @\\"name\\": @\\"John\\",\\n                  @\\"age\\": @31 }\\n                error:nil];\\nNSLog(@\\"%@\\", docID); // => \\"NSDictionary @{ @\\"userId\\": \\"456abc\\": @\\"workId\\": @789 }\\"\\n\\n","upsert-datatypes":"[[ditto.store collection:@\\"foo\\"]\\n    upsert:@{\\n        @\\"boolean\\": @true,\\n        @\\"string\\": @\\"Hello World\\",\\n        @\\"number\\": @10,\\n        @\\"map\\": @{ @\\"key\\": @\\"value\\" },\\n        @\\"array\\": @[ @1, @2, @3 ],\\n        @\\"null\\": [NSNull null]\\n    }\\n error:nil\\n];\\n\\n","upsert-default-data":"DITDocumentID *defaultDocID = [[ditto.store collection:@\\"people\\"]\\n                               upsert:@{ @\\"name\\": @\\"Susan\\", @\\"age\\": @31 }\\n                               writeStrategy: DITWriteStrategyInsertDefaultIfAbsent\\n                               error:nil];\\n\\n","query-basic":"NSArray *docs = [[[ditto.store collection:@\\"people\\"]\\n                    find:@\\"favoriteBook.title == \'The Great Gatsby\'\\"] exec];\\n\\n","query-args":"NSArray *documents = [[[ditto.store collection:@\\"people\\"] find:@\\"name == $args.name && age <= $args.age\\" withArgs:@{@\\"age\\": @32, @\\"name\\": @\\"Max\\"}] exec];\\n\\n","remove-query":"NSArray<DITDocumentID *> *removedIDs = [[[ditto.store collection:@\\"people\\"]\\n                                         find:@\\"name == \'Susan\'\\"] remove];\\n\\n","remove-id":"[[[ditto.store collection:@\\"test\\"] findByID:docID] remove];\\n\\n","array":"DITDocumentID *id = [[ditto.store collection:@\\"people\\"] upsert:@{\\n    @\\"name\\": @\\"Frank\\",\\n    @\\"friends\\": @[]\\n} error:nil];\\n\\n\\nDITCollection *people = [ditto.store collection:@\\"people\\"];\\n[[people findByID:id] updateWithBlock:^(DITMutableDocument *doc) {\\n    [doc[@\\"friends\\"] push:@\\"Susan\\"];\\n}];\\n\\n","update":"DITDocumentID *docID = [[ditto.store collection:@\\"people\\"] upsert:@{\\n    @\\"name\\": @\\"Frank\\",\\n    @\\"age\\": [NSNumber numberWithInt:31],\\n    @\\"ownedCars\\": [NSNumber numberWithInt:0],\\n    @\\"friends\\": @[]\\n} error:nil];\\n\\n\\nDITCollection *collection = [ditto.store collection:@\\"people\\"];\\n[[collection findByID:docID] updateWithBlock:^(DITMutableDocument *doc) {\\n    [doc[@\\"age\\"] set:[NSNumber numberWithInt:32]];\\n    [doc[@\\"ownedCars\\"] replaceWithCounter];\\n    [doc[@\\"ownedCars\\"] increment:1];\\n    [doc[@\\"friends\\"] push:@\\"Susan\\"];\\n}];\\n\\n","query-sort":"NSArray *sortedRedCars = [[[[ditto.store collection:@\\"cars\\"]\\n                  find:@\\"color == \'red\'\\"]\\n                  sort:@\\"miles\\" direction:DITSortDirectionAscending] exec];\\n\\n","query-limit":"NSArray *sortedAndLimitedRedCars = [[[[[ditto.store collection:@\\"cars\\"]\\n                  find:@\\"color == \'red\'\\"]\\n                  sort:@\\"miles\\" direction:DITSortDirectionAscending]\\n                  limit:100] exec];\\n\\n","sync-basic":"\\n    DITDitto *ditto = [TestHelpers makeDitto];\\n\\n    NSError *error = nil;\\n    [ditto tryStartSync:&error];\\n\\n","write-transaction":"NSArray *results = [store write:^(DITWriteTransaction *tx) {\\n    DITScopedWriteTransaction *cars = tx[@\\"cars\\"];\\n    DITScopedWriteTransaction *people = tx[@\\"people\\"];\\n    DITDocumentID *docID = [[DITDocumentID alloc] initWithValue: @\\"abc123\\"];\\n    [people upsert:@{@\\"_id\\": docID, @\\"name\\": @\\"Susan\\"} error:nil];\\n    [cars upsert:@{@\\"make\\": @\\"Ford\\", @\\"color\\": @\\"black\\", @\\"owner\\": docID} error:nil];\\n    [cars upsert:@{@\\"make\\": @\\"Toyota\\", @\\"color\\": @\\"red\\", @\\"owner\\": docID} error:nil];\\n}];\\n\\n","sync-observe":"\\nDITDitto *ditto = [TestHelpers makeDitto];\\n// Register live query to update UI\\nDITCollection *collection = [ditto.store collection:@\\"cars\\"];\\nDITLiveQuery *liveQuery = [[collection find:@\\"color == \'red\'\\"]\\n    observe:^(NSArray<DITDocument *> *docs, DITLiveQueryEvent *event) {\\n\\n}];\\n\\n","subscribe":"\\nDITDitto *ditto = [TestHelpers makeDitto];\\n// Register live query to update UI\\nDITCollection *collection = [ditto.store collection:@\\"cars\\"];\\nDITLiveQuery *liveQuery = [[collection find:@\\"color == \'red\'\\"] subscribe];\\n\\n","sync-observe-local":"\\nDITDitto *ditto = [TestHelpers makeDitto];\\n// Register live query to update UI\\nDITCollection *collection = [ditto.store collection:@\\"cars\\"];\\n\\nDITLiveQuery *liveQuery = [[collection find:@\\"color == \'red\'\\"]\\n    observeLocal:^(NSArray<DITDocument *> *docs, DITLiveQueryEvent *event) {\\n\\n}];\\n\\n","shared-key":"// This is just an example. You should use OpenSSL to generate a unique shared key for every application.\\nNSString *p256_der_b64 = @\\"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgFUUrOkOH52QN+Rr6uDSDsk4hUTcD1eW4mT0UnGGptFehRANCAATJ3fG8TVLQcDwUV18BJJI8efK0hQAjzB3VJeYOVbfOlqnfukVId0V25r/abxwjD3HfHuPsCGEiefzzmkMbjPo9\\";\\nDITIdentity *identity = [[DITIdentity alloc] initSharedKeyWithAppID:@\\"app\\" sharedKey:p256_der_b64 siteID:nil];\\nDITDitto *ditto = [[DITDitto alloc] initWithIdentity:identity];\\n\\n","online-playground":"// Replace the all-zero app ID with your own app ID\\nDITIdentity *identity = [[DITIdentity alloc] initOnlinePlaygroundV2WithAppID:@\\"00000000-0000-4000-0000-000000000000\\"\\n                                                                       token:@\\"REPLACE_ME_WITH_A_SHARED_TOKEN\\"];\\nDITDitto *ditto = [[DITDitto alloc] initWithIdentity:identity];\\nNSError *error = nil;\\n[ditto tryStartSync:&error];\\n\\n","offline-playground":"// Replace the all-zero app ID with your own app ID\\nDITIdentity *identity = [[DITIdentity alloc] initOfflinePlaygroundWithAppID:@\\"00000000-0000-4000-0000-000000000000\\"];\\nDITDitto *ditto = [[DITDitto alloc] initWithIdentity:identity];\\n[ditto setOfflineOnlyLicenseToken:validLicense error:nil];\\nNSError *error = nil;\\nif (![ditto setOfflineOnlyLicenseToken:validLicense error:&error]) {\\n  NSLog(@\\"Error setting license: %@\\", error);\\n}\\nif (![ditto tryStartSync:&error]) {\\n  NSLog(@\\"Error starting sync: %@\\", error);\\n}\\n[ditto tryStartSync:&error];\\n\\n","network-remote-ditto":"DITMutableTransportConfig *transportConfig = [[DITMutableTransportConfig alloc] init];\\n[transportConfig.connect.tcpServers addObject:@\\"135.1.5.5:12345\\"];\\n[transportConfig.connect.tcpServers addObject:@\\"185.1.5.5:12345\\"];\\n[ditto setTransportConfig:transportConfig];\\nNSError *err = nil;\\n[ditto tryStartSync:&err];\\n\\n","network-listen":"DITMutableTransportConfig *transportConfig = [[DITMutableTransportConfig alloc] init];\\n[transportConfig.listen.tcp setEnabled:true];\\n[transportConfig.listen.tcp setInterfaceIp:@\\"0.0.0.0\\"];\\n[transportConfig.listen.tcp setPort:4000];\\n[ditto setTransportConfig:transportConfig];\\nNSError *err = nil;\\n[ditto tryStartSync:&err];\\n\\n","network-multiple-transports":"DITMutableTransportConfig *transportConfig = [[DITMutableTransportConfig alloc] init];\\n// 1. Enable Local Area Network Connections\\n[transportConfig enableAllPeerToPeer];\\n// 2. Listen for incoming connections on port 4000\\n[transportConfig.listen.tcp setEnabled:true];\\n[transportConfig.listen.tcp setInterfaceIp:@\\"0.0.0.0\\"];\\n[transportConfig.listen.tcp setPort:4000];\\n// 3. Connect explicitly to remote devices\\n[transportConfig.connect.tcpServers addObject:@\\"135.1.5.5:12345\\"];\\n[transportConfig.connect.tcpServers addObject:@\\"185.1.5.5:12345\\"];\\n\\n[ditto setTransportConfig:transportConfig];\\nNSError *err = nil;\\n[ditto tryStartSync:&err];\\n\\n","network-monitor-conditions":"// Setting up inside a ViewController\\nDITIdentity *identity = [[DITIdentity alloc] initOnlinePlaygroundV2WithAppID:@\\"REPLACE_WITH_APP_ID\\" token:@\\"REPLACE_WITH_PLAYGROUND_TOKEN\\"];\\nDITDitto *ditto = [[DITDitto alloc] initWithIdentity:identity];\\nditto.delegate = self;\\n[ditto tryStartSync:nil];\\n \\n// Now you can observe real time changes to the transport conditions:\\n@interface ViewController () <DITDittoDelegate>\\n\\n@end\\n\\n@implementation ViewController\\n\\n- (void)transportConditionChanged:(enum DITTransportCondition)condition forSubsystem:(enum DITConditionSource)source {\\n    if (condition == DITTransportConditionBleDisabled) {\\n        NSLog(@\\"BLE disabled\\");\\n    } else if (condition == DITTransportConditionNoBleCentralPermission) {\\n        NSLog(@\\"Permission missing for BLE\\");\\n    } else if (condition == DITTransportConditionNoBlePeripheralPermission) {\\n        NSLog(@\\"Permission missing for BLE\\");\\n    }\\n}\\n\\n@end\\n\\n","evict":"NSArray<DITDocumentID *> *evictedIDs = [[collection find:@\\"make == \'Honda\'\\"] evict];\\n\\n"},"swift":{"shared-key":"// This is just an example. You should use OpenSSL to generate a unique shared key for every application.\\nlet p256DerB64 = \\"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgFUUrOkOH52QN+Rr6uDSDsk4hUTcD1eW4mT0UnGGptFehRANCAATJ3fG8TVLQcDwUV18BJJI8efK0hQAjzB3VJeYOVbfOlqnfukVId0V25r/abxwjD3HfHuPsCGEiefzzmkMbjPo9\\"\\nlet identity = DittoIdentity.sharedKey(appID: \\"app\\", sharedKey: p256DerB64)\\nDitto(identity: identity)\\n\\n","write-transaction":"ditto.store.write { transaction in\\n    let cars = transaction.scoped(toCollectionNamed: \\"cars\\")\\n    let people = transaction.scoped(toCollectionNamed: \\"people\\")\\n    let docId = \\"abc123\\"\\n    try! people.upsert([\\"_id\\": docId, \\"name\\": \\"Susan\\"])\\n    try! cars.upsert([\\"make\\": \\"Ford\\", \\"color\\": \\"red\\", \\"owner\\": docId])\\n    try! cars.upsert([\\"make\\": \\"Toyota\\", \\"color\\": \\"black\\", \\"owner\\": docId])\\n    people.findByID(docId).evict()\\n}\\n\\n","online-playground":"var ditto = Ditto(identity: DittoIdentity.onlinePlaygroundV2(\\n    // Replace the all-zero app ID with your own app ID\\n    appID: \\"00000000-0000-4000-0000-000000000000\\",\\n    token: \\"REPLACE_ME_WITH_A_SHARED_TOKEN\\"\\n))\\ntry! ditto.tryStartSync()\\n\\n","offline-playground":"var ditto = Ditto(identity: DittoIdentity.offlinePlayground(\\n    // Replace the all-zero app ID with your own app ID\\n    appID: \\"00000000-0000-4000-0000-000000000000\\"\\n))\\ntry! ditto.setOfflineOnlyLicenseToken(validLicense);\\ntry! ditto.tryStartSync()\\n\\n","datamodel":"let carsCollection = ditto.store[\\"cars\\"]\\n// or\\nlet carsCollection = ditto.store.collection(\\"cars\\")\\n\\n","attachment":"\\nlet collection = ditto.store[\\"foo\\"]\\n\\nlet myImageURL = bundle.url(forResource: \\"image\\", withExtension: \\"png\\")!\\n\\nlet metadata = [\\"name\\": \\"my_image.png\\"]\\nlet attachment = collection.newAttachment(\\n    path: myImageURL.path,\\n    metadata: metadata\\n)!\\n\\nlet docID = try! collection.upsert([\\"some\\": \\"string\\", \\"my_attachment\\": attachment])\\n\\n// Later, find the document and the fetch the attachment\\n\\nlet doc = collection.findByID(docID).exec()\\nlet attachmentToken = doc![\\"my_attachment\\"].attachmentToken!\\n\\nlet fetcher = collection.fetchAttachment(token: attachmentToken) { status in\\n    switch status {\\n    case .completed(let fetchedAttachment):\\n        // Do something with attachment\\n        break\\n    default:\\n        print(\\"Unable to fetch attachment\\")\\n        break\\n    }\\n}\\n\\n","upsert-default-data":"let docID = try! ditto.store[\\"people\\"].upsert([\\n    \\"name\\": \\"Susan\\",\\n    \\"age\\": 31\\n], writeStrategy: .insertDefaultIfAbsent)\\n\\n","upsert-composite-primary-key":"let docID = try! ditto.store[\\"people\\"].upsert([\\n    \\"_id\\": [ \\"userId\\": \\"456abc\\", \\"workId\\": 789 ],\\n    \\"name\\": \\"Susan\\",\\n    \\"age\\": 31\\n])\\nprint(docID) // \\"[ \\"userId\\": \\"456abc\\", \\"workId\\": 789 ]\\"\\n\\n","upsert-datatypes":"// Insert JSON-compatible data into Ditto\\ntry! ditto.store[\\"foo\\"].upsert([\\n    \\"boolean\\": true,\\n    \\"string\\": \\"Hello World\\",\\n    \\"number\\": 10,\\n    \\"map\\": [\\"key\\": \\"value\\"],\\n    \\"array\\": [1,2,3],\\n    \\"null\\": nil\\n])\\n\\n","counter":"let docId = try! ditto.store[\\"people\\"].upsert([\\n    \\"name\\": \\"Frank\\",\\n    \\"ownedCars\\": 0 // here 0 is a number\\n])\\n\\nditto.store[\\"people\\"].findByID(docId).update({ mutableDoc in\\n    mutableDoc?[\\"ownedCars\\"].replaceWithCounter()\\n    mutableDoc?[\\"ownedCars\\"].increment(amount: 1)\\n})\\n\\n","array":"let id = try! ditto.store[\\"people\\"].upsert([\\n    \\"name\\": \\"Frank\\",\\n    \\"friends\\": []\\n])\\n\\nditto.store[\\"people\\"].findByID(id).update({ mutableDoc in\\n    mutableDoc?[\\"friends\\"].push(\\"Susan\\")\\n})\\n\\n","update":"let docID = try! ditto.store[\\"people\\"].upsert([\\n    \\"name\\": \\"Frank\\",\\n    \\"age\\": 31,\\n    \\"ownedCars\\": 0,\\n    \\"friends\\": []\\n])\\n\\nditto.store[\\"people\\"].findByID(docID).update { mutableDoc in\\n    mutableDoc?[\\"age\\"] = 32\\n    mutableDoc?[\\"ownedCars\\"].replaceWithCounter()\\n    mutableDoc?[\\"ownedCars\\"].increment(amount: 1)\\n    mutableDoc?[\\"friends\\"].push(\\"Susan\\")\\n}\\n\\n","upsert":"// upsert JSON-compatible data into Ditto\\nlet docID = try! ditto.store[\\"people\\"].upsert([\\n    \\"name\\": \\"Susan\\",\\n    \\"age\\": 31\\n])\\n\\n","upsert-id":"// upsert JSON-compatible data into Ditto\\nlet docID = try! ditto.store[\\"people\\"].upsert([\\n    \\"_id\\": \\"abc123\\",\\n    \\"name\\": \\"Susan\\",\\n    \\"age\\": 31\\n])\\n\\n","query-basic":"let collection = ditto.store[\\"people\\"]\\n    .find(\\"favoriteBook.title == \'The Great Gatsby\'\\")\\n    .exec()\\n\\n","query-args":"let documents = ditto.store[\\"users\\"].find(\\"name == $args.name && age <= $args.age\\", args: [\\n    \\"age\\": 32,\\n    \\"name\\": \\"Max\\"\\n]).exec()\\n\\n","query-sort":"let sortedRedCars = ditto.store.collection(\\"cars\\")\\n    .find(\\"color == \'red\'\\")\\n    .sort(\\"miles\\", direction: .ascending)\\n    .exec()\\n\\n","query-limit":"let sortedAndLimitedRedCars = ditto.store.collection(\\"cars\\")\\n    .find(\\"color == \'red\'\\")\\n    .sort(\\"miles\\", direction: .ascending)\\n    .limit(100)\\n    .exec()\\n\\n","sync-observe-local":"// --- Action somewhere in your application\\nfunc userDidInsertCar() {\\n    _ = try! ditto.store.collection(\\"cars\\").upsert([\\n        \\"model\\": \\"Ford\\",\\n        \\"color\\": \\"black\\"\\n    ])\\n}\\n\\n// Register live query to update UI\\nlet liveQuery = ditto.store.collection(\\"cars\\").find(\\"color == \'red\'\\")\\n    .observeLocal { cars, event in\\n        // do something\\n    }\\n\\n","sync-observe":"// Register live query to update UI\\nlet example = ditto.store.collection(\\"cars\\").find(\\"color == \'red\'\\")\\n   .observe { cars, event in\\n     // do something\\n}\\n\\n","subscribe":"// Register live query to update UI\\nlet subscription = ditto.store.collection(\\"cars\\").find(\\"color == \'red\'\\").subscribe()\\n\\n","network-remote-ditto":"let config = DittoTransportConfig()\\n// Connect explicitly to a remote devices\\nconfig.connect.tcpServers.add(\\"135.1.5.5:12345\\")\\nconfig.connect.tcpServers.add(\\"185.1.5.5:12345\\")\\n\\nditto.setTransportConfig(config: config)\\n\\ndo {\\n  try ditto.tryStartSync()\\n} catch (let err) {\\n  print(err.localizedDescription)\\n}\\n\\n","network-listen":"let config = DittoTransportConfig()\\n\\n// Listen for incoming connections on port 4000\\nconfig.listen.tcp.isEnabled = true\\nconfig.listen.tcp.interfaceIp = \\"0.0.0.0\\"\\nconfig.listen.tcp.port = 4000\\n\\nditto.setTransportConfig(config: config)\\n\\ndo {\\n  try ditto.tryStartSync()\\n} catch (let err) {\\n  print(err.localizedDescription)\\n}\\n\\n","network-multiple-transports":"var config = DittoTransportConfig()\\n// 1. Enable All Peer to Peer Connections\\nconfig.enableAllPeerToPeer()\\n\\n// 2. Listen for incoming connections on port 4000\\nconfig.listen.tcp.isEnabled = true\\nconfig.listen.tcp.interfaceIp = \\"0.0.0.0\\"\\nconfig.listen.tcp.port = 4000\\n\\n// 3. Connect explicitly to remote devices\\nconfig.connect.tcpServers.add(\\"135.1.5.5:12345\\")\\nconfig.connect.tcpServers.add(\\"185.1.5.5:12345\\")\\n\\nditto.setTransportConfig(config: config)\\n\\ndo {\\n  try ditto.tryStartSync()\\n} catch (let err) {\\n  print(err.localizedDescription)\\n}\\n\\n","network-monitor-conditions":"// Setting up inside a ViewController\\nlet ditto = Ditto(identity: DittoIdentity.onlinePlaygroundV2(appID: \\"00000000-0000-4000-0000-000000000000\\", token: \\"REPLACE_ME_WITH_YOUR_PLAYGROUND_TOKEN\\"))\\nditto.delegate = self\\ntry! ditto.tryStartSync()\\n\\n// Now you can observe real time changes to the transport conditions:\\nextension ViewController: DittoDelegate {\\n   func transportConditionDidChange(transportID: Int64, condition: TransportCondition) {\\n       if condition == .BleDisabled {\\n           print(\\"BLE disabled\\")\\n       } else if condition == .NoBleCentralPermission {\\n           print(\\"Permission missing for BLE\\")\\n       } else if condition == .NoBlePeripheralPermission {\\n           print(\\"Permission missing for BLE\\")\\n       }\\n   }\\n\\n\\n","evict":"collection.find(\\"owner == \'Bob\'\\").evict()\\n\\n","remove-query":"collection.find(\\"owner == \'Bob\'\\").remove()\\n\\n","remove-id":"collection.findByID(docID).remove()\\n\\n","sync-basic":"try! ditto.tryStartSync()\\n\\n"},"cpp":{"sync-observe-local":"// --- Register live query to update UI\\nstd::shared_ptr<LiveQuery> query =\\n    collection.find(\\"color == \'red\'\\")\\n        .observe_local([&](std::vector<Document> docs, LiveQueryEvent event) {\\n\\n        });\\n\\n","datamodel":"Collection cars_collection = ditto.get_store().collection(\\"cars\\");\\n\\n","upsert-id":"json person = json({{\\"_id\\", \\"123abc\\"}, {\\"name\\", \\"Susan\\"}, {\\"age\\", 31}});\\nDocumentId doc_id = ditto.get_store().collection(\\"people\\").upsert(person);\\n\\n","upsert":"json person = json({{\\"name\\", \\"Susan\\"}, {\\"age\\", 31}});\\nDocumentId doc_id = ditto.get_store().collection(\\"people\\").upsert(person);\\n\\n","upsert-composite-primary-key":"json content = json({{\\"_id\\", {{\\"userId\\", \\"456abc\\"}, {\\"workId\\", 789}}},\\n                     {\\"name\\", \\"Susan\\"},\\n                     {\\"age\\", 31}});\\nDocumentId doc_ID = ditto.get_store().collection(\\"people\\").upsert(content);\\n\\n","upsert-datatypes":"// Insert JSON-compatible data into Ditto\\nditto.get_store().collection(\\"foo\\").upsert(json({{\\"boolean\\", true},\\n                                                 {\\"string\\", \\"Hello World\\"},\\n                                                 {\\"number\\", 10},\\n                                                 {\\"map\\", {{\\"key\\", \\"value\\"}}},\\n                                                 {\\"array\\", {1, 2, 3}},\\n                                                 {\\"null\\", NULL}}));\\n\\n","shared-key":"// This is just an example. You should use OpenSSL to generate a unique shared\\n// key for every application.\\nconst std::string p256_der_b64 =\\n    \\"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgFUUrOkOH52QN+Rr6uDSDsk4\\"\\n    \\"hUTcD1eW4mT0UnGGptFehRANCAATJ3fG8TVLQcDwUV18BJJI8efK0hQAjzB3VJeYOVbfOlq\\"\\n    \\"nfukVId0V25r/abxwjD3HfHuPsCGEiefzzmkMbjPo9\\";\\nDitto ditto = ditto::Ditto(Identity::SharedKey(\\"\\", p256_der_b64), path);\\n\\n","attachment":"auto attachment_file_path = fs::path(images_path.string() + \\"/image.png\\");\\nstd::map<std::string, std::string> metadata = {{\\"some\\", \\"string\\"}};\\n\\nAttachment attachment =\\n    collection.new_attachment(attachment_file_path.string(), metadata);\\n\\nauto doc_id =\\n    collection.upsert({{\\"some\\", \\"string\\"}, {\\"my_attachment\\", attachment}});\\n\\n// Later, find the document and the fetch the attachment\\nauto doc = collection.find_by_id(doc_id).exec();\\nauto att_token = (*doc)[\\"my_attachment\\"].get_attachment_token();\\n\\nauto fetcher = collection.fetch_attachment(\\n    att_token,\\n    AttachmentFetcherEventHandler{\\n        [&](std::unique_ptr<AttachmentFetchEvent> event) {\\n          switch (event->type) {\\n          case AttachmentFetchEventType::Completed: {\\n            AttachmentFetchEventCompleted *completed_event =\\n                static_cast<AttachmentFetchEventCompleted *>(event.get());\\n            Attachment fetched_attachment = completed_event->attachment;\\n            // Do something with attachment\\n            break;\\n          }\\n          default:\\n            std::cout << \\"Unable to fetch attachment\\" << std::endl;\\n          }\\n        }});\\n\\n","counter":"DocumentId docID = ditto.get_store().collection(\\"people\\").upsert(\\n    {{\\"name\\", \\"Frank\\"}, {\\"ownedCars\\", 0}});\\n\\nditto.get_store().collection(\\"people\\").find_by_id(docID).update(\\n    [](MutableDocument &doc) {\\n      doc[\\"ownedCars\\"].replace_with_counter();\\n      doc[\\"ownedCars\\"].increment(1);\\n    });\\n\\n","update":"DocumentId doc_id = ditto.get_store().collection(\\"people\\").upsert(\\n    {{\\"name\\", \\"Frank\\"}, {\\"age\\", 31}, {\\"ownedCars\\", 0}, {\\"friends\\", {}}});\\n\\nditto.get_store().collection(\\"people\\").find_by_id(doc_id).update(\\n    [](MutableDocument &doc) {\\n      doc[\\"age\\"].set(32);\\n      doc[\\"ownedCars\\"].replace_with_counter();\\n      doc[\\"ownedCars\\"].increment(1);\\n      doc[\\"friends\\"].push(\\"Susan\\");\\n    });\\n\\n","array":"DocumentId id = ditto.get_store().collection(\\"people\\").upsert(\\n    {{\\"name\\", \\"Frank\\"}, {\\"friends\\", {}}});\\n\\nditto.get_store().collection(\\"people\\").find_by_id(id).update(\\n    [](MutableDocument &doc) { doc[\\"friends\\"].push(\\"Susan\\"); });\\n\\n","remove-id":"ditto.get_store().collection(\\"people\\").find_by_id(doc_id).remove();\\n\\n","remove-query":"ditto.get_store().collection(\\"people\\").find(\\"age <= 32\\").remove();\\n\\n","evict":"ditto.get_store().collection(\\"people\\").find(\\"age <= 32\\").evict();\\n\\n","upsert-default-data":"DocumentId doc_id = ditto.get_store().collection(\\"people\\").upsert(\\n    content, WriteStrategy::insertDefaultIfAbsent);\\n\\n","query-basic":"std::vector<Document> results =\\n    ditto.get_store()\\n        .collection(\\"people\\")\\n        .find(\\"favoriteBook.title == \'The Great Gatsby\'\\")\\n        .exec();\\n\\n","query-args":"json args = json({{\\"age\\", 32}, {\\"name\\", \\"max\\"}});\\nstd::vector<Document> big_c_values =\\n    ditto.get_store()\\n        .collection(\\"people\\")\\n        .find(\\"name == $args.name && age <= $args.age\\", args)\\n        .exec();\\n\\n","query-sort":"std::vector<Document> sorted_red_cars =\\n    ditto.get_store()\\n        .collection(\\"cars\\")\\n        .find(\\"color == \'red\'\\")\\n        .sort(\\"miles\\", SortDirection::ascending)\\n        .exec();\\n\\n","query-limit":"std::vector<Document> sorted_and_limited_red_cars =\\n    ditto.get_store()\\n        .collection(\\"cars\\")\\n        .find(\\"color == \'red\'\\")\\n        .sort(\\"miles\\", SortDirection::ascending)\\n        .limit(100)\\n        .exec();\\n\\n","sync-basic":"try {\\n  ditto.try_start_sync();\\n} catch (const DittoError &err) {\\n  std::cerr << err.what();\\n}\\n\\n","subscribe":"ditto::Subscription subscription =\\n    collection.find(\\"color == \'red\'\\").subscribe();\\n\\n","sync-observe":"std::shared_ptr<LiveQuery> liveQuery =\\n    collection.find(\\"color == \'red\'\\")\\n        .observe([&](std::vector<Document> docs, LiveQueryEvent event) {\\n          // do something\\n        });\\n\\n","online-playground":"Ditto ditto;\\nauto identity =\\n    Identity::OnlinePlaygroundV2(\\"00000000-0000-4000-0000-000000000000\\",\\n                                 \\"REPLACE_ME_WITH_YOUR_PLAYGROUND_TOKEN\\");\\ntry {\\n  ditto = Ditto(identity, dir);\\n  ditto.try_start_sync();\\n} catch (const DittoError &err) {\\n}\\n\\n","offline-playground":"Ditto ditto;\\nauto identity =\\n    Identity::OfflinePlayground(\\"00000000-0000-4000-0000-000000000000\\");\\ntry {\\n  ditto = Ditto(identity, dir);\\n\\n  ditto.set_offline_only_license_token(valid_license);\\n  ditto.try_start_sync();\\n} catch (const DittoError &err) {\\n}\\n\\n","network-remote-ditto":"auto config = ditto::TransportConfig();\\n// Connect explicitly to remote devices\\nconfig.connect.tcp_servers.insert(\\"135.1.5.5:12345\\");\\nconfig.connect.tcp_servers.insert(\\"185.1.5.5:12345\\");\\n\\n// set the transport config\\nditto.set_transport_config(config);\\n// now you can start ditto\'s sync\\nditto.try_start_sync();\\n\\n","network-listen":"auto config = ditto::TransportConfig();\\n\\nconfig.listen.tcp.enabled = true;\\nconfig.listen.http.enabled = false;\\nconfig.listen.tcp.interface_ip = \\"0.0.0.0\\";\\nconfig.listen.tcp.port = 4000;\\n\\nditto.set_transport_config(config);\\nditto.try_start_sync();\\n\\n","network-multiple-transports":"auto config = ditto::TransportConfig();\\n// 1. Enable All Peer to Peer Connections\\nconfig.enable_all_peer_to_peer();\\n\\n// 2. Listen for incoming connections on port 4000\\nconfig.listen.tcp.enabled = true;\\nconfig.listen.http.enabled = false;\\nconfig.listen.tcp.interface_ip = \\"0.0.0.0\\";\\nconfig.listen.tcp.port = 4000;\\n\\n// 3. Connect explicitly to remote devices\\nconfig.connect.tcp_servers.insert(\\"135.1.5.5:12345\\");\\nconfig.connect.tcp_servers.insert(\\"185.1.5.5:12345\\");\\n\\nditto.set_transport_config(config);\\nditto.try_start_sync();\\n\\n"},"http":{"upsert-composite-primary-key":"curl -X POST \'https://<CLOUD_ENDPOINT>/api/v1/store\' \\\\\\n  --header \'X-DITTO-CLIENT-ID: AAAAAAAAAAAAAAAAAAAABQ==\' \\\\\\n  --header \'Content-Type: application/json\' \\\\\\n  --data-raw \'{\\n    \\"method\\": \\"write\\",\\n    \\"parameters\\": {\\n      \\"commands\\": [{\\n        \\"method\\": \\"upsert\\",\\n        \\"collection\\": \\"people\\",\\n        \\"value\\": {\\n          \\"_id\\": { \\n            \\"user_id\\": \\"456abc\\",\\n            \\"work_id\\": 789\\n            },\\n          \\"name\\": \\"Susan\\", \\n          \\"age\\": 31\\n        }\\n      }]\\n    }\\n  }\'\\n\\n","upsert":"curl -X POST \'https://<CLOUD_ENDPOINT>/api/v1/store\' \\\\\\n  --header \'X-DITTO-CLIENT-ID: AAAAAAAAAAAAAAAAAAAABQ==\' \\\\\\n  --header \'Content-Type: application/json\' \\\\\\n  --data-raw \'{\\n    \\"method\\": \\"write\\",\\n    \\"parameters\\": {\\n      \\"commands\\": [{\\n        \\"method\\": \\"upsert\\",\\n        \\"collection\\": \\"people\\",\\n        \\"value\\": {\\n          \\"name\\": \\"Susan\\", \\"age\\": 31\\n        }\\n      }]\\n    }\\n  }\'\\n\\n","upsert-id":"curl -X POST \'https://<CLOUD_ENDPOINT>/api/v1/store\' \\\\\\n  --header \'X-DITTO-CLIENT-ID: AAAAAAAAAAAAAAAAAAAABQ==\' \\\\\\n  --header \'Content-Type: application/json\' \\\\\\n  --data-raw \'{\\n    \\"method\\": \\"write\\",\\n    \\"parameters\\": {\\n      \\"commands\\": [{\\n        \\"method\\": \\"upsert\\",\\n        \\"collection\\": \\"people\\",\\n        \\"value\\": {\\n          \\"_id\\": \\"456abc\\",\\n          \\"name\\": \\"Susan\\", \\n          \\"age\\": 31\\n        }\\n      }]\\n    }\\n  }\'\\n\\n","upsert-datatypes":"curl -X POST \'https://<CLOUD_ENDPOINT>/api/v1/store\' \\\\\\n  --header \'X-DITTO-CLIENT-ID: AAAAAAAAAAAAAAAAAAAABQ==\' \\\\\\n  --header \'Content-Type: application/json\' \\\\\\n  --data-raw \'{\\n    \\"method\\": \\"write\\",\\n    \\"parameters\\": {\\n      \\"commands\\": [{\\n        \\"method\\": \\"upsert\\",\\n        \\"collection\\": \\"people\\",\\n        \\"value\\": {\\n          \\"_id\\": \\"456abc\\",\\n          \\"boolean\\": true, \\n          \\"string\\": \\"Hello World\\",\\n          \\"number\\": 10,\\n          \\"map\\": {\\n            \\"key\\": \\"value\\",\\n          },\\n          \\"array\\": [1,2,3],\\n          \\"null\\": null\\n        }\\n      }]\\n    }\\n  }\'\\n\\n","update":"curl -X POST \'https://<CLOUD_ENDPOINT>/api/v1/store\' \\\\\\n  --header \'X-DITTO-CLIENT-ID: AAAAAAAAAAAAAAAAAAAABQ==\' \\\\\\n  --header \'Content-Type: application/json\' \\\\\\n  --data-raw \'{\\n    \\"method\\": \\"write\\",\\n    \\"parameters\\": {\\n      \\"commands\\": [{\\n        \\"method\\": \\"upsert\\",\\n        \\"collection\\": \\"people\\",\\n        \\"value\\": {\\n          \\"_id\\": \\"123abc\\",\\n          \\"name\\": \\"Frank\\", \\n          \\"age\\": 32,\\n          \\"friends\\": [\\"Susan\\"],\\n          \\"owned_cars\\": 0\\n        }\\n      }]\\n    }\\n  }\'\\n\\n","query-basic":"curl -X POST \'https://<CLOUD_ENDPOINT>/api/v1/store\' \\\\\\n--header \'X-DITTO-CLIENT-ID: AAAAAAAAAAAAAAAAAAAABQ==\' \\\\\\n--header \'Content-Type: application/json\' \\\\\\n--data-raw \'{\\n    \\"method\\": \\"find\\",\\n    \\"parameters\\": {\\n      \\"collection\\": \\"people\\",\\n      \\"query\\": \\"favoriteBook.title == \'The Great Gatsby\'\\"\\n    }\\n  }\'\\n\\n","query-args":"curl -X POST \'https://<CLOUD_ENDPOINT>/api/v1/store\' \\\\\\n--header \'X-DITTO-CLIENT-ID: AAAAAAAAAAAAAAAAAAAABQ==\' \\\\\\n--header \'Content-Type: application/json\' \\\\\\n--data-raw \'{\\n    \\"method\\": \\"find\\",\\n    \\"parameters\\": {\\n      \\"args\\": {\\n        \\"name\\": \\"max\\",\\n        \\"age\\": 32\\n      },\\n      \\"collection\\": \\"people\\",\\n      \\"query\\": \\"name == $args.name && age <= $args.age\\"\\n    }\\n  }\'\\n\\n","query-limit":"curl -X POST \'https://<CLOUD_ENDPOINT>/api/v1/store\' \\\\\\n  --header \'X-DITTO-CLIENT-ID: AAAAAAAAAAAAAAAAAAAABQ==\' \\\\\\n  --header \'Content-Type: application/json\' \\\\\\n  --data-raw \'{\\n    \\"method\\": \\"find\\",\\n    \\"parameters\\": {\\n      \\"collection\\": \\"people\\",\\n      \\"query\\": \\"color == \'red\'\\",\\n      \\"limit\\": 100\\n    }\\n  }\'\\n\\n","remove-id":"curl -X DELETE \'https://<CLOUD_ENDPOINT>/api/v1/collections/people/documents/<doc_id>\' \\\\\\n  --header \'X-DITTO-CLIENT-ID: AAAAAAAAAAAAAAAAAAAABQ==\' \\\\\\n  --header \'Content-Type: application/json\' \\n\\n"},"javascript":{"online-playground":"import { init, Ditto } from \\"@dittolive/ditto\\"\\n(async () => {\\n  await init() // you need to call this at least once before using any of the Ditto API\\nconst identity: Identity = { type: \'onlinePlaygroundV2\', appID: \'00000000-0000-4000-0000-000000000000\', token: \'REPLACE_ME_WITH_YOUR_PLAYGROUND_TOKEN\' }\\nconst ditto = new Ditto(identity, path)\\nditto.tryStartSync()\\n})()\\n\\n","offline-playground":"const identity: Identity = { type: \'offlinePlayground\', appID: \'00000000-0000-4000-0000-000000000000\' }\\nconst ditto = new Ditto(identity, path)\\nditto.setOfflineOnlyLicenseToken(validLicense)\\nditto.tryStartSync()\\n\\n","datamodel":"const carsCollection = ditto.store.collection(\'cars\')\\n\\n","upsert-id":"const docId = await ditto.store.collection(\'people\').upsert({\\n  _id: \'123abc\',\\n  name: \'Susan\',\\n  age: 31,\\n})\\n\\nconsole.log(docId) // \\"123abc\\"\\n\\n","upsert":"const docId = await ditto.store.collection(\'people\').upsert({\\n  name: \'Susan\',\\n  age: 31,\\n})\\nconsole.log(docId) // \\"507f191e810c19729de860ea\\"\\n\\n","upsert-datatypes":"// Insert JSON-compatible data into Ditto\\nawait ditto.store.collection(\'people\').upsert({\\n  boolean: true,\\n  string: \'Hello World\',\\n  number: 10,\\n  map: { key: \'value\' },\\n  array: [],\\n  null: null,\\n})\\n\\n","counter":"const frankId = await ditto.store.collection(\'people\').upsert({\\n  name: \'Frank\',\\n  ownedCars: 0, // here 0 is a number\\n})\\n\\nawait ditto.store\\n  .collection(\'people\')\\n  .findByID(frankId)\\n  .update((mutableDoc) => {\\n    mutableDoc._replaceWithCounterAt(\'ownedCars\')\\n    mutableDoc._incrementCounterAt(\'ownedCars\', 1)\\n  })\\n\\n","upsert-default-data":"const docId = await ditto.store.collection(\'people\').upsert(\\n  {\\n    name: \'Susan\',\\n    age: 31,\\n  },\\n  { writeStrategy: \'insertDefaultIfAbsent\' },\\n)\\n\\n","upsert-composite-primary-key":"const docId = await ditto.store.collection(\'people\').upsert({\\n  _id: { userId: \'456abc\', workId: 789 },\\n  name: \'Susan\',\\n  age: 31,\\n})\\nconsole.log(docId) // \\"{ \\"userId\\": \\"456abc\\", \\"workId\\": 789 }\\"\\n\\n","array":"const id = await ditto.store.collection(\'people\').upsert({\\n  name: \'Frank\',\\n  friends: [],\\n})\\n\\nawait ditto.store\\n  .collection(\'people\')\\n  .findByID(id)\\n  .update((mutableDoc) => {\\n    mutableDoc[\'friends\'].push(\'Susan\')\\n  })\\n\\n","update":"const docID = await ditto.store.collection(\'people\').upsert({\\n  name: \'Frank\',\\n  age: 31,\\n  ownedCars: 0,\\n  friends: [],\\n})\\n\\nawait ditto.store\\n  .collection(\'people\')\\n  .findByID(docID)\\n  .update((mutableDoc) => {\\n    mutableDoc[\'age\'] = 32\\n    mutableDoc[\'friends\'].push(\'Susan\')\\n\\n    mutableDoc._replaceWithCounterAt(\'ownedCars\')\\n    mutableDoc._incrementCounterAt(\'ownedCars\', 1)\\n  })\\n\\n","query-basic":"const collection = await ditto.store.collection(\'people\').find(\\"favoriteBook.title == \'The Great Gatsby\'\\")\\n\\n","remove-id":"await ditto.store.collection(\'people\').findByID(docId).remove()\\n\\n","query-args":"const query = \'name == $args.name && age <= $args.age\'\\nconst documents = await ditto.store.collection(\'people\').find(query, {\\n  age: 32,\\n  name: \'Max\',\\n})\\n\\n","remove-query":"await ditto.store.collection(\'people\').find(\'age <= 32\').remove()\\n\\n","query-sort":"const sortedRedCars = await ditto.store.collection(\'cars\').find(\\"color == \'red\'\\").sort(\'miles\', \'ascending\')\\n\\n","query-limit":"const sortedAndLimitedRedCars = await ditto.store.collection(\'cars\').find(\\"color == \'red\'\\").sort(\'miles\', \'ascending\').limit(100)\\n\\n","evict":"await ditto.store.collection(\'people\').find(\'age <= 32\').evict()\\n\\n","sync-basic":"try {\\n  ditto.tryStartSync()\\n} catch (err) {\\n  console.error(err)\\n}\\n\\n","sync-observe":"const liveQuery = ditto.store\\n  .collection(\'cars\')\\n  .find(\\"color == \'red\'\\")\\n  .observe((cars, event) => {\\n    // do something\\n  })\\n\\n","subscribe":"const subscription = ditto.store.collection(\'cars\').find(\\"color == \'red\'\\").subscribe()\\n\\n","sync-observe-local":"const liveQuery = ditto.store\\n  .collection(\'cars\')\\n  .find(\\"color == \'red\'\\")\\n  .observeLocal((cars, event) => {\\n    // do something\\n  })\\n\\n","attachment":"const collection = ditto.store.collection(\'foo\')\\n\\nconst myImageBase64 = \'iVBORw0KGgoAAAANSUhEUgAAAQAAAAEAAQMAAABmvDolAAAAA1BMVEW10NBjBBbqAAAAH0lEQVRoge3BAQ0AAADCoPdPbQ43oAAAAAAAAAAAvg0hAAABmmDh1QAAAABJRU5ErkJggg==\'\\nconst myImageBytes = Uint8Array.from(myImageBase64, (character) => character.charCodeAt(0))\\nconst metadata = { name: \'image.png\' }\\n\\n// On Node, you can also pass a file path (string) instead of image data\\n// and the attachment will be created from that file.\\nconst attachment = await collection.newAttachment(myImageBytes, metadata)\\n\\nconst docID = await collection.upsert({ some: \'string\', my_attachment: attachment })\\n\\n// Later, find the document and then fetch the attachment\\n\\nconst doc = await collection.findByID(docID)\\nconst attachmentToken = doc.my_attachment\\n\\nconst attachmentFetcher = collection.fetchAttachment(attachmentToken, async (attachmentFetchEvent) => {\\n  switch (attachmentFetchEvent.type) {\\n    case \'Completed\':\\n      const fetchedAttachment = attachmentFetchEvent.attachment\\n      // Do something with attachment\\n      break\\n\\n    default:\\n      console.log(\'Unable to fetch attachment\')\\n      break\\n  }\\n})\\n\\n// There is also a more convenient way of fetching the attachment\\n// (AttachmentFetcher implements the `PromiseLike` protocol):\\nconst fetchedAttachment = await collection.fetchAttachment(attachmentToken)\\n// Do something with attachment\\n\\n","network-remote-ditto":"\\n      import { TransportConfig } from \'@dittolive/ditto\'\\n\\n      const config = new TransportConfig()\\n      config.connect.websocketURLs.push(\'wss://135.1.5.5:12345\')\\n      config.connect.websocketURLs.push(\'wss://185.1.5.5:12345\')\\n      ditto.setTransportConfig(config)\\n      ditto.tryStartSync()\\n\\n\\n","network-monitor-conditions":"const transportConditionsObserver = ditto.observeTransportConditions((condition, source) => {\\n  if (condition === \'BLEDisabled\') {\\n    console.log(\'BLE disabled\')\\n  } else if (condition === \'NoBLECentralPermission\') {\\n    console.log(\'Permission missing for BLE\')\\n  } else if (condition === \'NoBLEPeripheralPermission\') {\\n    console.log(\'Permissions missing for BLE\')\\n  }\\n})\\n\\n","network-multiple-transports":"import { TransportConfig } from \'@dittolive/ditto\'\\n\\nconst config = new TransportConfig()\\n// 1. Enable All Peer to Peer Connections (not in a browser environment)\\nconfig.setAllPeerToPeerEnabled(true)\\n\\n// 2. Listen for incoming connections on port 4000\\nconfig.listen.tcp.isEnabled = true\\nconfig.listen.tcp.interfaceIP = \'0.0.0.0\'\\nconfig.listen.tcp.port = 4000\\n\\n// 3. Connect explicitly to remote devices\\nditto.setTransportConfig(config)\\nditto.tryStartSync()\\n\\n","network-listen":"import { TransportConfig } from \'@dittolive/ditto\'\\n\\nconst config = new TransportConfig()\\nconfig.listen.tcp.isEnabled = true\\nconfig.listen.tcp.interfaceIP = \'0.0.0.0\'\\nconfig.listen.tcp.port = 4000\\nditto.setTransportConfig(config)\\nditto.tryStartSync()\\n\\n"},"csharp":{"sync-basic":"try\\n{\\n    onlineDitto.TryStartSync();\\n}\\ncatch (DittoException ex)\\n{\\n    // handle exception\\n}\\n\\n","remove-query":"ditto.Store.Collection(\\"people\\").Find(\\"age <= 32\\").Remove();\\n\\n","remove-id":"var wasRemoved = coll.FindById(docID).Remove();\\n\\n","counter":"var results = coll.FindById(docID).Update(mutableDoc =>\\n{\\n    mutableDoc[\\"color\\"].Set(\\"yellow\\");\\n    mutableDoc[\\"mileage\\"].ReplaceWithCounter();\\n    mutableDoc[\\"mileage\\"].Increment(99);\\n});\\n\\n","array":"var content = new Dictionary<string, object>\\n{\\n    { \\"name\\", \\"Bob\\" },\\n    { \\"friends\\", new List<object>() }\\n};\\n\\nvar docId = Ditto.Store.Collection(\\"people\\").Upsert(content);\\nDitto.Store.Collection(\\"people\\").FindById(docId).Update(mutableDoc =>\\n{\\n    mutableDoc[\\"friends\\"].Push(\\"Susan\\");\\n});\\n\\n","update":"var content = new Dictionary<string, object>\\n{\\n    { \\"name\\", \\"Bob\\" },\\n    { \\"age\\", 40 },\\n    { \\"ownedCars\\", 0 },\\n    { \\"friends\\", new List<object>() }\\n};\\n\\nvar docId = Ditto.Store.Collection(\\"people\\").Upsert(content);\\nDitto.Store.Collection(\\"people\\").FindById(docId).Update(mutableDoc =>\\n{\\n    mutableDoc[\\"age\\"].Set(32);\\n    mutableDoc[\\"ownedCars\\"].ReplaceWithCounter();\\n    mutableDoc[\\"ownedCars\\"].Increment(1);\\n    mutableDoc[\\"friends\\"].Push(\\"Susan\\");\\n});\\n\\n","evict":"Ditto.Store.Collection(\\"people\\").Find(\\"age <= 32\\").Evict();\\n\\n","attachment":"string attachmentImagePath = Path.Combine(Directory.GetCurrentDirectory(), \\"attachment_test.png\\");\\n\\nvar originalBytes = File.ReadAllBytes(attachmentImagePath);\\n\\nvar metadata = new Dictionary<string, string> { { \\"name\\", \\"my_image.png\\" } };\\nvar attachment = coll.NewAttachment(attachmentImagePath, metadata);\\n\\nvar docId = coll.Upsert(new Dictionary<string, object> { { \\"some\\", \\"string\\" }, { \\"my_attachment\\", attachment } });\\n\\nvar doc = coll.FindById(docId).Exec();\\nvar attachmentToken = doc[\\"my_attachment\\"].AttachmentToken;\\nusing var fetcher = coll.FetchAttachment(attachmentToken, ev =>\\n{\\n    switch (ev)\\n    {\\n        case DittoAttachmentFetchEvent.Completed e:\\n            // Do something with attachment\\n            break;\\n        default:\\n            Console.WriteLine(\\"Unable to fetch attachment\\");\\n            break;\\n    }\\n});\\n\\n","upsert-composite-primary-key":"// Insert JSON-compatible data into Ditto\\nvar content = new Dictionary<string, object> {\\n    { \\"_id\\", new Dictionary<string, object> {{ \\"userId\\", \\"456abc\\" }, { \\"workId\\", 789 }} },\\n    { \\"name\\", \\"Susan\\" },\\n    { \\"age\\", 31 }\\n};\\nvar docId = ditto.Store.Collection(\\"people\\").Upsert(content);\\n\\n","upsert-default-data":"// Immediately try and insert some new default data\\nvar docId = coll.Upsert(\\n    new Dictionary<string, object> { { \\"name\\", \\"Susan\\" } },\\n    DittoWriteStrategy.InsertDefaultIfAbsent);\\n\\n","datamodel":"var coll = ditto.Store.Collection(\\"people\\");\\n\\n","upsert":"var docId = ditto.Store.Collection(\\"people\\").Upsert(\\n    new Dictionary<string, object> {\\n    { \\"name\\", \\"Susan\\" },\\n    { \\"age\\", 31 },\\n    }\\n);\\n\\n","upsert-id":"var returnedId = ditto.Store.Collection(\\"people\\").Upsert(\\n    new Dictionary<string, object> {\\n        { \\"_id\\", \\"123abc\\" },\\n        { \\"name\\", \\"Joe\\" },\\n        { \\"age\\", 32 },\\n        { \\"isOnline\\", true }\\n    }\\n);\\n\\n","upsert-datatypes":"// Insert JSON-compatible data into Ditto\\nvar content = new Dictionary<string, object>\\n{\\n    { \\"boolean\\", true },\\n    { \\"string\\", \\"Hello World\\" },\\n    { \\"number\\", 10 },\\n    { \\"map\\", new Dictionary<string, string>{{ \\"key\\", \\"value\\"}} },\\n    { \\"array\\", new[] {1, 2, 3} },\\n    { \\"null\\", null }\\n};\\nDitto.Store.Collection(\\"foo\\").Upsert(content);\\n\\n","online-playground":"try\\n{\\n    var ditto = new Ditto(DittoIdentity.OnlinePlaygroundV2(\\"00000000-0000-4000-0000-000000000000\\", \\"REPLACE_ME_WITH_YOUR_PLAYGROUND_TOKEN\\"), path);\\n    ditto.TryStartSync();\\n}\\ncatch (DittoException ex)\\n{\\n    Console.WriteLine($\\"Ditto Error {ex.Message}\\");\\n}\\n\\n","offline-playground":"try\\n{\\n    var ditto = new Ditto(DittoIdentity.OfflinePlayground(\\"00000000-0000-4000-0000-000000000000\\"), path);\\n    ditto.TryStartSync();\\n    ditto.SetOfflineOnlyLicenseToken(validLicense);\\n}\\ncatch (DittoException ex)\\n{\\n    System.Console.WriteLine($\\"Ditto Error {ex.Message}\\");\\n}\\n\\n","shared-key":"// This is just an example. You should use OpenSSL to generate a unique shared key for every application.\\nstring p256DerB64 = \\"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgFUUrOkOH52QN+Rr6uDSDsk4hUTcD1eW4mT0UnGGptFehRANCAATJ3fG8TVLQcDwUV18BJJI8efK0hQAjzB3VJeYOVbfOlqnfukVId0V25r/abxwjD3HfHuPsCGEiefzzmkMbjPo9\\";\\nvar identity = DittoIdentity.SharedKey(\\"app\\", p256DerB64);\\nDitto ditto = new Ditto(identity);\\n\\n","query-basic":"var results = ditto.Store.Collection(\\"people\\")\\n    .Find(\\"favoriteBook.title == \'The Great Gatsby\'\\")\\n    .Exec();\\n\\n","query-args":"var docs = ditto.Store\\n    .Collection(\\"users\\")\\n    .Find(\\n        \\"name == $args.name && age <= $args.age\\",\\n        new Dictionary<string, object> { { \\"name\\", \\"max\\" }, { \\"age\\", 32 } })\\n    .Exec();\\n\\n","query-sort":"var sortedCars = ditto.Store.Collection(\\"cars\\")\\n    .Find(\\"color == \'red\'\\")\\n    .Sort(\\"miles\\", direction: DittoSortDirection.Ascending)\\n    .Exec();\\n\\n","query-limit":"var sortedAndLimitedRedCars = ditto.Store.Collection(\\"cars\\")\\n    .Find(\\"color == \'red\'\\")\\n    .Sort(\\"miles\\", direction: DittoSortDirection.Ascending)\\n    .Limit(100).Exec();\\n\\n","subscribe":"// --- Register live query to update UI\\nvar subscription = ditto.Store.Collection(\\"cars\\").Find(\\"color == \'red\'\\")\\n    .Subscribe();\\n\\n","sync-observe":"// --- Register live query to update UI\\nvar liveQuery = ditto.Store.Collection(\\"cars\\").Find(\\"color == \'red\'\\")\\n    .Observe((docs, dittoLiveQueryEvent) =>\\n{\\n    // Do something...\\n});\\n\\n// --- Register live query to update UI\\nvar localLiveQuery = ditto.Store.Collection(\\"cars\\").Find(\\"color == \'red\'\\").ObserveLocal((docs, dittoLiveQueryEvent) =>\\n{\\n    // Do something...\\n});\\n\\n","sync-observe-local":"// --- Register live query to update UI\\nvar localLiveQuery = ditto.Store.Collection(\\"cars\\").Find(\\"color == \'red\'\\")\\n    .ObserveLocal((docs, dittoLiveQueryEvent) =>\\n{\\n    // Do something...\\n});\\n\\n","network-remote-ditto":"DittoTransportConfig transportConfig = new DittoTransportConfig();\\n// Connect explicitly to a remote device on\\ntransportConfig.Connect.TcpServers.Add(\\"135.1.5.5:12345\\");\\n// you can add as many TcpServers as you would like.\\ntransportConfig.Connect.TcpServers.Add(\\"185.1.5.5:4567\\");\\n// set the transport config\\nDitto.SetTransportConfig(transportConfig);\\n// now you can start ditto\'s sync\\nDitto.TryStartSync();\\n\\n","network-listen":"DittoTransportConfig transportConfig = new DittoTransportConfig();\\ntransportConfig.Listen.Tcp = new DittoTcpListenConfig();\\n// By default Listen.Tcp.Enabled is false, be sure to set it to true.\\ntransportConfig.Listen.Tcp.Enabled = true;\\n// if you want to listen on localhost, most likely you will use 0.0.0.0\\n// do not use \\"localhost\\" as a string\\ntransportConfig.Listen.Tcp.InterfaceIp = \\"0.0.0.0\\";\\n// specify your port.\\ntransportConfig.Listen.Tcp.Port = 4000;\\nDitto.SetTransportConfig(transportConfig);\\n\\n// now you can call `ditto.TryStartSync()`\\nDitto.TryStartSync();\\n\\n","network-multiple-transports":"DittoTransportConfig transportConfig = new DittoTransportConfig();\\n\\n// 1. Enable Local Area Network Connections\\ntransportConfig.EnableAllPeerToPeer();\\n\\n// 2. Listen for incoming connections on port 4000\\ntransportConfig.Listen.Tcp.Enabled = true;\\ntransportConfig.Listen.Tcp.InterfaceIp = \\"0.0.0.0\\";\\ntransportConfig.Listen.Tcp.Port = 4000;\\n\\n// 3. Connect explicitly to remote devices\\ntransportConfig.Connect.TcpServers.Add(\\"135.1.5.5:12345\\");\\ntransportConfig.Connect.TcpServers.Add(\\"185.1.5.5:12345\\");\\n\\nDitto.SetTransportConfig(transportConfig);\\n\\nDitto.TryStartSync();\\n\\n"},"kotlin":{"attachment":"val image = ImageIO.read(imageFile)\\n\\nval metadata = mapOf(\\"name\\" to \\"my_image.png\\")\\nval attachment = coll.newAttachment(attachmentStream, metadata)\\nval docID = coll.upsert(mapOf(\\n    \\"some\\" to \\"string\\",\\n    \\"my_attachment\\" to attachment\\n))\\n\\nvar attachmentImage: BufferedImage? = null\\n\\ncoll.findByID(docID).exec()?.let { doc ->\\n    doc[\\"my_attachment\\"].attachmentToken?.let { token ->\\n        runBlocking {\\n            attachmentImage = suspendCoroutine { continuation ->\\n                val fetcher = coll.fetchAttachment(token) { fetchEvent ->\\n                    when (fetchEvent) {\\n                        is Completed -> {\\n                            val fetchedImage =\\n                                ImageIO.read(fetchEvent.attachment.getInputStream())\\n                            continuation.resume(fetchedImage)\\n                        }\\n                        is Progress -> {}\\n                        else -> continuation.resume(null)\\n                    }\\n                }\\n                fetcher.stop()\\n            }\\n        }\\n    }\\n}\\n\\n","datamodel":"val carsCollection = ditto.store[\\"cars\\"]\\n// or\\nval carsCollection = ditto.store.collection(\\"cars\\")\\n\\n","upsert-id":"val docId = ditto.store[\\"people\\"].upsert(\\n    mapOf(\\n        \\"_id\\" to \\"123abc\\",\\n        \\"name\\" to \\"Susan\\",\\n        \\"age\\" to 31\\n    )\\n)\\n\\n","upsert":"val docID = ditto.store[\\"people\\"].upsert(\\n    mapOf(\\n        \\"name\\" to \\"Susan\\",\\n        \\"age\\" to 31\\n    )\\n)\\n\\n","upsert-composite-primary-key":"val docId = ditto.store[\\"people\\"].upsert(\\n    mapOf(\\n        \\"_id\\" to mapOf( \\"userId\\" to \\"456abc\\", \\"workId\\" to 789),\\n        \\"name\\" to \\"Susan\\",\\n        \\"age\\" to 31\\n    )\\n)\\n\\n","upsert-datatypes":"ditto.store[\\"foo\\"].upsert(mapOf(\\n    \\"boolean\\" to true,\\n    \\"string\\" to \\"Hello World\\",\\n    \\"number\\" to 10,\\n    \\"map\\" to mapOf(\\"key\\" to \\"value\\"),\\n    \\"array\\" to listOf(1,2,3),\\n    \\"null\\" to null\\n))\\n\\n","write-transaction":"val results = ditto.store.write { transaction ->\\n    val cars = transaction.scoped(\\"cars\\")\\n    val people = transaction.scoped(\\"people\\")\\n    val docId = \\"abc123\\"\\n    people.upsert(mapOf(\\"_id\\" to docId, \\"name\\" to \\"Susan\\"))\\n    cars.upsert(mapOf(\\"make\\" to \\"Hyundai\\", \\"color\\" to \\"red\\", \\"owner\\" to docId))\\n    cars.upsert(mapOf(\\"make\\" to \\"Jeep\\", \\"color\\" to \\"pink\\", \\"owner\\" to docId))\\n    people.findByID(DittoDocumentID(docId)).evict()\\n}\\n\\n","counter":"val docID = ditto.store[\\"people\\"].upsert(mapOf(\\n    \\"name\\" to \\"Frank\\",\\n    \\"ownedCars\\" to 0\\n))\\n\\nditto.store.collection(\\"people\\").findByID(docID).update { mutableDoc ->\\n    mutableDoc!![\\"ownedCars\\"].replaceWithCounter()\\n    mutableDoc[\\"ownedCars\\"].increment(1)\\n}\\n\\n","array":"val id = ditto.store[\\"people\\"].upsert(mapOf(\\n    \\"name\\" to \\"Frank\\",\\n    \\"friends\\" to emptyList<String>()\\n))\\n\\nval susanId = ditto.store[\\"people\\"].upsert(mapOf(\\n    \\"name\\" to \\"Susan\\",\\n    \\"friends\\" to emptyList<String>()\\n))\\n\\nditto.store.collection(\\"people\\").findByID(id).update { mutableDoc ->\\n    mutableDoc!![\\"friends\\"].push(susanId)\\n}\\n\\n","update":"val frankId = ditto.store[\\"people\\"].upsert(mapOf(\\n    \\"name\\" to \\"Frank\\",\\n    \\"age\\" to 31,\\n    \\"ownedCars\\" to 0,\\n    \\"friends\\" to emptyList<String>()\\n))\\n\\nditto.store.collection(\\"people\\").findByID(frankId).update { mutableDoc ->\\n    mutableDoc?.let {\\n        it[\\"age\\"].set(32)\\n        it[\\"ownedCars\\"].replaceWithCounter()\\n        it[\\"ownedCars\\"].increment(1)\\n        it[\\"friends\\"].push(susanId)\\n    }\\n}\\n\\n","evict":"ditto.store[\\"people\\"].find(\\"age <= 32\\").evict()\\n\\n","upsert-default-data":"val docId = ditto.store.collection(\\"people\\").upsert(mapOf(\\n    \\"name\\" to \\"Susan\\",\\n    \\"age\\" to 31\\n), DittoWriteStrategy.InsertDefaultIfAbsent)\\n\\n","query-basic":"val results = ditto.store.collection(\\"people\\")\\n    .find(\\"favoriteBook.title == \'The Great Gatsby\'\\")\\n    .exec()\\n\\n","query-args":"val foundDocs = ditto.store.collection(\\"people\\")\\n    .find(\\"name == \\\\$args.name && age <= \\\\$args.age\\", mapOf(\\"name\\" to \\"max\\", \\"age\\" to 32))\\n\\n","query-sort":"val sortedRedCars = ditto.store.collection(\\"cars\\")\\n    .find(\\"color == \'red\'\\")\\n    .sort(\\"miles\\", DittoSortDirection.Ascending)\\n    .exec()\\n\\n","query-limit":"val sortedAndLimitedRedCars = ditto.store.collection(\\"cars\\")\\n    .find(\\"color == \'red\'\\")\\n    .sort(\\"miles\\", DittoSortDirection.Ascending)\\n    .limit(100)\\n    .exec()\\n\\n","sync-basic":"try {\\n    ditto.tryStartSync()\\n}\\ncatch (e: DittoError) {\\n    // handle error\\n}\\n\\n","sync-observe":"// --- Register live query to update UI\\nval liveQuery = ditto.store.collection(\\"cars\\")\\n.findAll()\\n.observe { docs, event ->\\n    // Do something...\\n}\\n\\n","sync-observe-local":"// --- Action somewhere in your application\\nfun userDidInsertCar() {\\n    ditto.store.collection(\\"cars\\").upsert(mapOf(\\n        \\"model\\" to \\"Ford\\",\\n        \\"color\\" to \\"black\\"\\n    ))\\n}\\n\\n// --- Register live query to update UI\\nval observeLocalQuery = ditto.store.collection(\\"cars\\")\\n    .findAll()\\n    .observeLocal { docs, event ->\\n    // Do something...\\n}\\n\\n","subscribe":"// --- Register live query to update UI\\nval subscription = ditto.store.collection(\\"cars\\")\\n.find(\\"color == \'red\'\\")\\n.subscribe()\\n\\n","online-playground":"try {\\n    val androidDependencies = AndroidDittoDependencies(context)\\n    val identity = DittoIdentity.OnlinePlaygroundV2(androidDependencies, appID = \\"00000000-0000-4000-0000-000000000000\\", token = \\"REPLACE_ME_WITH_YOUR_PLAYGROUND_TOKEN\\")\\n    val ditto = Ditto(androidDependencies, identity)\\n    ditto.tryStartSync()\\n} catch(e: DittoError) {\\n    Log.e(\\"Ditto error\\", e.message!!)\\n}\\n\\n","offline-playground":"try {\\n    val androidDependencies = AndroidDittoDependencies(context)\\n    val identity = DittoIdentity.OfflinePlayground(androidDependencies, appID = \\"00000000-0000-4000-0000-000000000000\\")\\n    val ditto = Ditto(androidDependencies, identity)\\n    ditto.setOfflineOnlyLicenseToken(validLicense)\\n    ditto.tryStartSync()\\n} catch(e: DittoError) {\\n    Log.e(\\"Ditto error\\", e.message!!)\\n}\\n\\n","shared-key":"// This is just an example. You should use OpenSSL to generate a unique shared key for every application.\\nval p256DerB64 = \\"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgFUUrOkOH52QN+Rr6uDSDsk4hUTcD1eW4mT0UnGGptFehRANCAATJ3fG8TVLQcDwUV18BJJI8efK0hQAjzB3VJeYOVbfOlqnfukVId0V25r/abxwjD3HfHuPsCGEiefzzmkMbjPo9\\"\\nval androidDependencies = DefaultAndroidDittoDependencies(context)\\nval identity = DittoIdentity.SharedKey(\\"app\\", p256DerB64, null)\\nDitto(androidDependencies, identity)\\n\\n","network-remote-ditto":"val transportConfig = DittoTransportConfig();\\n\\ntransportConfig.connect.tcpServers.add(\\"135.1.5.5:12345\\")\\ntransportConfig.connect.tcpServers.add(\\"185.1.5.5:12345\\")\\n\\nditto.tryStartSync()\\n\\n","network-listen":"val transportConfig = DittoTransportConfig()\\ntransportConfig.connect.tcpServers.add(\\"135.1.5.5:12345\\")\\ntransportConfig.connect.tcpServers.add(\\"185.1.5.5:12345\\")\\nditto.tryStartSync()\\n\\n","network-multiple-transports":"val transportConfig = DittoTransportConfig()\\n// 1. Enable All Peer to Peer Connections\\ntransportConfig.enableAllPeerToPeer()\\n// 2. Listen for incoming connections on port 4000\\ntransportConfig.listen.tcp.enabled = true\\ntransportConfig.listen.http.enabled = false\\ntransportConfig.listen.tcp.interfaceIp = \\"0.0.0.0\\"\\ntransportConfig.listen.tcp.port = 4000\\n// 3. Connect explicitly to remote devices\\ntransportConfig.connect.tcpServers.add(\\"135.1.5.5:12345\\")\\ntransportConfig.connect.tcpServers.add(\\"185.1.5.5:12345\\")\\n\\nditto.tryStartSync()\\n\\n","network-monitor-conditions":"\\n        // ... Setting up inside an Activity\\n        val androidDependencies = DefaultAndroidDittoDependencies(applicationContext)\\n        val ditto = Ditto(androidDependencies, DittoIdentity.OnlinePlaygroundV2(androidDependencies, appID = \\"REPLACE_WITH_APP_ID\\", token = \\"REPLACE_ME_WITH_YOUR_PLAYGROUND_TOKEN\\"))\\n        ditto.callback = this\\n        ditto.tryStartSync()\\n\\n        // Now you can observe real time changes to the transport conditions:\\n\\n        class MainActivity : AppCompatActivity(), DittoCallback {\\n\\n            override fun transportConditionDidChange(transportId: Long, condition: TransportCondition) {\\n                var toastText: String? = null\\n                if (condition == TransportCondition.TRANSPORT_CONDITION_BLE_DISABLED) {\\n                    toastText = \\"BLE disabled\\"\\n                } else if (condition == TransportCondition.TRANSPORT_CONDITION_NO_BLE_CENTRAL_PERMISSION) {\\n                    toastText = \\"Permission missing for BLE\\"\\n                } else if (condition == TransportCondition.TRANSPORT_CONDITION_NO_BLE_PERIPHERAL_PERMISSION) {\\n                    toastText = \\"Permission missing for BLE\\"\\n                }\\n                toastText?.let {\\n                    Handler(mainLooper).post {\\n                        Toast.makeText(this, it, Toast.LENGTH_LONG).show()\\n                    }\\n                }\\n            }\\n        }\\n\\n","remove-id":"coll.findByID(docID).remove()\\n\\n","remove-query":"val removedDocIDs = coll.find(\\"make == \'Honda\'\\").remove()\\n\\n"},"java":{"attachment":"String attachmentPath = tempFile.getPath();\\nMap<String, String> metadata = new HashMap<>();\\nmetadata.put(\\"name\\", \\"my_image.png\\");\\nDittoAttachment attachment = coll.newAttachment(attachmentPath, metadata);\\ntempFile.delete();\\n\\nMap<String, Object> content = new HashMap<>();\\ncontent.put(\\"some\\", \\"string\\");\\ncontent.put(\\"my_attachment\\", attachment);\\nDittoDocumentID docID = coll.upsert(content);\\n\\nDittoDocument doc = coll.findByID(docID).exec();\\nDittoAttachmentToken attachmentToken = doc.get(\\"my_attachment\\").getAttachmentToken();\\n\\nDittoAttachmentFetcher fetcher = coll.fetchAttachment(attachmentToken, event -> {\\n    if (event.getType() == DittoAttachmentFetchEventType.Completed) {\\n        DittoAttachment att = event.asCompleted().getAttachment();\\n        BufferedImage attachmentImage;\\n        try {\\n            attachmentImage = ImageIO.read(att.getInputStream());\\n        } catch (IOException e) {\\n            e.printStackTrace();\\n        }\\n    } else if (event.getType() == DittoAttachmentFetchEventType.Progress) {\\n        // do nothing - wait for `Completed` or `Deleted`\\n    } else {\\n    }\\n});\\n\\n\\n","datamodel":"DittoCollection carsCollection = ditto.store.collection(\\"cars\\");\\n\\n","upsert-id":"Map<String, Object> content = new HashMap<>();\\ncontent.put(\\"_id\\", \\"123abc\\");\\ncontent.put(\\"name\\", \\"Susan\\");\\ncontent.put(\\"age\\", 31);\\nDittoDocumentID docId = ditto.store.collection(\\"people\\").upsert(content);\\n// docId => 123abc\\n\\n","upsert":"Map<String, Object> content = new HashMap<>();\\ncontent.put(\\"name\\", \\"Susan\\");\\ncontent.put(\\"age\\", 31);\\nDittoDocumentID docId = ditto.store.collection(\\"people\\").upsert(content);\\n// docId => 507f191e810c19729de860ea\\n\\n","upsert-composite-primary-key":"Map<String, Object> _id = new HashMap<>();\\n_id.put(\\"userId\\", \\"456abc\\");\\n_id.put(\\"workId\\", 789);\\n\\nMap<String, Object> value = new HashMap<>();\\nvalue.put(\\"_id\\", _id);\\nvalue.put(\\"name\\", \\"Susan\\");\\nvalue.put(\\"age\\", 31);\\nDittoDocumentID docID = ditto.store.collection(\\"people\\").upsert(value);\\n// docId=> \\"_id.put(\\"userId\\", \\"456abc\\"); _id.put(\\"workId\\", 789);\\"\\n\\n","remove-id":"ditto.store.collection(\\"people\\").findByID(docId).remove();\\n\\n","remove-query":"ditto.store.collection(\\"people\\").find(\\"age <= 32\\").remove();\\n\\n","evict":"ditto.store.collection(\\"people\\").find(\\"age <= 32\\").evict();\\n\\n","upsert-datatypes":"// Insert JSON-compatible data into Ditto\\nMap<String, Object> content = new HashMap<>();\\ncontent.put(\\"boolean\\", true);\\ncontent.put(\\"string\\", \\"Hello World\\");\\ncontent.put(\\"number\\", 10);\\nMap<String, String> innerMap = new HashMap<>();\\ninnerMap.put(\\"key\\", \\"value\\");\\ncontent.put(\\"map\\", innerMap);\\ncontent.put(\\"array\\", Arrays.asList(1, 2, 3));\\ncontent.put(\\"null\\", null);\\nditto.store.collection(\\"foo\\").upsert(content);\\n\\n","counter":"Map<String, Object> content = new HashMap<>();\\ncontent.put(\\"name\\", \\"Frank\\");\\ncontent.put(\\"ownedCars\\", 0);\\nDittoDocumentID docID = ditto.store.collection(\\"people\\").upsert(content);\\n\\nditto.store.collection(\\"people\\").findByID(docID).update(mutDoc -> {\\n    try {\\n        mutDoc.get(\\"ownedCars\\").replaceWithCounter();\\n        mutDoc.get(\\"ownedCars\\").increment(1);\\n    } catch (DittoError err) {\\n        // Do something with error\\n    }\\n});\\n\\n","array":"Map<String, Object> frank = new HashMap<>();\\nfrank.put(\\"name\\", \\"Frank\\");\\nfrank.put(\\"friends\\", Arrays.asList());\\nDittoDocumentID frankId = ditto.store.collection(\\"people\\").upsert(frank);\\n\\nditto.store.collection(\\"people\\").findByID(frankId).update(doc -> {\\n    try {\\n        doc.get(\\"age\\").set(32);\\n        doc.get(\\"cars\\").push(\\"Ford\\");\\n    } catch (DittoError err) {\\n        // Do something with error\\n    }\\n});\\n\\n","update":"Map<String, Object> content = new HashMap<>();\\ncontent.put(\\"name\\", \\"Frank\\");\\ncontent.put(\\"age\\", 31);\\ncontent.put(\\"ownedCars\\", 0);\\ncontent.put(\\"friends\\", Arrays.asList());\\nDittoDocumentID docId = ditto.store.collection(\\"people\\").upsert(content);\\n\\nditto.store.collection(\\"people\\").findByID(docId).update(doc -> {\\n    try {\\n    doc.get(\\"age\\").set(32);\\n    doc.get(\\"ownedCars\\").replaceWithCounter();\\n    doc.get(\\"ownedCars\\").increment(1);\\n    doc.get(\\"friends\\").push(\\"Susan\\");\\n    } catch (DittoError err) {\\n        // Do something with error\\n    }\\n});\\n\\n","upsert-default-data":"Map<String, Object> content = new HashMap<>();\\ncontent.put(\\"name\\", \\"Susan\\");\\ncontent.put(\\"age\\", 31);\\nDittoDocumentID docId = ditto.store\\n        .collection(\\"people\\")\\n        .upsert(content, DittoWriteStrategy.InsertDefaultIfAbsent);\\n\\n","query-basic":"List<DittoDocument> results = ditto.store.collection(\\"people\\")\\n        .find(\\"favoriteBook.title == \'The Great Gatsby\'\\")\\n        .exec();\\n\\n","query-args":"Map<String, Object> queryArgs = new HashMap<>();\\nqueryArgs.put(\\"name\\", \\"max\\");\\nqueryArgs.put(\\"age\\", 32);\\n\\nList<DittoDocument> foundDocs = ditto.store.collection(\\"users\\")\\n        .find(\\"name == $args.name && age <= $args.age\\", queryArgs)\\n        .exec();\\n\\n","query-sort":"List<DittoDocument> sortedRedCars = ditto.store.collection(\\"cars\\")\\n        .find(\\"color == \'red\'\\")\\n        .sort(\\"miles\\", DittoSortDirection.Ascending)\\n        .exec();\\n\\n","query-limit":"List<DittoDocument> sortedAndLimitedRedCars = ditto.store.collection(\\"cars\\")\\n        .find(\\"color == \'red\'\\")\\n        .sort(\\"miles\\", DittoSortDirection.Ascending)\\n        .limit(100)\\n        .exec();\\n\\n","sync-basic":"try {\\n    ditto.tryStartSync();\\n} catch(DittoError e) {\\n    // handle error\\n}\\n\\n","sync-observe":"// --- Register live query to update UI\\nDittoLiveQuery liveQuery = ditto.store.collection(\\"cars\\")\\n        .findAll()\\n        .observe((docs, event) -> {\\n            // Do something...\\n        });\\n\\n","subscribe":"// --- Register live query to update UI\\nDittoSubscription subscription = ditto.store.collection(\\"cars\\")\\n        .findAll()\\n        .subscribe();\\n\\n","sync-observe-local":"// --- Action somewhere in your application\\nMap<String, Object> content = new HashMap<>();\\ncontent.put(\\"model\\", \\"Ford\\");\\ncontent.put(\\"color\\", \\"black\\");\\nditto.store.collection(\\"cars\\").upsert(content);\\n\\n// --- Register live query to update UI\\nDittoLiveQuery liveQueryLocal = ditto.store.collection(\\"cars\\")\\n        .findAll()\\n        .observeLocal((docs, event) -> {\\n            // Do something...\\n        });\\n\\n","shared-key":"// This is just an example. You should use OpenSSL to generate a unique shared key for every application.\\nString p256DerB64 = \\"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgFUUrOkOH52QN+Rr6uDSDsk4hUTcD1eW4mT0UnGGptFehRANCAATJ3fG8TVLQcDwUV18BJJI8efK0hQAjzB3VJeYOVbfOlqnfukVId0V25r/abxwjD3HfHuPsCGEiefzzmkMbjPo9\\";\\nDefaultAndroidDittoDependencies androidDependencies = new DefaultAndroidDittoDependencies(this.context);\\nDittoIdentity identity = new DittoIdentity.SharedKey(androidDependencies, \\"app\\", p256DerB64);\\nDitto ditto = new Ditto(androidDependencies, identity);\\n\\n","online-playground":"DittoDependencies androidDependencies = new DefaultAndroidDittoDependencies(this.context);\\nDittoIdentity identity = new DittoIdentity.OnlinePlaygroundV2(androidDependencies, \\"00000000-0000-4000-0000-000000000000\\", \\"YOUR_PLAYGROUND_TOKEN_HERE\\");\\nDitto ditto = new Ditto(androidDependencies, identity);\\n\\ntry {\\n    ditto.tryStartSync();\\n} catch(DittoError e) {\\n    //handle error\\n}\\n\\n","offline-playground":"DittoIdentity identity = new DittoIdentity.OfflinePlayground(androidDependencies, \\"00000000-0000-4000-0000-000000000000\\");\\nDitto ditto = new Ditto(androidDependencies, identity);\\ntry {\\n    ditto.setOfflineOnlyLicenseToken(validLicense);\\n} catch(DittoError e) {\\n    //handle error\\n}\\ntry {\\n    ditto.tryStartSync();\\n} catch(DittoError e) {\\n    //handle error\\n}\\n\\n","network-remote-ditto":"DittoTransportConfig config = new DittoTransportConfig();\\nDittoConnect connect = new DittoConnect();\\nconnect.setTcpServers(Sets.newHashSet(\\"135.1.5.5:12345\\", \\"185.1.5.5:12345\\"));\\nconfig.setConnect(connect);\\n\\ntry {\\n    ditto.tryStartSync();\\n} catch(DittoError error) {\\n    // handle error\\n}\\n\\n","network-listen":"DittoTransportConfig config = new DittoTransportConfig();\\nconfig.enableAllPeerToPeer();\\n\\nDittoListen listen = new DittoListen();\\nDittoTcpListenConfig tcpListenConfig = new DittoTcpListenConfig();\\ntcpListenConfig.setEnabled(true);\\ntcpListenConfig.setInterfaceIp(\\"0.0.0.0\\");\\ntcpListenConfig.setPort(4000);\\nlisten.setTcp(tcpListenConfig);\\nconfig.setListen(listen);\\n\\ntry {\\n    ditto.tryStartSync();\\n} catch(DittoError error) {\\n    // handle error\\n}\\n\\n","network-multiple-transports":"DittoTransportConfig config = new DittoTransportConfig();\\n\\n// 1. Enable Peer to Peer Connections\\nconfig.enableAllPeerToPeer();\\n\\n// 2. Listen for incoming connections on port 4000\\nDittoListen listen = new DittoListen();\\nDittoTcpListenConfig tcpListenConfig = new DittoTcpListenConfig();\\ntcpListenConfig.setEnabled(true);\\ntcpListenConfig.setInterfaceIp(\\"0.0.0.0\\");\\ntcpListenConfig.setPort(4000);\\nlisten.setTcp(tcpListenConfig);\\nconfig.setListen(listen);\\n// 3. Connect explicitly to remote devices\\nDittoConnect connect = new DittoConnect();\\nconnect.setTcpServers(Sets.newHashSet(\\"135.1.5.5:12345\\", \\"185.1.5.5:12345\\"));\\nconfig.setConnect(connect);\\n\\ntry {\\n    ditto.tryStartSync();\\n} catch(DittoError error) {\\n    // handle error\\n}\\n\\n","network-monitor-conditions":"// Setting up inside an Activity\\nDefaultAndroidDittoDependencies androidDependencies = new DefaultAndroidDittoDependencies(getApplicationContext());\\nDitto ditto = new Ditto(androidDependencies, new DittoIdentity.OnlinePlayground(androidDependenciesOne, \\"REPLACE_WITH_APP_ID\\"));\\nditto.callback = this;\\nditto.tryStartSync();\\n\\n// Now you can observe real time changes to the transport conditions:\\npublic class MainActivity extends AppCompatActivity implements DittoCallback {\\n    @Override\\n    public void transportConditionDidChange(@NotNull DittoTransportCondition condition, @NotNull DittoConditionSource transportId) {\\n        String toastText = null;\\n        if (condition == DittoTransportCondition.BleDisabled) {\\n            toastText = \\"BLE disabled\\";\\n        } else if (condition == DittoTransportCondition.NoBleCentralPermission) {\\n            toastText = \\"Permission missing for BLE\\";\\n        } else if (condition == DittoTransportCondition.NoBlePeripheralPermission) {\\n            toastText = \\"Permission missing for BLE\\";\\n        }\\n\\n        if (toastText != null) {\\n            String finalToastText = toastText;\\n            runOnUiThread(new Runnable() {\\n                @Override\\n                public void run() {\\n                    Toast.makeText(MainActivity.this, finalToastText, Toast.LENGTH_LONG).show();\\n                }\\n            });\\n        }\\n    }\\n}\\n\\n"}}'),a=n(99013),s=n(49366),c=n(30547);function d(e){var t,n=e.name,i=e.language,s=e.label,c=r[i];if(c){var d=c[n];d&&(t=d)}return t?o.createElement(a.Z,{className:i},t.trim().replace("00000000-0000-4000-0000-000000000000","REPLACE_ME_WITH_YOUR_APP_ID")):(console.error("no snippet for "+n+" in language="+i),o.createElement("div",null,"Not supported by ",s,"."))}function l(e){e.children;var t=e.name,n=(0,i.Z)(),r=n.tabGroupChoices,a=(n.setTabGroupChoices,r.platform),l=[{label:"JavaScript",value:"javascript"},{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"},{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"},{label:"C#",value:"csharp"},{label:"C++",value:"cpp"},{label:"Rust",value:"rust"},{label:"HTTP",value:"http"}];switch(a){case"android":l=[{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"}];break;case"ios":l=[{label:"Swift",value:"swift"},{label:"Objective-C",value:"objc"}];break;case void 0:break;default:l=l.filter((function(e){return e.value===a}))}return o.createElement(s.Z,{platform:a,groupId:"programming-language",defaultValue:l[0].value,values:l},l.map((function(e){return o.createElement(c.Z,{key:e.value+"-"+t,value:e.value},o.createElement(d,{name:t,language:e.value,label:e.label}))})))}},99013:function(e,t,n){"use strict";n.d(t,{Z:function(){return A}});var o=n(87462),i=n(67294),r=n(86010),a=n(23746),s=n(10195),c=n(87594),d=n.n(c),l=n(95999),p=n(67804),u=n(71418),h="codeBlockContainer_2gih",f="codeBlockContent_3z4W",m="codeBlockTitle_1Kb7",g="codeBlock_6upA",y="copyButton_2e3i",_="codeBlockLines_xlV7",w=n(32822),D=/{([\d,-]+)}/,v=["js","jsBlock","jsx","python","html"],b={js:{start:"\\/\\/",end:""},jsBlock:{start:"\\/\\*",end:"\\*\\/"},jsx:{start:"\\{\\s*\\/\\*",end:"\\*\\/\\s*\\}"},python:{start:"#",end:""},html:{start:"\x3c!--",end:"--\x3e"}},T=["highlight-next-line","highlight-start","highlight-end"],I=function(e){void 0===e&&(e=v);var t=e.map((function(e){var t=b[e],n=t.start,o=t.end;return"(?:"+n+"\\s*("+T.join("|")+")\\s*"+o+")"})).join("|");return new RegExp("^\\s*(?:"+t+")\\s*$")};function A(e){var t=e.children,n=e.className,c=e.metastring,v=e.title,b=(0,w.LU)().prism,T=(0,i.useState)(!1),A=T[0],S=T[1],k=(0,i.useState)(!1),C=k[0],x=k[1];(0,i.useEffect)((function(){x(!0)}),[]);var j=(0,w.bc)(c)||v,O=(0,i.useRef)(null),P=[],E=Array.isArray(t)?t.join(""):t;if(c&&D.test(c)){var F=c.match(D)[1];P=d()(F).filter((function(e){return e>0}))}var L=null==n?void 0:n.replace(/language-/,"");!L&&b.defaultLanguage&&(L=b.defaultLanguage);var Z=E.replace(/\n$/,"");if(0===P.length&&void 0!==L){for(var N,q="",B=function(e){switch(e){case"js":case"javascript":case"ts":case"typescript":return I(["js","jsBlock"]);case"jsx":case"tsx":return I(["js","jsBlock","jsx"]);case"html":return I(["js","jsBlock","html"]);case"python":case"py":return I(["python"]);default:return I()}}(L),K=E.replace(/\n$/,"").split("\n"),R=0;R<K.length;){var M=R+1,U=K[R].match(B);if(null!==U){switch(U.slice(1).reduce((function(e,t){return e||t}),void 0)){case"highlight-next-line":q+=M+",";break;case"highlight-start":N=M;break;case"highlight-end":q+=N+"-"+(M-1)+","}K.splice(R,1)}else R+=1}P=d()(q),Z=K.join("\n")}var z=function(){(0,s.Z)(Z),S(!0),setTimeout((function(){return S(!1)}),2e3)};return i.createElement(a.ZP,(0,o.Z)({},a.lG,{key:String(C),theme:u.Z,code:Z,language:L}),(function(e){var t=e.className,n=e.style,a=e.tokens,s=e.getLineProps,c=e.getTokenProps;return i.createElement("div",{className:h},j&&i.createElement("div",{style:n,className:m},j),i.createElement("div",{className:(0,r.Z)(f,L)},i.createElement("pre",{tabIndex:0,className:(0,r.Z)(t,g,"thin-scrollbar")},i.createElement("code",{className:_},a.map((function(e,t){1===e.length&&""===e[0].content&&(e[0].content="\n");var n=s({line:e,key:t}),a=P.includes(t+1);P.includes(t+1)&&(n.className+="bg-gray-800 docusaurus-highlight-code-line");var d=(0,r.Z)(n.className,a&&"bg-gray-700");return i.createElement("span",(0,o.Z)({key:t},n,{className:d}),e.map((function(e,t){var n=Object.assign({},c({token:e,key:t})),a=n.className;return a.includes("inserted-sign")&&(a=(0,r.Z)(a,"bg-green-900")),a.includes("deleted-sign")&&(a=(0,r.Z)(a,"bg-red-900")),i.createElement("span",(0,o.Z)({key:t},n,{className:a}))})))})))),i.createElement("button",{ref:O,type:"button","aria-label":(0,l.I)({id:"theme.CodeBlock.copyButtonAriaLabel",message:"Copy code to clipboard",description:"The ARIA label for copy code blocks button"}),className:(0,r.Z)(y,"clean-btn",A?"bg-green-500":""),onClick:z},A?i.createElement("div",null,i.createElement(p.C2q,{className:"w-4 h-4 inline mr-1"}),i.createElement("span",{className:"text-xs"},"Copied")):i.createElement("div",null,i.createElement(p.Kmg,{className:"w-4 h-4 inline mr-1"}),i.createElement("span",{className:"text-xs"},"Copy")))))}))}},30547:function(e,t,n){"use strict";var o=n(67294);t.Z=function(e){var t=e.children,n=e.hidden,i=e.className;return o.createElement("div",{role:"tabpanel",hidden:n,className:i},t)}},49366:function(e,t,n){"use strict";var o=n(67294),i=n(80944),r=n(86010);t.Z=function(e){var t,n=e.lazy,a=e.platform,s=(e.block,e.defaultValue),c=e.values,d=e.groupId,l=(e.className,o.Children.toArray(e.children)),p=null!=c?c:l.map((function(e){return{value:e.props.value,label:e.props.label}})),u=null!=s?s:null==(t=l.find((function(e){return e.props.default})))?void 0:t.props.value,h=(0,i.Z)(),f=h.tabGroupChoices,m=h.setTabGroupChoices,g=(0,o.useState)(u),y=g[0],_=g[1];(0,o.useEffect)((function(){if(null!=d){var e=f[d];null!=e&&e!==y&&(p.some((function(t){return t.value===e}))?_(e):_(u))}}),[a,f[d]]);var w=function(e){_(e),null!=d&&m(d,e)},D=p.length>1;return o.createElement("div",{className:"tabs-container"},D&&o.createElement(o.Fragment,null,o.createElement("div",{className:"sm:hidden"},o.createElement("label",{htmlFor:"tabs",className:"sr-only"},"Select a tab"),o.createElement("select",{id:"tabs",name:"tabs",value:y,onChange:function(e){return w(e.currentTarget.value)},className:"block w-full focus:ring-blue-500 focus:border-blue-500 border-gray-300 rounded-md"},p.map((function(e){var t=e.value,n=e.label;return o.createElement("option",{value:t,key:t},null!=n?n:t)})))),o.createElement("div",{className:"hidden sm:block"},o.createElement("nav",{className:"flex space-x-4","aria-label":"Tabs"},p.map((function(e){var t=e.value,n=e.label;return o.createElement("button",{key:t,onClick:function(){return w(t)},className:(0,r.Z)(y===t?"bg-blue-100 text-blue-700":"text-gray-500 hover:text-gray-700","px-3 py-2 font-medium text-sm rounded-md"),"aria-current":y===t?"page":void 0},null!=n?n:t)}))))),n?(0,o.cloneElement)(l.filter((function(e){return e.props.value===y}))[0],{className:"margin-vert--md"}):o.createElement("div",{className:"margin-vert--md"},l.map((function(e,t){return(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==y})}))))}},46700:function(e,t,n){var o={"./af":42786,"./af.js":42786,"./ar":30867,"./ar-dz":14130,"./ar-dz.js":14130,"./ar-kw":96135,"./ar-kw.js":96135,"./ar-ly":56440,"./ar-ly.js":56440,"./ar-ma":47702,"./ar-ma.js":47702,"./ar-sa":16040,"./ar-sa.js":16040,"./ar-tn":37100,"./ar-tn.js":37100,"./ar.js":30867,"./az":31083,"./az.js":31083,"./be":9808,"./be.js":9808,"./bg":68338,"./bg.js":68338,"./bm":67438,"./bm.js":67438,"./bn":8905,"./bn-bd":76225,"./bn-bd.js":76225,"./bn.js":8905,"./bo":11560,"./bo.js":11560,"./br":1278,"./br.js":1278,"./bs":80622,"./bs.js":80622,"./ca":2468,"./ca.js":2468,"./cs":5822,"./cs.js":5822,"./cv":50877,"./cv.js":50877,"./cy":47373,"./cy.js":47373,"./da":24780,"./da.js":24780,"./de":59740,"./de-at":60217,"./de-at.js":60217,"./de-ch":60894,"./de-ch.js":60894,"./de.js":59740,"./dv":5300,"./dv.js":5300,"./el":50837,"./el.js":50837,"./en-au":78348,"./en-au.js":78348,"./en-ca":77925,"./en-ca.js":77925,"./en-gb":22243,"./en-gb.js":22243,"./en-ie":46436,"./en-ie.js":46436,"./en-il":47207,"./en-il.js":47207,"./en-in":44175,"./en-in.js":44175,"./en-nz":76319,"./en-nz.js":76319,"./en-sg":31662,"./en-sg.js":31662,"./eo":92915,"./eo.js":92915,"./es":55655,"./es-do":55251,"./es-do.js":55251,"./es-mx":96112,"./es-mx.js":96112,"./es-us":71146,"./es-us.js":71146,"./es.js":55655,"./et":5603,"./et.js":5603,"./eu":77763,"./eu.js":77763,"./fa":76959,"./fa.js":76959,"./fi":11897,"./fi.js":11897,"./fil":42549,"./fil.js":42549,"./fo":94694,"./fo.js":94694,"./fr":94470,"./fr-ca":63049,"./fr-ca.js":63049,"./fr-ch":52330,"./fr-ch.js":52330,"./fr.js":94470,"./fy":5044,"./fy.js":5044,"./ga":29295,"./ga.js":29295,"./gd":2101,"./gd.js":2101,"./gl":38794,"./gl.js":38794,"./gom-deva":27884,"./gom-deva.js":27884,"./gom-latn":23168,"./gom-latn.js":23168,"./gu":95349,"./gu.js":95349,"./he":24206,"./he.js":24206,"./hi":30094,"./hi.js":30094,"./hr":30316,"./hr.js":30316,"./hu":22138,"./hu.js":22138,"./hy-am":11423,"./hy-am.js":11423,"./id":29218,"./id.js":29218,"./is":90135,"./is.js":90135,"./it":90626,"./it-ch":10150,"./it-ch.js":10150,"./it.js":90626,"./ja":39183,"./ja.js":39183,"./jv":24286,"./jv.js":24286,"./ka":12105,"./ka.js":12105,"./kk":47772,"./kk.js":47772,"./km":18758,"./km.js":18758,"./kn":79282,"./kn.js":79282,"./ko":33730,"./ko.js":33730,"./ku":1408,"./ku.js":1408,"./ky":33291,"./ky.js":33291,"./lb":36841,"./lb.js":36841,"./lo":55466,"./lo.js":55466,"./lt":57010,"./lt.js":57010,"./lv":37595,"./lv.js":37595,"./me":39861,"./me.js":39861,"./mi":35493,"./mi.js":35493,"./mk":95966,"./mk.js":95966,"./ml":87341,"./ml.js":87341,"./mn":5115,"./mn.js":5115,"./mr":10370,"./mr.js":10370,"./ms":9847,"./ms-my":41237,"./ms-my.js":41237,"./ms.js":9847,"./mt":72126,"./mt.js":72126,"./my":56165,"./my.js":56165,"./nb":64924,"./nb.js":64924,"./ne":16744,"./ne.js":16744,"./nl":93901,"./nl-be":59814,"./nl-be.js":59814,"./nl.js":93901,"./nn":83877,"./nn.js":83877,"./oc-lnc":92135,"./oc-lnc.js":92135,"./pa-in":15858,"./pa-in.js":15858,"./pl":64495,"./pl.js":64495,"./pt":89520,"./pt-br":57971,"./pt-br.js":57971,"./pt.js":89520,"./ro":96459,"./ro.js":96459,"./ru":21793,"./ru.js":21793,"./sd":40950,"./sd.js":40950,"./se":10490,"./se.js":10490,"./si":90124,"./si.js":90124,"./sk":64249,"./sk.js":64249,"./sl":14985,"./sl.js":14985,"./sq":51104,"./sq.js":51104,"./sr":49131,"./sr-cyrl":79915,"./sr-cyrl.js":79915,"./sr.js":49131,"./ss":85893,"./ss.js":85893,"./sv":98760,"./sv.js":98760,"./sw":91172,"./sw.js":91172,"./ta":27333,"./ta.js":27333,"./te":23110,"./te.js":23110,"./tet":52095,"./tet.js":52095,"./tg":27321,"./tg.js":27321,"./th":9041,"./th.js":9041,"./tk":19005,"./tk.js":19005,"./tl-ph":75768,"./tl-ph.js":75768,"./tlh":89444,"./tlh.js":89444,"./tr":72397,"./tr.js":72397,"./tzl":28254,"./tzl.js":28254,"./tzm":51106,"./tzm-latn":30699,"./tzm-latn.js":30699,"./tzm.js":51106,"./ug-cn":9288,"./ug-cn.js":9288,"./uk":67691,"./uk.js":67691,"./ur":13795,"./ur.js":13795,"./uz":6791,"./uz-latn":60588,"./uz-latn.js":60588,"./uz.js":6791,"./vi":65666,"./vi.js":65666,"./x-pseudo":14378,"./x-pseudo.js":14378,"./yo":75805,"./yo.js":75805,"./zh-cn":83839,"./zh-cn.js":83839,"./zh-hk":55726,"./zh-hk.js":55726,"./zh-mo":99807,"./zh-mo.js":99807,"./zh-tw":74152,"./zh-tw.js":74152};function i(e){var t=r(e);return n(t)}function r(e){if(!n.o(o,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return o[e]}i.keys=function(){return Object.keys(o)},i.resolve=r,e.exports=i,i.id=46700},91395:function(e){"use strict";e.exports=JSON.parse('{"DittoKit":{"latest":{"description":"* Supports Ditto SDK through version 1.1.6\\n* Parity between document and timeseries HTTP APIs\\n* HTTP API calls that were GET with a body now also accept POST. They will accept both methods and will behave same no mater which method is used.","version":"0.20.0","date_released":"2022-05-12T08:08:47.875Z"},"0.20.0":{"description":"* Supports Ditto SDK through version 1.1.6\\n* Parity between document and timeseries HTTP APIs\\n* HTTP API calls that were GET with a body now also accept POST. They will accept both methods and will behave same no mater which method is used.","version":"0.20.0","date_released":"2022-05-12T08:08:47.875Z"},"0.17.0":{"description":"* Supports Ditto SDK through version 1.1.5, including improvements to replication efficency.\\n\\n* Adds HTTP API RPC `Remove` and `Update` commands.\\n\\nWith `remove`, users may provide a query and delete all matching records.  The\\n`update` command mimics Ditto SDK update behavior and applies a series of\\nupdates to all matching documents. This includes: `set`, `increment`, and\\n`replaceWithCounter`.\\n\\nAll HTTP API Headers used by Ditto will be prefixed with `X-DITTO-`\\n\\n- `X-HYDRA-ENSURE-DELETE` is now `X-DITTO-ENSURE-DELETE`\\n- `X-HYDRA-CLIENT-ID` is now `X-DITTO-CLIENT-ID`\\n- `X-HYDRA-ENSURE-INSERT` is now `X-DITTO-ENSURE-INSERT`\\n- `X-ENSURE-INSERT` is now `X-DITTO-ENSURE-INSERT`\\n\\nThe old header names are now deprecated.\\n\\nHTTP API delete document method now checks for conflicting changes from the\\nsame CLIENT-ID. These conflicts would sometimes cause a deletion to be ignored.\\nThe HTTP API now will check if the `X-DITTO-ENSURE-DELETE` is present and\\nperforms the deletion even when a conflicting add occurrs. Use the\\n`X-DITTO-ENSURE-DELETE` header to ensure deletions are commited before the HTTP\\nresponse is returned.\\n\\nAPI users should continue to ensure different instances of the HTTP API Client\\ndo *not* share the same value for `X-DITTO-CLIENT-ID` header. Further, batch\\nHTTP API requests are preferred to having multiple in-flight Insert, Delete, and\\nUpdate API requests are the same time.  \\n\\nHTTP API Requests have a default timeout of 5 seconds. \\n\\nImproved the error message for HTTP API Requests targeting unavailable transactions.","version":"0.17.0","date_released":"2022-05-06T08:08:47.875Z"}}}')},99151:function(e){"use strict";e.exports=JSON.parse('{"cocoa":{"DittoKit":{"latest":{"description":"* Note that this is a release with breaking changes, even just in terms of clients running 0.4.0 not being able to communicate with clients running 0.3.X releases.\\n* Fixes for memory leaks.\\n* Performance improvements.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoKit/0.4.0-alpha1/api-reference/","date_released":"2020-09-29T08:18:47.875Z"},"0.1.5":{"description":"* Improved handling of retrieving numeric fields from documents\\n* mDNS/AWDL now correctly filters remote peers by app name\\n* Single document update operation closures now have the document as an optional parameter","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoKit/0.1.5/api-reference/","date_released":"2019-10-13T22:37:39.873Z"},"0.1.6":{"description":"* The full SDK API is now usable from Objective-C. Some classes that couldn\'t be represented in Objective-C have counterparts with an ObjC suffix","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoKit/0.1.6/api-reference/","date_released":"2019-10-15T11:57:12.001Z"},"0.1.7":{"description":"* Various Bluetooth Low Energy related fixes to make Bluetooth-based communication more reliable.\\n* Accessing a collection using the `collection` function on `DittoStore` is no longer a throwing call and the `name` parameter has been removed.\\n* Accessing a collection can now be done by using a subscript on `DittoStore`, e.g. `store[\\"my-collection\\"]`.\\n* Live query and transport condition updates are now delivered on the main queue by default. You can specify different queues to be used if required.\\n* Adds `queriesHash` and `queriesHashMnemonic` to `DittoStore`, which allow you to get either a numberc hash or string-based mnemonic representation of a client\'s state in relation to the specified queries.\\n* Fixes a `DittoDocument`-related memory leak.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoKit/0.1.7/api-reference/","date_released":"2019-10-29T08:09:30.315Z"},"0.1.8":{"description":"* Fixed Bluetooth Low Energy issue on iOS where sync may never complete, particularly with multiple devices\\n* Cocoa SDK detects when WiFi is disabled\\n* Significant performance improvements in synchronization processing","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoKit/0.1.8/api-reference/","date_released":"2019-11-14T03:22:32.479Z"},"0.1.9":{"description":"* Fixed Bluetooth LE issue specific to older iOS devices (iPhone 6, iPad Mini 4) where sync can fail after the device is locked","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoKit/0.1.9/api-reference/","date_released":"2019-11-25T11:37:40.912Z"},"0.2.0":{"description":"* iOS: New function observePeers() to monitor connections to other Ditto devices\\n* Improved query results performance\\n* Fixed two bugs that could lead to a crash\\n* Many networking improvements to speed up sync on iOS and Android\\n\\nNote: SyncKit 0.2 is incompatible with version 0.1.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoKit/0.2.0/api-reference/","date_released":"2019-12-17T11:51:23.638Z"},"0.2.1":{"description":"* Fixes a crash that can occur when calling stop().","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoKit/0.2.1/api-reference/","date_released":"2020-01-09T04:38:59.387Z"},"0.2.2":{"description":"* Faster Bluetooth sync between iOS devices when reopening app from background","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoKit/0.2.2/api-reference/","date_released":"2020-02-03T00:22:30.307Z"},"0.3.0":{"description":"* DittoKit 0.3 includes incompatible changes to data storage and networking - please uninstall all apps based on DittoKit 0.2 first\\n* The CocoaPod \u201cDittoKit\u201d is now Objective-C. The Swift version is published as \u201cDittoKitSwift\u201d. To continue working with Ditto in Swift, update your Podfile and import statement\\n* Support for attaching large binary files to documents and syncing them on demand\\n* Many SDK functions no longer throw exceptions and the \u201ctry\u201d operator is no longer needed\\n* When creating documents you can no longer specify the id by providing an `_id` key. Instead you must specify an id as an extra argument to the `insert` function, if you want to explicitly set a document\u2019s id\\n* A document\u2019s id property is now `id` rather than `_id`\\n* The parameters for a live query callback have changed\\n* The sort order for a query is now controlled by an ascending/descending enum\\n* Faster sync performance\\n* Ability to connect to a peer at a known address using the Server transport type\\n* You can set your Ditto license key by configuring \u201cDittoAccessLicense\u201d in Info.plist","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoKit/0.3.0/api-reference/","date_released":"2020-06-04T10:09:43.663Z"},"0.3.1":{"description":"* Added a new LAN transport mode WiFiFixedPort to listen for connections on a known port.\\n* DittoKit has a new sdkVersion property describing which build of DittoKit is installed. Please include this information in support requests.\\n* Fixed bug where an attachment transfer may not resume after being interrupted.\\n* Fixed bug where a long-lasting Bluetooth connection may spontaneously disconnect and reconnect.\\n* Improvements to reconnection speed.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoKit/0.3.1/api-reference/","date_released":"2020-07-16T01:16:25.754Z"},"0.3.2":{"description":"* Fixes a memory leak in the Cocoa SDK when using findByID() to query documents.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoKit/0.3.2/api-reference/","date_released":"2020-07-22T01:31:22.954Z"},"0.3.3":{"description":"* Improved LAN background sync for iOS apps","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoKit/0.3.3/api-reference/","date_released":"2020-08-04T05:05:57.389Z"},"0.3.4":{"description":"* Fixed a bug with query compilation where integer literals in the query would\\nlead to a query compilation failure.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoKit/0.3.4/api-reference/","date_released":"2020-08-10T14:25:51.535Z"},"0.3.5":{"description":"* Fixed an issue where inserting data as default data (setting the `isDefault`\\nparameter to true) could lead to data that would not merge as expected.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoKit/0.3.5/api-reference/","date_released":"2020-09-04T19:30:09.440Z"},"0.4.0-alpha1":{"description":"* Note that this is a release with breaking changes, even just in terms of clients running 0.4.0 not being able to communicate with clients running 0.3.X releases.\\n* Fixes for memory leaks.\\n* Performance improvements.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoKit/0.4.0-alpha1/api-reference/","date_released":"2020-09-29T08:18:47.875Z"}},"DittoKitSwift":{"latest":{"description":"* Note that this is a release with breaking changes, even just in terms of clients running 0.4.0 not being able to communicate with clients running 0.3.X releases.\\n* Fixes for memory leaks.\\n* Performance improvements.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoKitSwift/0.4.0-alpha1/api-reference/","date_released":"2020-09-29T08:46:26.731Z"},"0.3.1":{"description":"* Added a new LAN transport mode WiFiFixedPort to listen for connections on a known port.\\n* DittoKit has a new sdkVersion property describing which build of DittoKit is installed. Please include this information in support requests.\\n* Fixed bug where an attachment transfer may not resume after being interrupted.\\n* Fixed bug where a long-lasting Bluetooth connection may spontaneously disconnect and reconnect.\\n* Improvements to reconnection speed.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoKitSwift/0.3.1/api-reference/","date_released":"2020-07-16T01:27:39.752Z"},"0.3.2":{"description":"* Fixes a memory leak in the Cocoa SDK when using findByID() to query documents.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoKitSwift/0.3.2/api-reference/","date_released":"2020-07-22T01:42:59.976Z"},"0.3.3":{"description":"* Improved LAN background sync for iOS apps","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoKitSwift/0.3.3/api-reference/","date_released":"2020-08-04T05:15:54.368Z"},"0.3.4":{"description":"* Fixed a bug with query compilation where integer literals in the query would\\nlead to a query compilation failure.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoKitSwift/0.3.4/api-reference/","date_released":"2020-08-10T14:31:52.225Z"},"0.3.5":{"description":"* Fixed an issue where inserting data as default data (setting the `isDefault`\\nparameter to true) could lead to data that would not merge as expected.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoKitSwift/0.3.5/api-reference/","date_released":"2020-09-04T19:36:44.327Z"},"0.4.0-alpha1":{"description":"* Note that this is a release with breaking changes, even just in terms of clients running 0.4.0 not being able to communicate with clients running 0.3.X releases.\\n* Fixes for memory leaks.\\n* Performance improvements.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoKitSwift/0.4.0-alpha1/api-reference/","date_released":"2020-09-29T08:46:26.731Z"}},"DittoSyncKit":{"latest":{"description":"* `DITLogger` class added, which allows extra logging functionality through\\n  `setCustomLogCallback` and `setLogFile`/`setLogFileURL`.\\n* `CFBundleShortVersionString` in the framework\'s Info.plist now only contains\\n  alphanumeric characters, which should resolve any issues with submitting apps\\n  to TestFlight or the App Store.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSyncKit/1.0.0-alpha7/api-reference/","date_released":"2021-01-04T11:12:22.653Z"},"1.0.0-alpha1":{"description":"* Note that this is a release with breaking changes and clients using releases\\nin the 1.0 series will not be able to communicate with clients running a version\\nthat is anything less than 1.0. This should hopefully not be an issue because\\nthis release of the SDK has changed the name to be DittoSyncKit as opposed to\\nDittoKit.\\n* Lots of performance improvements and some bug fixes.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSyncKit/1.0.0-alpha1/api-reference/","date_released":"2020-10-09T18:31:20.120Z"},"1.0.0-alpha3":{"description":"* Added new `observeWithNextSignal` API to allow the application to control the\\ndelivery of the next observe callback event.\\n* Fixed several issues related to attachments that could delay sync.\\n* Simplified log statements","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSyncKit/1.0.0-alpha3/api-reference/","date_released":"2020-11-04T18:53:13.403Z"},"1.0.0-alpha4":{"description":"* Fix issue where attachments could stop being fetched incorrectly.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSyncKit/1.0.0-alpha4/api-reference/","date_released":"2020-11-10T11:14:57.436Z"},"1.0.0-alpha5":{"description":"* Added a new intermediate security identity for a shared secret key. This is a simplistic authentication mode which is normally only suitable for private apps where all the users and devices are trusted.\\n* Fixed an issue that prevented Counter values from syncing correctly\\n* Renamed DittoAttachmentStatus to DittoAttachmentFetchEvent and subsequently Incomplete status to Progress.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSyncKit/1.0.0-alpha5/api-reference/","date_released":"2020-11-22T20:57:11.310Z"},"1.0.0-alpha6":{"description":"* Performance and stability improvements.\\n* Fix default data insertion such that merge semantics are consistent and\\n  duplicate data isn\'t created.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSyncKit/1.0.0-alpha6/api-reference/","date_released":"2020-12-15T01:00:39.147Z"},"1.0.0-alpha7":{"description":"* `DITLogger` class added, which allows extra logging functionality through\\n  `setCustomLogCallback` and `setLogFile`/`setLogFileURL`.\\n* `CFBundleShortVersionString` in the framework\'s Info.plist now only contains\\n  alphanumeric characters, which should resolve any issues with submitting apps\\n  to TestFlight or the App Store.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSyncKit/1.0.0-alpha7/api-reference/","date_released":"2021-01-04T11:12:22.653Z"}},"DittoSyncKitSwift":{"latest":{"description":"* `DittoLogger` class added, which allows extra logging functionality through\\n  `setCustomLogCallback` and `setLogFile`/`setLogFileURL`.\\n* `CFBundleShortVersionString` in the framework\'s Info.plist now only contains\\n  alphanumeric characters, which should resolve any issues with submitting apps\\n  to TestFlight or the App Store.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSyncKitSwift/1.0.0-alpha7/api-reference/","date_released":"2021-01-04T11:12:22.654Z"},"1.0.0-alpha1":{"description":"* Note that this is a release with breaking changes and clients using releases\\nin the 1.0 series will not be able to communicate with clients running a version\\nthat is anything less than 1.0. This should hopefully not be an issue because\\nthis release of the SDK has changed the name to be DittoSyncKitSwift as opposed\\nto DittoKitSwift.\\n* Lots of performance improvements and some bug fixes.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSyncKitSwift/1.0.0-alpha1/api-reference/","date_released":"2020-10-09T20:22:39.894Z"},"1.0.0-alpha3":{"description":"* Added new `observeWithNextSignal` API to allow the application to control the\\ndelivery of the next observe callback event.\\n* Fixed several issues related to attachments that could delay sync.\\n* Simplified log statements","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSyncKitSwift/1.0.0-alpha3/api-reference/","date_released":"2020-11-06T11:50:36.667Z"},"1.0.0-alpha4":{"description":"* Fix issue where attachments could stop being fetched incorrectly.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSyncKitSwift/1.0.0-alpha4/api-reference/","date_released":"2020-11-10T11:27:15.848Z"},"1.0.0-alpha5":{"description":"* Added a new intermediate security identity for a shared secret key. This is a simplistic authentication mode which is normally only suitable for private apps where all the users and devices are trusted. \\n* Fixed an issue that prevented Counter values from syncing correctly\\n* Renamed DittoAttachmentStatus to DittoAttachmentFetchEvent and subsequently Incomplete status to Progre\\nss.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSyncKitSwift/1.0.0-alpha5/api-reference/","date_released":"2020-11-22T21:17:53.361Z"},"1.0.0-alpha6":{"description":"* Performance and stability improvements.\\n* Fix default data insertion such that merge semantics are consistent and\\n  duplicate data isn\'t created.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSyncKitSwift/1.0.0-alpha6/api-reference/","date_released":"2020-12-15T01:00:39.148Z"},"1.0.0-alpha7":{"description":"* `DittoLogger` class added, which allows extra logging functionality through\\n  `setCustomLogCallback` and `setLogFile`/`setLogFileURL`.\\n* `CFBundleShortVersionString` in the framework\'s Info.plist now only contains\\n  alphanumeric characters, which should resolve any issues with submitting apps\\n  to TestFlight or the App Store.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSyncKitSwift/1.0.0-alpha7/api-reference/","date_released":"2021-01-04T11:12:22.654Z"}},"DittoObjC":{"1.0.0-alpha8":{"description":"* Site IDs, which make up part of a Ditto identity object, are now unsigned,\\n64-bit integers instead of unsigned 32-bit integers.\\n* Fix a crash that could occur if an offset with a value greater than the number\\nof matching documents was provided.\\n* Fix a potential crash that would occur if a live query had `stop` called on it\\nimmediately after it was created.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.0.0-alpha8/api-reference/","date_released":"2021-01-22T15:09:01.907Z"},"latest":{"description":"Synchronized version bump release.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.1.7/api-reference/","date_released":"2022-05-13T14:18:18.404Z"},"1.0.0-alpha9":{"description":"* Fixed a bug where mDNS advertising may continue after Ditto is stopped.\\n* Fixed a hang that could occur creating an attachment fetcher while requesting many attachments at once.\\n* Fixed sync failure when there are multiple overlapping subscriptions or live queries with the same query string for the same collection.\\n* Fixed a potential crash and other sync failures that could occur under certain conditions.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.0.0-alpha9/api-reference/","date_released":"2021-02-05T00:58:10.294Z"},"1.0.0":{"description":"* This release is not compatible with any previous SDK releases. There are a\\nnumber of breaking changes both in terms of the SDK API and in terms of the\\ninternal systems used by the SDK to perform operations such as synchronization.\\nIf you have previously made use of the Ditto SDK and wish to update to this\\nversion then note that you will need to delete all existing Ditto data otherwise\\nyou will run into errors. If you have existing data that you need to keep then\\nplease contact us and we can advise you as to how you can migrate your data.\\n* The most notable API breaking changes are:\\n  * Document IDs are no longer restricted to just strings. You can now create\\n    a document ID that is a string, integer, boolean, array, map, or null. This\\n    means that when making `findByID` or `insert` calls you now need to provide\\n    a `DITDocumentID` object rather than a string. Similarly, when you access a\\n    document\'s ID it will now return a `DITDocumentID` object instead of a\\n    string.\\n  * The `start()` and `stop()` functions on the `Ditto` object have been renamed\\n    to `startSync()` and `stopSync()` respectively. They now also don\'t accept\\n    any arguments. If you wish to specify which transports you would like the\\n    Ditto SDK to make use of (along with any configuration that they might\\n    require) you now need to use the `setTransportConfig` function on the\\n    `Ditto` object, and pass to that a transport config object. The default\\n    transports that will be enabled are still the same as they were in previous\\n    releases of the SDK though, so if you have no custom requirements then you\\n    can simply change your `start()` call to `startSync()`.\\n* Lots of performance improvements and bug fixes.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.0.0/api-reference/","date_released":"2021-04-22T00:29:50.320Z"},"1.0.1":{"description":"* If you provide an invalid query then you will now get a better error message.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.0.1/api-reference/","date_released":"2021-05-04T16:02:44.151Z"},"1.0.2":{"description":"* Add support for subscripting `DITDocumentID`s in order to get nested values\\nwhen a document ID is based on an array or a dictionary.\\n* Deprecated `.toNative()` on `DITDocumentID`. You should use `.value`\\ninstead.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.0.2/api-reference/","date_released":"2021-05-20T21:39:10.588Z"},"1.0.3":{"description":"* Bluetooth sync performance improvements with L2CAP support added.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.0.3/api-reference/","date_released":"2021-06-10T16:34:52.104Z"},"1.0.4":{"description":"* Fix issue with AWDL transport where it could end up in a stuck state.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.0.4/api-reference/","date_released":"2021-06-11T22:36:42.265Z"},"1.0.5":{"description":"* Added a new `find` function that accepts a query containing placeholders in\\n  the form of `$args.my_arg` along with a map of query arguments in the form of\\n  `{ \\"my_arg\\": \\"some value\\" }`. The placeholders in the query will be replaced\\n  by a query-appropriate representation of the relevant value from the map of\\n  query arguments.\\n\\n  For example, a query of `color == $args.color` with a query arguments map of\\n  `{ \\"color\\": \\"red\\" }` would internally be treated as a query of:\\n  `color == \\"red\\"`.\\n* Added the ability to get a hash and/or a mnemonic (string) representation of\\n  the matching documents from a live query event. This means you can do\\n  something like this:\\n\\n  ```objc\\n  DITLiveQuery *liveQuery = [[collection findAll] observe:^(NSArray<DITDocument *> *docs, DITLiveQueryEvent *event)\\n      [event hash:docs]; // e.g. `1950015808188223905`\\n      [event hashMnemonic:docs]; // e.g. `locate-quality-tina--helena-remote-cat`\\n      // ...\\n  }];\\n  ```\\n* Fix for using floats in queries.\\n* Accessing the `store` property of a `Ditto` instance will no longer throw an\\n  error if you have not yet activated your `Ditto` instance with a valid license\\n  token.\\n* Deprecated `setAccessLicense` and added a new function, `setLicenseToken`,\\n  which will set an error out param if your provided license token is expired\\n  or invalid somehow.\\n* Deprecated `startSync` and added a new function, `tryStartSync`, which will\\n  set an error out param if your `Ditto` instance hasn\'t yet been activated via\\n  a successful call to `setLicenseToken`.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.0.5/api-reference/","date_released":"2021-06-25T22:36:18.096Z"},"1.0.6":{"description":"* Add `value` accessor on `DITDocumentPath`, `DITMutableDocumentPath`, and\\n`DITDocumentIDPath` types to allow accessing a nested value in a document/ID as\\nan `id`.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.0.6/api-reference/","date_released":"2021-07-08T18:22:41.808Z"},"1.0.7":{"description":"* Fix bug where sync may fail if an unusually long `deviceName` is configured\\n* Fix intermittent crash when Bluetooth L2CAP connections fail\\n* Fix intermittent crash when using the presence viewer component and the app is backgrounded","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.0.7/api-reference/","date_released":"2021-07-22T23:38:10.554Z"},"1.0.8":{"description":"* Improved debug logging.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.0.8/api-reference/","date_released":"2021-08-02T16:19:41.134Z"},"1.0.9":{"description":"* Added support for getting information about all of the collections that the device is aware of. This is achieved by accessing `collections()` through the store object and then using the same sort of API used when getting documents in collections, i.e. `exec/observe/etc`.\\n* Added multicast as a transport option to the `LAN` config part of `TransportConfig`.\\n* Added new identity types: `Online` and `OnlinePlayground.` An `Online` identity should be used when running Ditto in secure production mode, logging on to Ditto Cloud, or using an on-premises authentication server. User permissions are centrally managed. Sync will not work until a successful login has occurred. An `OnlinePlayground` identity should be used when you want to test a Ditto Cloud app without authentication (\\"Playground mode\\"). This mode offers no security and must only be used for development.\\n* The `Production` identity has been renamed to `Manual`.\\n* Added a `DITAuthenticator` type, accessible via the `Ditto` object, which allows you to perform login operations when you\'re using an `Online` identity.\\n* Similarly, added a `DITAuthenticationDelegate` type that needs to be used when using an `Online` identity.\\n* Report an error if more than one Ditto instance is started using the same working directory.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.0.9/api-reference/","date_released":"2021-09-03T22:38:24.690Z"},"1.0.10":{"description":"* Fix for incorrectly included header.\\n* Fix to stop a change in site ID from leading to an unnecessary error.\\n* Improve handling of persisted authentication data. Note that this might lead\\n  to a one-off change to a peer\'s site ID if you weren\'t and continue to not be\\n  specifying an explicit site ID when creating your identity.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.0.10/api-reference/","date_released":"2021-09-10T16:21:51.194Z"},"1.0.11":{"description":"- Fixed AWDL peers never re-connecting after transport is toggled.\\n- Fixed mDNS transport crash.\\n- Fixed sporadic hangs and crashes when using Online identity.\\n- Added `DITWriteStrategy` enum.\\n- Added methods `-[Collection insert:writeStrategy:error]` and `-[Collection insert:withID:writeStrategy:error]`, allowing to specify the behavior when inserting a document with an ID that matches the ID of a document already in the store.\\n- Added `isAuthenticated` and `userID` methods to `DITAuthenticator`.\\n- Deprecated `-[Collection insert:isDefault:error]` and `-[Collection insert:withID:isDefault:error]` in favor of write strategy variants.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.0.11/api-reference/","date_released":"2021-10-08T05:09:27.624Z"},"1.0.12":{"description":"- Added `global` section to `TransportConfig` allowing P2P sync to be contained within certain groups of devices by putting them in the same \\"sync group\\".","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.0.12/api-reference/","date_released":"2021-10-18T10:00:50.920Z"},"1.0.13":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.0.13/api-reference/","date_released":"2021-10-18T17:02:38.549Z"},"1.0.14":{"description":"* Add support for array projections to DittoQL.\\n* Deprecate the `Online` identity in favor of the new `OnlineWithAuthentication`\\n  identity.\\n* Deprecate the `Development` identity in favor of the new `OfflinePlayground`\\n  identity.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.0.14/api-reference/","date_released":"2021-10-25T08:31:34.910Z"},"1.0.15-alpha1":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.0.15-alpha1/api-reference/","date_released":"2021-10-27T10:33:50.885Z"},"1.0.15":{"description":"* Ensure that when performing a `sort` that if a document that matches the\\n  filter specified via the accompanying `find` call doesn\'t have the key\\n  specified in the `sort` expression then it won\'t lead to an error. Now, if\\n  you\'re sorting in a descending order then the documents without the key\\n  specified in the `sort` will appear at the end of the set of results, after\\n  all of the documents that do have the key present. If you\'re sorting in an\\n  ascending order then the documents without the `sort` key will appear first in\\n  the set of documents, before all of the documents that do contain the `sort`\\n  key.\\n* Fix a bug where some transports related calls were not being run on the\\n  correct thread and so could lead to a crash.\\n* Add an extra initializer for `OnlinePlayground` identities: `initOnlinePlaygroundWithAppID:(NSString *)appID enableDittoCloudSync:(BOOL)enableDittoCloudSync`","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.0.15/api-reference/","date_released":"2021-11-05T22:03:49.597Z"},"1.0.16":{"description":"* Fix an issue with live queries that involved a limit, no offset, at least one\\n  document being deleted, and some other conditions being met. Live queries that\\n  met these conditions could report incorrect sets of matching documents.\\n* Fix an issue that could potentially lead to an infinite loop in the\\n  replication system, meaning no sync progress would be made.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.0.16/api-reference/","date_released":"2021-11-19T22:39:48.765Z"},"1.0.17":{"description":"* Fix an issue with write strategies not working correctly. Unexpected results\\n  could occur when performing sequences of operations on documents.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.0.17/api-reference/","date_released":"2021-11-26T00:11:42.917Z"},"1.0.18-alpha1":{"description":"* Fixed an issue where document IDs that were specified inside the document\'s\\n  value as opposed to being specified explicitly (as a separate argument to\\n  `insert`) weren\'t being processed correctly, potentially leading to bugs with\\n  merge and overwrite behaviors.\\n* macOS (including Apple Silicon) and iOS simulator (on an Apple Silicon device)\\n  support has been added.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.0.18-alpha1/api-reference/","date_released":"2021-12-08T17:25:36.987Z"},"1.0.18-alpha2":{"description":"* Improve attachment sync performance.\\n* Fix an issue where memory usage could grow very quickly when using a live\\n  query and performing lots of operations that led to a live query update.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.0.18-alpha2/api-reference/","date_released":"2021-12-14T16:32:13.955Z"},"1.0.18":{"description":"* Fixed some small memory leaks.\\n* Reduced the opportunity for rapid memory growth in some scenarios.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.0.18/api-reference/","date_released":"2021-12-20T13:22:16.631Z"},"1.0.19":{"description":"- Fixed: collections were not appearing in the data browser under certain permission configurations.\\n- Fixed: race condition when subscriptions were configured from multiple threads in parallel (sometimes leading to a crash).","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.0.19/api-reference/","date_released":"2021-12-23T20:42:05.709Z"},"1.1.0":{"description":"- Changed: improved peer-to-peer algorithms to create meshes that are more efficient and diverse.\\n- Changed: improved routing algorithms for more efficiency.\\n- Changed: improved performance of query parsing.\\n- Added: property `isSyncActive` to class `Ditto`.\\n- Added: methods `logout` and `logout:` to class `DITAuthenticator`.\\n- Added: set of APIs to observe authentication status, see (see API reference for `DITAuthenticator` and `DITAuthenticationDelegate`).\\n- Added: method `upsert:` & friends to classes `DITCollection` and `DITScopedWriteTransaction` (as a replacement for `insert:` & friends) which by default merges the newly inserted document if one with the same ID already exists.\\n- Deprecated: properties `isAuthenticated` and `userID` of class `DITAuthenticator` in favor of newly introduced property `status`.\\n- Deprecated: methods `insert:` & frinds of classes `DITCollection` and `DITScopedWriteTransaction` in favor of newly introduced `upsert:` & friends.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.1.0/api-reference/","date_released":"2022-01-28T11:21:11.092Z"},"1.1.1":{"description":"- Changed: Optimized the performance of accessing the value of a `Document`\\n- Added: Experimental Bus API\\n  - Changed: `DITBus.delegate` property is now weak\\n  - Added: `-sendSingleUnreliableMessage:toAddress:completion:` method to `DITBus` class\\n  - Added: `-sendSingleReliableMessage:toAddress:completion:` method to `DITBus` class\\n  - Added: `-openStreamToAddress:reliability:completion:` method to `DITBus` class\\n  - Added: `-ditBus:didReceiveSingleMessage:` method to `DITBusDelegate` protocol\\n  - Added: `-ditBus:didReceiveIncomingStream:fromPeer:` method to `DITBusDelegate` protocol\\n  - Removed: `-ditBus:didReceiveMessage:` method from `DITBusDelegate` protocol\\n  - Added: `DITBusStream` class\\n  - Added: `DITBusStreamDelegate` protocol\\n- Added: Experimental mesh roles API\\n  - Added: `-setMeshRole(meshRole:ditto:)` method to `DITExperimental` class\\n  - Added: `-setPriorityForMeshRole(_:forMeshRole:ditto:)` to `DITExperimental` class\\n- Fixed: Improved AWDL reliability on iOS 12","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.1.1/api-reference/","date_released":"2022-02-12T05:38:19.843Z"},"1.1.2":{"description":"- Added: property `isReady` to experimental `DITBusStream` to check if a message may be enqueued.\\n- Added: method `setOfflineOnlyLicenseToken:error:` to class `DITDitto` as replacement for now deprecated `setLicenseToken:error:`.\\n- Deprecated: method `setLicenseToken:error:` of class `DITDitto`, please use newly added `setOfflineOnlyLicenseToken:error:` instead.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.1.2/api-reference/","date_released":"2022-02-28T14:36:18.965Z"},"1.1.3":{"description":"- Added: `DittoOnlinePlaygroundV2Identity` identity type and corresponding initializers for `DITIdentity` (`initOnlinePlaygroundV2WithAppID:...`) allowing for basic authentication for playgrounds\\n\\n- Deprecated: `DittoOnlinePlaygroundIdentity` identity type and corresponding initializers, use newly added `DittoOnlinePlaygroundV2Identity` instead\\n\\n- Fixed: document IDs are now validated when synced and removed if invalid (some of our early versions of the SDK stored malformed IDs under certain circumstances)","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.1.3/api-reference/","date_released":"2022-03-22T10:13:57.387Z"},"1.1.4":{"description":"- Changed: improved replication performance in some scenarios.\\n- Fixed: a document containing untrusted strings could be incorrectly decoded by the Objective-C SDK.\\n- Fixed: some integers were being incorrectly encoded.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.1.4/api-reference/","date_released":"2022-04-08T06:25:26.109Z"},"1.1.5":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.1.5/api-reference/","date_released":"2022-04-08T08:00:56.518Z"},"1.1.6":{"description":"- Fixed: a correctness issue in replication when peer permissions changed in the middle of a replication exchange.\\n- Fixed: error when querying a collection and there was a type mismatch for a field being used in a comparison in the query. \\n- Fixed: restarting an app too quickly could lead to multiple connection attempts to rejoin peers in the mesh.\\n- Fixed: apps using `OnlinePlaygroundV2` identities could experience a one minute delay before peer-to-peer sync occurs.\\n- Fixed: cloud sync would stop working when setting a newly created transport config.\\n- Changed: improvements to Ditto mesh performance via fastest-available-transport prioritization.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.1.6/api-reference/","date_released":"2022-05-09T12:04:39.208Z"},"1.1.7":{"description":"Synchronized version bump release.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoObjC/1.1.7/api-reference/","date_released":"2022-05-13T14:18:18.404Z"}},"DittoSwift":{"1.0.0-alpha8":{"description":"* Site IDs, which make up part of a Ditto identity object, are now unsigned,\\n64-bit integers instead of unsigned 32-bit integers.\\n* Fix a crash that could occur if an offset with a value greater than the number\\nof matching documents was provided.\\n* Fix a potential crash that would occur if a live query had `stop` called on it\\nimmediately after it was created.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.0.0-alpha8/api-reference/","date_released":"2021-01-22T15:09:01.907Z"},"latest":{"description":"Synchronized version bump release.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.1.7/api-reference/","date_released":"2022-05-13T14:18:18.404Z"},"1.0.0-alpha9":{"description":"* Fixed a bug where mDNS advertising may continue after Ditto is stopped.\\n* Fixed a hang that could occur creating an attachment fetcher while requesting many attachments at once.\\n* Fixed sync failure when there are multiple overlapping subscriptions or live queries with the same query string for the same collection.\\n* Fixed a potential crash and other sync failures that could occur under certain conditions.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.0.0-alpha9/api-reference/","date_released":"2021-02-05T00:58:10.294Z"},"1.0.0":{"description":"* This release is not compatible with any previous SDK releases. There are a\\nnumber of breaking changes both in terms of the SDK API and in terms of the\\ninternal systems used by the SDK to perform operations such as synchronization.\\nIf you have previously made use of the Ditto SDK and wish to update to this\\nversion then note that you will need to delete all existing Ditto data otherwise\\nyou will run into errors. If you have existing data that you need to keep then\\nplease contact us and we can advise you as to how you can migrate your data.\\n* The most notable API breaking changes are:\\n  * Document IDs are no longer restricted to just strings. You can now create\\n    a document ID that is a string, integer, boolean, array, map, or null. This\\n    means that when making `findByID` or `insert` calls you now need to provide\\n    a `DittoDocumentID` object rather than a string. Similarly, when you access\\n    a document\'s ID it will now return a `DittoDocumentID` object instead of a\\n    string.\\n  * The `start()` and `stop()` functions on the `Ditto` object have been renamed\\n    to `startSync()` and `stopSync()` respectively. They now also don\'t accept\\n    any arguments. If you wish to specify which transports you would like the\\n    Ditto SDK to make use of (along with any configuration that they might\\n    require) you now need to use the `setTransportConfig` function on the\\n    `Ditto` object, and pass to that a transport config object. The default\\n    transports that will be enabled are still the same as they were in previous\\n    releases of the SDK though, so if you have no custom requirements then you\\n    can simply change your `start()` call to `startSync()`.\\n* Lots of performance improvements and bug fixes.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.0.0/api-reference/","date_released":"2021-04-22T00:29:50.320Z"},"1.0.1":{"description":"* If you provide an invalid query then you will now get a better error message.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.0.1/api-reference/","date_released":"2021-05-04T16:02:44.151Z"},"1.0.2":{"description":"* Add support for subscripting `DittoDocumentID`s in order to get nested values\\nwhen a document ID is based on an array or a dictionary.\\n* Deprecated `.toNative()` on `DittoDocumentID`. You should use `.value`\\ninstead.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.0.2/api-reference/","date_released":"2021-05-20T21:39:10.588Z"},"1.0.3":{"description":"* Bluetooth sync performance improvements with L2CAP support added.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.0.3/api-reference/","date_released":"2021-06-10T16:34:52.104Z"},"1.0.4":{"description":"* Fix issue with AWDL transport where it could end up in a stuck state.\\n* Deprecate the `find(query:)` function on `DittoScopedWriteTransaction` and add\\n  a new version of `find(:)` that doesn\'t require the `query` argument label.\\n  This makes this consistent with the `find(:)` function on `DittoCollection`.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.0.4/api-reference/","date_released":"2021-06-11T22:36:42.265Z"},"1.0.5":{"description":"* Added a new `find` function that accepts a query containing placeholders in\\n  the form of `$args.my_arg` along with a map of query arguments in the form of\\n  `{ \\"my_arg\\": \\"some value\\" }`. The placeholders in the query will be replaced\\n  by a query-appropriate representation of the relevant value from the map of\\n  query arguments.\\n\\n  For example, a query of `color == $args.color` with a query arguments map of\\n  `{ \\"color\\": \\"red\\" }` would internally be treated as a query of:\\n  `color == \\"red\\"`.\\n* Added the ability to get a hash and/or a mnemonic (string) representation of\\n  the matching documents from a live query event. This means you can do\\n  something like this:\\n\\n  ```swift\\n  let liveQuery = collection.findAll().observe() { docs, event in\\n      event.hash(docs); // e.g. `1950015808188223905`\\n      event.hashMnemonic(docs); // e.g. `locate-quality-tina--helena-remote-cat`\\n      // ...\\n  }\\n  ```\\n* Fix for using floats in queries.\\n* Accessing the `store` property of a `Ditto` instance will no longer throw an\\n  error if you have not yet activated your `Ditto` instance with a valid license\\n  token.\\n* Deprecated `setAccessLicense` and added a new function, `setLicenseToken`,\\n  which will throw an appropriate error if your provided license token is\\n  expired or invalid somehow.\\n* Deprecated `startSync` and added a new function, `tryStartSync`, which will\\n  throw an error if your `Ditto` instance hasn\'t yet been activated via a\\n  successful call to `setLicenseToken`.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.0.5/api-reference/","date_released":"2021-06-25T22:36:18.096Z"},"1.0.6":{"description":"* Add `value` accessor on `DittoDocumentPath`, `DittoMutableDocumentPath`, and\\n`DittoDocumentIDPath` types to allow accessing a nested value in a document/ID\\nas an `Any?`.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.0.6/api-reference/","date_released":"2021-07-08T18:22:41.809Z"},"1.0.7":{"description":"* Fix bug where sync may fail if an unusually long `deviceName` is configured\\n* Fix intermittent crash when Bluetooth L2CAP connections fail\\n* Fix intermittent crash when using the presence viewer component and the app is backgrounded","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.0.7/api-reference/","date_released":"2021-07-22T23:38:10.554Z"},"1.0.8":{"description":"* Improved debug logging.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.0.8/api-reference/","date_released":"2021-08-02T16:19:41.134Z"},"1.0.9":{"description":"* Added support for getting information about all of the collections that the device is aware of. This is achieved by accessing `collections()` through the store object and then using the same sort of API used when getting documents in collections, i.e. `exec/observe/etc`.\\n* Added multicast as a transport option to the `LAN` config part of `TransportConfig`.\\n* Added new identity types: `Online` and `OnlinePlayground.` An `Online` identity should be used when running Ditto in secure production mode, logging on to Ditto Cloud, or using an on-premises authentication server. User permissions are centrally managed. Sync will not work until a successful login has occurred. An `OnlinePlayground` identity should be used when you want to test a Ditto Cloud app without authentication (\\"Playground mode\\"). This mode offers no security and must only be used for development.\\n* The `Production` identity has been renamed to `Manual`.\\n* Added a `DittoAuthenticator` type, accessible via the `Ditto` object, which allows you to perform login operations when you\'re using an `Online` identity.\\n* Similarly, added an `DittoAuthenticationDelegate` type that needs to be used when using an `Online` identity.\\n* Report an error if more than one Ditto instance is started using the same working directory.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.0.9/api-reference/","date_released":"2021-09-03T22:38:24.690Z"},"1.0.10":{"description":"* Fix to stop a change in site ID from leading to an unnecessary error.\\n* Improve handling of persisted authentication data. Note that this might lead\\n  to a one-off change to a peer\'s site ID if you weren\'t and continue to not be\\n  specifying an explicit site ID when creating your identity.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.0.10/api-reference/","date_released":"2021-09-10T16:21:51.194Z"},"1.0.11":{"description":"- Added `DittoWriteStrategy` enum.\\n- Added method `insertWithStrategy()` to `DittoCollection`, allowing to specify the behavior when inserting a document with an ID that matches the ID of a document already in the store.\\n- Fixed AWDL peers never re-connecting after transport is toggled.\\n- Fixed mDNS transport crash.\\n- Fixed sporadic hangs and crashes when using Online identity.\\n- Added `isAuthenticated()` method and `userID` property to `DittoAuthenticator`.\\n- Fixed Codable support for non-string IDs and `Float` and `Double` types.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.0.11/api-reference/","date_released":"2021-10-08T05:09:27.624Z"},"1.0.12":{"description":"- Added `global` section to `TransportConfig` allowing P2P sync to be contained within certain groups of devices by putting them in the same \\"sync group\\".\\n- Fixed Xcode warning regarding .swiftsourceinfo files being present.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.0.12/api-reference/","date_released":"2021-10-18T10:00:50.921Z"},"1.0.13":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.0.13/api-reference/","date_released":"2021-10-18T17:02:38.549Z"},"1.0.14":{"description":"* Add support for array projections to DittoQL.\\n* Deprecate the `online` identity in favor of the new `onlineWithAuthentication`\\n  identity.\\n* Deprecate the `development` identity in favor of the new `offlinePlayground`\\n  identity.\\n* Add an `auth` property to `Ditto` that provides access to a\\n  `DittoAuthenticator` when using an appropriate identity with your `Ditto`\\n  instance.\\n* Add support for using a document ID that is an object that conforms to\\n  `Codable`.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.0.14/api-reference/","date_released":"2021-10-25T08:31:34.911Z"},"1.0.15-alpha1":{"description":"* Fix a bug where large integers (greater than `Int.max`) would mistakenly try\\n  to get internally represented by an `Int`. They are now correctly represented\\n  using a `UInt` instead.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.0.15-alpha1/api-reference/","date_released":"2021-10-27T10:33:50.885Z"},"1.0.15":{"description":"* Ensure that when performing a `sort` that if a document that matches the\\n  filter specified via the accompanying `find` call doesn\'t have the key\\n  specified in the `sort` expression then it won\'t lead to an error. Now, if\\n  you\'re sorting in a descending order then the documents without the key\\n  specified in the `sort` will appear at the end of the set of results, after\\n  all of the documents that do have the key present. If you\'re sorting in an\\n  ascending order then the documents without the `sort` key will appear first in\\n  the set of documents, before all of the documents that do contain the `sort`\\n  key.\\n* Fixed handling of large integers in documents. Integers larger than `Int.max`\\n  were still trying to be handled as `Int`s, leading to crashes. We now\\n  correctly handle them as `UInt`s when appropriate.\\n* Add the ability to directly set values inside the closure passed to an\\n  `update` call with assignments done via `=` sets, e.g.\\n  `collection.findByID(\\"123\\").update { $0![\\"color\\"] = \\"white\\" }`\\n* Fix a bug where some transports related calls were not being run on the\\n  correct thread and so could lead to a crash.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.0.15/api-reference/","date_released":"2021-11-05T22:03:49.597Z"},"1.0.16":{"description":"* Fix an issue with live queries that involved a limit, no offset, at least one\\n  document being deleted, and some other conditions being met. Live queries that\\n  met these conditions could report incorrect sets of matching documents.\\n* Fix an issue that could potentially lead to an infinite loop in the\\n  replication system, meaning no sync progress would be made.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.0.16/api-reference/","date_released":"2021-11-19T22:39:48.765Z"},"1.0.17":{"description":"* Fix an issue with write strategies not working correctly. Unexpected results\\n  could occur when performing sequences of operations on documents.\\n* Fix a bug with `Codable`-conforming enums that was causing a runtime error.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.0.17/api-reference/","date_released":"2021-11-26T00:11:42.917Z"},"1.0.18-alpha1":{"description":"* Fixed an issue where document IDs that were specified inside the document\'s\\n  value as opposed to being specified explicitly (as a separate argument to\\n  `insert`) weren\'t being processed correctly, potentially leading to bugs with\\n  merge and overwrite behaviors.\\n* macOS (including Apple Silicon) and iOS simulator (on an Apple Silicon device)\\n  support has been added.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.0.18-alpha1/api-reference/","date_released":"2021-12-08T17:25:36.987Z"},"1.0.18-alpha2":{"description":"* Improve attachment sync performance.\\n* Fix an issue where memory usage could grow very quickly when using a live\\n  query and performing lots of operations that led to a live query update.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.0.18-alpha2/api-reference/","date_released":"2021-12-14T16:32:13.955Z"},"1.0.18":{"description":"* Fixed a number of `Codable`-related bugs. One of the more notable fixes\\n  involves `Codable`-conforming types from `Foundation` now working as you\'d\\n  expect.\\n* Fixed some small memory leaks.\\n* Reduced the opportunity for rapid memory growth in some scenarios.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.0.18/api-reference/","date_released":"2021-12-20T13:22:16.631Z"},"1.0.19":{"description":"- Fixed: collections were not appearing in the data browser under certain permission configurations.\\n- Fixed: race condition when subscriptions were configured from multiple threads in parallel (sometimes leading to a crash).","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.0.19/api-reference/","date_released":"2021-12-23T20:42:05.710Z"},"1.1.0":{"description":"- Changed: improved peer-to-peer algorithms to create meshes that are more efficient and diverse.\\n- Changed: improved routing algorithms for more efficiency.\\n- Changed: improved performance of query parsing.\\n- Added: property `isSyncActive` to class `Ditto`.\\n- Added: method `logout()` to class `DittoAuthenticator`.\\n- Added: set of APIs to observe authentication status (see API reference for `DittoAuthenticator` and `DittoAuthenticationDelegate`).\\n- Added: method `upsert()` to classes `DittoCollection` and `DittoScopedWriteTransaction` (as a replacement for `insert()` & friends) which by default merges the newly inserted document if one with the same ID already exists.\\n- Deprecated: properties `isAuthenticated` and `userID` of class `DittoAuthenticator` in favor of newly introduced property `status`.\\n- Deprecated: methods `insert()` & frinds of classes `DittoCollection` and `DittoScopedWriteTransaction` in favor of newly introduced `upsert()`.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.1.0/api-reference/","date_released":"2022-01-28T11:21:11.092Z"},"1.1.1":{"description":"- Changed: Optimized the performance of accessing the value of a `Document`\\n- Added: Combine publisher APIs obviating the CombineDitto extension library\\n  - Added: `remotePeersPublisher()` method to `Ditto` class\\n  - Added: `fetchAttachmentPublisher(attachmentToken:)` method to `DittoCollection` class\\n  - Added: `liveQueryPublisher()` method to `DittoPendingCursorOperation` class\\n  - Added: `singleDocumentLiveQueryPublisher()` method to `DittoPendingIDSpecificOperation` class\\n- Added: Experimental Bus API\\n  - Added: `dittoBus(_, didReceiveSingleMessage:)` method to `DittoBusDelegate` protocol\\n  - Added: `dittoBus(_, didReceiveIncomingStream:, fromPeer:)` method to `DittoBusDelegate` protocol\\n  - Removed: `dittoBus(_, didReceive:)` method from `DittoBusDelegate protocol\\n- Added: Experimental mesh roles API\\n  - Added: `setMeshRole(meshRole:, ditto:)` method to `DittoExperimental` class\\n  - Added: `setPriorityForMeshRole(_, forMeshRole:, ditto:)` to `DittoExperimental` class\\n- Fixed: Improved AWDL reliability on iOS 12","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.1.1/api-reference/","date_released":"2022-02-12T05:38:19.843Z"},"1.1.2":{"description":"- Added: property `isReady` to experimental `DittoBusStream` to check if a message may be enqueued.\\n- Added: method `setOfflineOnlyLicenseToken()` to class `Ditto` as replacement for now deprecated `setLicenseToken()`.\\n- Changed: made `DittoBusStream`, `DittoRemotePeerV2`, and `DittoAddress` adopt `Equatable` and `Hashable` protocols.\\n- Changed: made `DittoRemotePeerV2` adopt the `Identifiable` protocol.\\n- Deprecated: method `setLicenseToken()` of class `Ditto`, please use newly added `setOfflineOnlyLicenseToken()` instead.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.1.2/api-reference/","date_released":"2022-02-28T14:36:18.965Z"},"1.1.3":{"description":"- Added: `onlinePlaygroundV2` case to `DittoIdentity` allowing for basic authentication for playgrounds\\n\\n- Deprecated: `onlinePlayground` case of `DittoIdentity`, use newly added `onlinePlaygroundV2` instead\\n\\n- Fixed: sync issues due to inconsistent handling of app IDs across SDKs\\n\\n- Fixed: document IDs are now validated when synced and removed if invalid (some of our early versions of the SDK stored malformed IDs under certain circumstances)","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.1.3/api-reference/","date_released":"2022-03-22T10:13:57.388Z"},"1.1.4":{"description":"- Changed: improved replication performance in some scenarios.\\n- Fixed: accessing a `DittoMutableDocument`\'s `value` property now correctly decodes data such that it works in the same way as `DittoDocument`\'s `value` property.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.1.4/api-reference/","date_released":"2022-04-08T06:25:26.109Z"},"1.1.5":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.1.5/api-reference/","date_released":"2022-04-08T08:00:56.518Z"},"1.1.6":{"description":"- Fixed: a correctness issue in replication when peer permissions changed in the middle of a replication exchange.\\n- Fixed: error when querying a collection and there was a type mismatch for a field being used in a comparison in the query. \\n- Fixed: restarting an app too quickly could lead to multiple connection attempts to rejoin peers in the mesh.\\n- Fixed: apps using `OnlinePlaygroundV2` identities could experience a one minute delay before peer-to-peer sync occurs.\\n- Fixed: cloud sync would stop working when setting a newly created transport config.\\n- Changed: improvements to Ditto mesh performance via fastest-available-transport prioritization.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.1.6/api-reference/","date_released":"2022-05-09T12:04:39.208Z"},"1.1.7":{"description":"Synchronized version bump release.","api_reference_docs_url":"https://software.ditto.live/cocoa/DittoSwift/1.1.7/api-reference/","date_released":"2022-05-13T14:18:18.404Z"}}},"android":{"DittoKit":{"latest":{"description":"* Fixed an issue where extensive writes can cause a session time-out","api_reference_docs_url":"https://software.ditto.live/android/DittoKit/0.4.0-alpha6/api-reference/","date_released":"2020-09-25T03:16:16.530Z"},"0.1.3":{"description":"* Improved handling of retrieving numeric fields from documents\\n* Fixes a bug where observe would not create a subscription","api_reference_docs_url":"https://software.ditto.live/android/DittoKit/0.1.3/api-reference/","date_released":"2019-10-08T12:37:33.490Z"},"0.2.0":{"description":"* Improved query results performance\\n* Fixed two bugs that could lead to a crash\\n* Many networking improvements to speed up sync on iOS and Android\\n\\nNote: SyncKit 0.2 is incompatible with version 0.1.","api_reference_docs_url":"https://software.ditto.live/android/DittoKit/0.2.0/api-reference/","date_released":"2019-12-17T16:49:51.462Z"},"0.2.1":{"description":"* Fixes a crash that can occur when calling stop().","api_reference_docs_url":"https://software.ditto.live/android/DittoKit/0.2.1/api-reference/","date_released":"2020-01-09T06:28:10.519Z"},"0.2.2":{"description":"* Reduced minimum Android SDK API level from 26 to 25 to support Android 7.1 devices.","api_reference_docs_url":"https://software.ditto.live/android/DittoKit/0.2.2/api-reference/","date_released":"2020-02-14T00:11:12.911Z"},"0.2.3":{"description":"* Fixed an issue where DittoKit would not work in 32-bit contexts.","api_reference_docs_url":"https://software.ditto.live/android/DittoKit/0.2.3/api-reference/","date_released":"2020-05-05T09:42:14.418Z"},"0.3.0":{"description":"* DittoKit 0.3 includes incompatible changes to data storage and networking - please uninstall all apps based on DittoKit 0.2 first\\n* Support for attaching large binary files to documents and syncing them on demand\\n* When creating documents you can no longer specify the id by providing an `_id` key. Instead you must specify an id as an extra argument to the `insert` function, if you want to explicitly set a document\u2019s id\\n* A document\u2019s id property is now `id` rather than `_id`\\n* The parameters for a live query callback have changed\\n* The sort order for a query is now controlled by an ascending/descending enum\\n* Fixed crash when inserting large amounts of data into a document\\n* Faster sync performance\\n* Ability to connect to a peer at a known address using the Server transport type","api_reference_docs_url":"https://software.ditto.live/android/DittoKit/0.3.0/api-reference/","date_released":"2020-06-04T10:39:58.291Z"},"0.3.1":{"description":"* Added a new LAN transport mode WiFiFixedPort to listen for connections on a known port.\\n* Android phones using the Bluetooth transport will no longer change their device name.\\n* DittoKit has a new sdkVersion property describing which build of DittoKit is installed. Please include this information in support requests.\\n* Fixed bug where an attachment transfer may not resume after being interrupted.\\n* Fixed bug where a long-lasting Bluetooth connection may spontaneously disconnect and reconnect.\\n* Improvements to reconnection speed.","api_reference_docs_url":"https://software.ditto.live/android/DittoKit/0.3.1/api-reference/","date_released":"2020-07-16T01:36:06.187Z"},"0.3.2":{"description":"* Fixes bug where Android phones sometimes do not activate Bluetooth if it is enabled after launching the app","api_reference_docs_url":"https://software.ditto.live/android/DittoKit/0.3.2/api-reference/","date_released":"2020-07-30T05:32:14.485Z"},"0.3.3":{"description":"* Android-specific performance improvements for large collections\\n* Java: DittoDocument\'s \\"value\\" field has been replaced with \\"getValue()\\"","api_reference_docs_url":"https://software.ditto.live/android/DittoKit/0.3.3/api-reference/","date_released":"2020-08-07T03:31:47.579Z"},"0.3.4":{"description":"* Fixed a bug with query compilation where integer literals in the query would\\nlead to a query compilation failure.","api_reference_docs_url":"https://software.ditto.live/android/DittoKit/0.3.4/api-reference/","date_released":"2020-08-10T15:13:36.013Z"},"0.3.5":{"description":"* Fixed an issue where inserting data as default data (setting the `isDefault`\\nparameter to true) could lead to data that would not merge as expected.","api_reference_docs_url":"https://software.ditto.live/android/DittoKit/0.3.5/api-reference/","date_released":"2020-09-04T20:04:42.643Z"},"0.4.0-alpha1":{"description":"* Note that this is a release with breaking changes, even just in terms of\\nclients running 0.4.0 not being able to communicate with clients running 0.3.X\\nreleases.\\n* Fixes for memory leaks.\\n* Performance improvements.","api_reference_docs_url":"https://software.ditto.live/android/DittoKit/0.4.0-alpha1/api-reference/","date_released":"2020-09-09T21:42:09.729Z"},"0.4.0-alpha2":{"description":"From the 0.4.0-alpha1 release notes:\\n\\n* Note that this is a release with breaking changes, even just in terms of\\nclients running 0.4.0 not being able to communicate with clients running 0.3.X\\nreleases.\\n* Fixes for memory leaks.\\n* Performance improvements.","api_reference_docs_url":"https://software.ditto.live/android/DittoKit/0.4.0-alpha2/api-reference/","date_released":"2020-09-10T08:16:25.426Z"},"0.4.0-alpha3":{"description":"* Fixed an error where presence data was failing to be deserialized properly.","api_reference_docs_url":"https://software.ditto.live/android/DittoKit/0.4.0-alpha3/api-reference/","date_released":"2020-09-11T09:34:06.493Z"},"0.4.0-alpha4":{"description":"* Fixes an issue where deletes might not propagate correctly in a multi-hop mesh","api_reference_docs_url":"https://software.ditto.live/android/DittoKit/0.4.0-alpha4/api-reference/","date_released":"2020-09-18T02:12:36.268Z"},"0.4.0-alpha5":{"description":"* Fixed finalizer logic with the following types:\\n    * `DittoAttachment`\\n    * `DittoAttachmentFetcher`\\n    * `DittoKit`\\n    * `DittoLiveQuery`\\n    * `DittoSubscription`","api_reference_docs_url":"https://software.ditto.live/android/DittoKit/0.4.0-alpha5/api-reference/","date_released":"2020-09-23T21:10:11.700Z"},"0.4.0-alpha6":{"description":"* Fixed an issue where extensive writes can cause a session time-out","api_reference_docs_url":"https://software.ditto.live/android/DittoKit/0.4.0-alpha6/api-reference/","date_released":"2020-09-25T03:16:16.530Z"}},"DittoSyncKit":{"latest":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/android/DittoSyncKit/1.0.0-alpha7/api-reference/","date_released":"2021-01-04T11:12:22.654Z"},"1.0.0-alpha1":{"description":"* Note that this is a release with breaking changes and clients using releases\\nin the 1.0 series will not be able to communicate with clients running a version\\nthat is anything less than 1.0. This should hopefully not be an issue because\\nthis release of the SDK has changed the name to be DittoSyncKit as opposed to\\nDittoKit.\\n* Lots of performance improvements and some bug fixes.","api_reference_docs_url":"https://software.ditto.live/android/DittoSyncKit/1.0.0-alpha1/api-reference/","date_released":"2020-10-08T21:23:54.081Z"},"1.0.0-alpha2":{"description":"* Decreases the file size of the AAR","api_reference_docs_url":"https://software.ditto.live/android/DittoSyncKit/1.0.0-alpha2/api-reference/","date_released":"2020-10-09T21:04:09.999Z"},"1.0.0-alpha3":{"description":"* Added new observeWithNextSignal API to allow the application to control the delivery of the next observe callback ev\\nent.\\n* Fixed several issues related to attachments that could delay sync.\\n* Simplified log statements","api_reference_docs_url":"https://software.ditto.live/android/DittoSyncKit/1.0.0-alpha3/api-reference/","date_released":"2020-11-04T07:46:13.521Z"},"1.0.0-alpha4":{"description":"* Fix issue where attachments could stop being fetched incorrectly.","api_reference_docs_url":"https://software.ditto.live/android/DittoSyncKit/1.0.0-alpha4/api-reference/","date_released":"2020-11-09T18:15:59.228Z"},"1.0.0-alpha5":{"description":"* Added a new intermediate security identity for a shared secret key. This is a simplistic authentication mode which is normally only suitable for private apps where all the users and devices are trusted. \\n* Fixed an issue that prevented Counter values from syncing correctly\\n* Renamed DittoAttachmentStatus to DittoAttachmentFetchEvent and subsequently Incomplete status to Progre\\nss.","api_reference_docs_url":"https://software.ditto.live/android/DittoSyncKit/1.0.0-alpha5/api-reference/","date_released":"2020-11-23T04:43:47.655Z"},"1.0.0-alpha6":{"description":"* Performance and stability improvements.\\n* Fix default data insertion such that merge semantics are consistent and\\n  duplicate data isn\'t created.","api_reference_docs_url":"https://software.ditto.live/android/DittoSyncKit/1.0.0-alpha6/api-reference/","date_released":"2020-12-15T01:00:39.148Z"},"1.0.0-alpha7":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/android/DittoSyncKit/1.0.0-alpha7/api-reference/","date_released":"2021-01-04T11:12:22.654Z"}},"Ditto":{"1.0.0-alpha8":{"description":"* Site IDs, which make up part of a Ditto identity object, are now unsigned,\\n64-bit integers instead of unsigned 32-bit integers.\\n* Fix a crash that could occur if an offset with a value greater than the number\\nof matching documents was provided.","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.0.0-alpha8/api-reference/","date_released":"2021-01-22T15:09:01.907Z"},"latest":{"description":"Synchronized version bump release.","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.1.7/api-reference/","date_released":"2022-05-13T14:18:18.405Z"},"1.0.0-alpha9":{"description":"* Fixed a bug where mDNS advertising may continue after Ditto is stopped.\\n* Fixed a hang that could occur creating an attachment fetcher while requesting many attachments at once.\\n* Fixed sync failure when there are multiple overlapping subscriptions or live queries with the same query string for the same collection.\\n* Fixed a potential crash and other sync failures that could occur under certain conditions.","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.0.0-alpha9/api-reference/","date_released":"2021-02-05T00:58:10.294Z"},"1.0.0":{"description":"* This release is not compatible with any previous SDK releases. There are a\\nnumber of breaking changes both in terms of the SDK API and in terms of the\\ninternal systems used by the SDK to perform operations such as synchronization.\\nIf you have previously made use of the Ditto SDK and wish to update to this\\nversion then note that you will need to delete all existing Ditto data otherwise\\nyou will run into errors. If you have existing data that you need to keep then\\nplease contact us and we can advise you as to how you can migrate your data.\\n* The most notable API breaking changes are:\\n  * Document IDs are no longer restricted to just strings. You can now create\\n    a document ID that is a string, integer, boolean, array, map, or null. This\\n    means that when making `findByID` or `insert` calls you now need to provide\\n    a `DittoDocumentID` object rather than a string. Similarly, when you access\\n    a document\'s ID it will now return a `DittoDocumentID` object instead of a\\n    string.\\n  * The `start()` and `stop()` functions on the `Ditto` object have been renamed\\n    to `startSync()` and `stopSync()` respectively. They now also don\'t accept\\n    any arguments. If you wish to specify which transports you would like the\\n    Ditto SDK to make use of (along with any configuration that they might\\n    require) you now need to use the `setTransportConfig` function on the\\n    `Ditto` object, and pass to that a transport config object. The default\\n    transports that will be enabled are still the same as they were in previous\\n    releases of the SDK though, so if you have no custom requirements then you\\n    can simply change your `start()` call to `startSync()`.\\n* Lots of performance improvements and bug fixes.","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.0.0/api-reference/","date_released":"2021-04-22T00:29:50.320Z"},"1.0.1":{"description":"* If you provide an invalid query then you will now get a better error message.","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.0.1/api-reference/","date_released":"2021-05-04T16:02:44.151Z"},"1.0.2":{"description":"* Add support for subscripting `DittoDocumentID`s in order to get nested values\\nwhen a document ID is based on an array or a map.\\n* Deprecated `.toNative()` on `DittoDocumentID`. You should use `.value`\\ninstead.","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.0.2/api-reference/","date_released":"2021-05-20T21:39:10.588Z"},"1.0.3":{"description":"* Bluetooth sync performance improvements.\\n* Enable configuration of advertisement power and frequency.","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.0.3/api-reference/","date_released":"2021-06-10T16:34:52.104Z"},"1.0.4":{"description":"* Bluetooth sync performance improvements with L2CAP support added, which will\\n  be used when available.","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.0.4/api-reference/","date_released":"2021-06-11T22:36:42.265Z"},"1.0.5":{"description":"* Added a new `find` function that accepts a query containing placeholders in\\n  the form of `$args.my_arg` along with a map of query arguments in the form of\\n  `{ \\"my_arg\\": \\"some value\\" }`. The placeholders in the query will be replaced\\n  by a query-appropriate representation of the relevant value from the map of\\n  query arguments.\\n\\n  For example, a query of `color == $args.color` with a query arguments map of\\n  `{ \\"color\\": \\"red\\" }` would internally be treated as a query of:\\n  `color == \\"red\\"`.\\n* Added the ability to get a hash and/or a mnemonic (string) representation of\\n  the matching documents from a live query event. This means you can do\\n  something like this:\\n\\n  ```kotlin\\n  val liveQuery = collection.findAll().observe() { docs, event ->\\n      event.hash(docs); // e.g. `1950015808188223905`\\n      event.hashMnemonic(docs); // e.g. `locate-quality-tina--helena-remote-cat`\\n      // ...\\n  }\\n  ```\\n* Fix for using floats in queries.\\n* Accessing the `store` property of a `Ditto` instance will no longer throw an\\n  error if you have not yet activated your `Ditto` instance with a valid license\\n  token.\\n* Deprecated `setAccessLicense` and added a new function, `setLicenseToken`,\\n  which will throw an appropriate error if your provided license token is\\n  expired or invalid somehow.\\n* Deprecated `startSync` and added a new function, `tryStartSync`, which will\\n  throw an error if your `Ditto` instance hasn\'t yet been activated via a\\n  successful call to `setLicenseToken`.","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.0.5/api-reference/","date_released":"2021-06-25T22:36:18.096Z"},"1.0.6":{"description":"* Add `value` accessor on `DittoDocumentPath`, `DittoMutableDocumentPath`, and\\n`DittoDocumentIDPath` types to allow accessing a nested value in a document/ID\\nas an `Any?`.","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.0.6/api-reference/","date_released":"2021-07-08T18:22:41.809Z"},"1.0.7":{"description":"* Fix bug where sync may fail if an unusually long `deviceName` is configured","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.0.7/api-reference/","date_released":"2021-07-22T23:38:10.554Z"},"1.0.8":{"description":"* Improved debug logging.","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.0.8/api-reference/","date_released":"2021-08-02T16:19:41.134Z"},"1.0.9":{"description":"* Added support for getting information about all of the collections that the device is aware of. This is achieved by accessing `collections()` through the store object and then using the same sort of API used when getting documents in collections, i.e. `exec/observe/etc`.\\n* Added multicast as a transport option to the `LAN` config part of `TransportConfig`.\\n* Added new identity types: `Online` and `OnlinePlayground.` An `Online` identity should be used when running Ditto in secure production mode, logging on to Ditto Cloud, or using an on-premises authentication server. User permissions are centrally managed. Sync will not work until a successful login has occurred. An `OnlinePlayground` identity should be used when you want to test a Ditto Cloud app without authentication (\\"Playground mode\\"). This mode offers no security and must only be used for development.\\n* The `Production` identity has been renamed to `Manual`.\\n* Added a `DittoAuthenticator` type, accessible via the `Ditto` object, which allows you to perform login operations when you\'re using an `Online` identity.\\n* Similarly, added a `DittoAuthenticationCallback` type that needs to be used when using an `Online` identity.\\n* Report an error if more than one Ditto instance is started using the same working directory.","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.0.9/api-reference/","date_released":"2021-09-03T22:38:24.690Z"},"1.0.10":{"description":"* Fix to stop a change in site ID from leading to an unnecessary error.\\n* Improve handling of persisted authentication data. Note that this might lead\\n  to a one-off change to a peer\'s site ID if you weren\'t and continue to not be\\n  specifying an explicit site ID when creating your identity.","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.0.10/api-reference/","date_released":"2021-09-10T16:21:51.194Z"},"1.0.11":{"description":"- Added `DittoWriteStrategy` enum.\\n- Added method `insertWithStrategy()` to `DittoCollection`, allowing to specify the behavior when inserting a document with an ID that matches the ID of a document already in the store.\\n- Added `isAuthenticated` method and `userID` property to `DittoAuthenticator`.","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.0.11/api-reference/","date_released":"2021-10-08T05:09:27.624Z"},"1.0.12":{"description":"- Added `global` section to `TransportConfig` allowing P2P sync to be contained within certain groups of devices by putting them in the same \\"sync group\\".","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.0.12/api-reference/","date_released":"2021-10-18T10:00:50.921Z"},"1.0.13":{"description":"- Changed `DittoIdentity`\'s property `appID` to be of type `String` instead of `UUID`.","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.0.13/api-reference/","date_released":"2021-10-18T17:02:38.549Z"},"1.0.14":{"description":"* Add support for array projections to DittoQL.\\n* Deprecate the `Online` identity in favor of the new `OnlineWithAuthentication`\\n  identity.\\n* Deprecate the `Development` identity in favor of the new `OfflinePlayground`\\n  identity.\\n* Make outgoing BLE connections and MTU customisable.","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.0.14/api-reference/","date_released":"2021-10-25T08:31:34.911Z"},"1.0.15-alpha1":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.0.15-alpha1/api-reference/","date_released":"2021-10-27T10:33:50.885Z"},"1.0.15":{"description":"* Ensure that when performing a `sort` that if a document that matches the\\n  filter specified via the accompanying `find` call doesn\'t have the key\\n  specified in the `sort` expression then it won\'t lead to an error. Now, if\\n  you\'re sorting in a descending order then the documents without the key\\n  specified in the `sort` will appear at the end of the set of results, after\\n  all of the documents that do have the key present. If you\'re sorting in an\\n  ascending order then the documents without the `sort` key will appear first in\\n  the set of documents, before all of the documents that do contain the `sort`\\n  key.\\n* Add versions of `loginWithToken` and `loginWithCredentials` that can be used\\n  with Java that don\'t require returning `null` at the end of the lambda.\\n* Remove the empty default implementations of `authenticationRequired` and\\n  `authenticationExpiringSoon` on `DittoAuthenticationCallback`.","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.0.15/api-reference/","date_released":"2021-11-05T22:03:49.597Z"},"1.0.16":{"description":"* Fix an issue with live queries that involved a limit, no offset, at least one\\n  document being deleted, and some other conditions being met. Live queries that\\n  met these conditions could report incorrect sets of matching documents.\\n* Fix an issue that could potentially lead to an infinite loop in the\\n  replication system, meaning no sync progress would be made.","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.0.16/api-reference/","date_released":"2021-11-19T22:39:48.766Z"},"1.0.17":{"description":"* Fix an issue with write strategies not working correctly. Unexpected results\\n  could occur when performing sequences of operations on documents.","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.0.17/api-reference/","date_released":"2021-11-26T00:11:42.917Z"},"1.0.18-alpha1":{"description":"* Fixed an issue where document IDs that were specified inside the document\'s\\n  value as opposed to being specified explicitly (as a separate argument to\\n  `insert`) weren\'t being processed correctly, potentially leading to bugs with\\n  merge and overwrite behaviors.","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.0.18-alpha1/api-reference/","date_released":"2021-12-08T17:25:36.987Z"},"1.0.18-alpha2":{"description":"* Improve attachment sync performance.","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.0.18-alpha2/api-reference/","date_released":"2021-12-14T16:32:13.955Z"},"1.0.18":{"description":"* Reduced the opportunity for rapid memory growth in some scenarios.","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.0.18/api-reference/","date_released":"2021-12-20T13:22:16.631Z"},"1.0.19":{"description":"- Fixed: collections were not appearing in the data browser under certain permission configurations.\\n- Fixed: race condition when subscriptions were configured from multiple threads in parallel (sometimes leading to a crash).\\n- Fixed: crash when calling `tryStartSync()` due to new Bluetooth rules and permissions in Android 12.\\n- Fixed: \\"Receiver not registered\\" exception occuring due to a race condition in Bluetooth registration.","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.0.19/api-reference/","date_released":"2021-12-23T20:42:05.710Z"},"1.1.0":{"description":"- Changed: improved peer-to-peer algorithms to create meshes that are more efficient and diverse.\\n- Changed: improved routing algorithms for more efficiency.\\n- Changed: improved performance of query parsing.\\n- Added: property `isSyncActive` to class `Ditto`.\\n- Added: method `logout()` to class `DittoAuthenticator`.\\n- Added: set of APIs to observe authentication status (see API reference for `DittoAuthenticator` and `DittoAuthenticationCallback`).\\n- Added: method `upsert()` to classes `DittoCollection` and `DittoScopedWriteTransaction` (as a replacement for `insert()` & friends) which by default merges the newly inserted document if one with the same ID already exists.\\n- Deprecated: properties `isAuthenticated` and `userId` of class `DittoAuthenticator` in favor of newly introduced property `status`.\\n- Deprecated: methods `insert()` & frinds of classes `DittoCollection` and `DittoScopedWriteTransaction` in favor of newly introduced `upsert()`.","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.1.0/api-reference/","date_released":"2022-01-28T11:21:11.093Z"},"1.1.1":{"description":"- Changed: Optimized the performance of accessing the value of a `Document`\\n- Added: Experimental mesh roles API\\n  - Added: `DittoExperimental` class\\n  - Added: `setMeshRole()` method to `DittoExperimental` class\\n  - Added: `setPriorityForMeshRole()` method to `DittoExperimental` class","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.1.1/api-reference/","date_released":"2022-02-12T05:38:19.843Z"},"1.1.2":{"description":"- Added: method `setOfflineOnlyLicenseToken()` to class `Ditto` as replacement for now deprecated `setLicenseToken()`.\\n- Deprecated: method `setLicenseToken()` of class `Ditto`, please use newly added `setOfflineOnlyLicenseToken()` instead.","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.1.2/api-reference/","date_released":"2022-02-28T14:36:18.966Z"},"1.1.3":{"description":"- Added: `OnlinePlaygroundV2` identity allowing for basic authentication for playgrounds\\n\\n- Deprecated: `OnlinePlayground` identity, use newly added `OnlinePlaygroundV2` instead\\n\\n- Fixed: document IDs are now validated when synced and removed if invalid (some of our early versions of the SDK stored malformed IDs under certain circumstances)","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.1.3/api-reference/","date_released":"2022-03-22T10:13:57.388Z"},"1.1.4":{"description":"- Changed: improved replication performance in some scenarios.","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.1.4/api-reference/","date_released":"2022-04-08T06:25:26.110Z"},"1.1.5":{"description":"* Fixed: Some Android phones may not connect on Bluetooth - regression in 1.1.4","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.1.5/api-reference/","date_released":"2022-04-08T08:00:56.518Z"},"1.1.6":{"description":"- Fixed: a correctness issue in replication when peer permissions changed in the middle of a replication exchange.\\n- Fixed: error when querying a collection and there was a type mismatch for a field being used in a comparison in the query. \\n- Fixed: restarting an app too quickly could lead to multiple connection attempts to rejoin peers in the mesh.\\n- Fixed: apps using `OnlinePlaygroundV2` identities could experience a one minute delay before peer-to-peer sync occurs.\\n- Changed: improvements to Ditto mesh performance via fastest-available-transport prioritization.","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.1.6/api-reference/","date_released":"2022-05-09T12:04:39.209Z"},"1.1.7":{"description":"Synchronized version bump release.","api_reference_docs_url":"https://software.ditto.live/android/Ditto/1.1.7/api-reference/","date_released":"2022-05-13T14:18:18.405Z"}}},"cpp-ios":{"DittoKit":{"latest":{"description":"* Initial release of the SDK","api_reference_docs_url":"https://software.ditto.live/cpp-ios/DittoKit/0.1.0/api-reference/","date_released":"2019-12-05T16:36:03.940Z"},"0.1.0":{"description":"* Initial release of the SDK","api_reference_docs_url":"https://software.ditto.live/cpp-ios/DittoKit/0.1.0/api-reference/","date_released":"2019-12-05T16:36:03.940Z"}},"DittoSyncKit":{"latest":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/cpp-ios/DittoSyncKit/1.0.0-alpha7/api-reference/","date_released":"2021-01-04T11:12:22.654Z"},"1.0.0-alpha5":{"description":"* Added a new intermediate security identity for a shared secret key. This is a simplistic authentication mode which is normally only suitable for private apps where all the users and devices are trusted. \\n* Fixed an issue that prevented Counter values from syncing correctly\\n* Renamed DittoAttachmentStatus to DittoAttachmentFetchEvent and subsequently Incomplete status to Progre\\nss.","api_reference_docs_url":"https://software.ditto.live/cpp-ios/DittoSyncKit/1.0.0-alpha5/api-reference/","date_released":"2020-11-23T21:22:41.601Z"},"1.0.0-alpha6":{"description":"* Performance and stability improvements.\\n* Fix default data insertion such that merge semantics are consistent and\\n  duplicate data isn\'t created.\\n* Fixed a bug where documents containing attachments syncing to an instance of\\n  the C++ SDK could lead to a crash.\\n* Upgrade nlohmann json header from 3.7.0 to 3.9.1.\\n* Added `set_custom_log_cb` and `set_log_file` method calls to `Log` class to\\n  allow provision of a custom logging callback function, and a file path\\n  that logs should be directed to.","api_reference_docs_url":"https://software.ditto.live/cpp-ios/DittoSyncKit/1.0.0-alpha6/api-reference/","date_released":"2020-12-15T01:00:39.148Z"},"1.0.0-alpha7":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/cpp-ios/DittoSyncKit/1.0.0-alpha7/api-reference/","date_released":"2021-01-04T11:12:22.654Z"}},"Ditto":{"1.0.0-alpha8":{"description":"* Site IDs, which make up part of a Ditto identity object, are now unsigned,\\n64-bit integers instead of unsigned 32-bit integers.\\n* Fix a crash that could occur if an offset with a value greater than the number\\nof matching documents was provided.","api_reference_docs_url":"https://software.ditto.live/cpp-ios/Ditto/1.0.0-alpha8/api-reference/","date_released":"2021-01-22T15:09:01.907Z"},"latest":{"description":"* Added a Linux x86_64 version of the C++ to the group of published C++ SDKs.\\n* Improved debug logging.","api_reference_docs_url":"https://software.ditto.live/cpp-ios/Ditto/1.0.8/api-reference/","date_released":"2021-08-02T16:19:41.134Z"},"1.0.0-alpha9":{"description":"* Fixed a bug where mDNS advertising may continue after Ditto is stopped.\\n* Fixed a hang that could occur creating an attachment fetcher while requesting many attachments at once.\\n* Fixed sync failure when there are multiple overlapping subscriptions or live queries with the same query string for the same collection.\\n* Fixed a potential crash and other sync failures that could occur under certain conditions.","api_reference_docs_url":"https://software.ditto.live/cpp-ios/Ditto/1.0.0-alpha9/api-reference/","date_released":"2021-02-05T00:58:10.294Z"},"1.0.0":{"description":"* This release is not compatible with any previous SDK releases. There are a\\nnumber of breaking changes both in terms of the SDK API and in terms of the\\ninternal systems used by the SDK to perform operations such as synchronization.\\nIf you have previously made use of the Ditto SDK and wish to update to this\\nversion then note that you will need to delete all existing Ditto data otherwise\\nyou will run into errors. If you have existing data that you need to keep then\\nplease contact us and we can advise you as to how you can migrate your data.\\n* The most notable API breaking changes are:\\n  * Document IDs are no longer restricted to just strings. You can now create\\n    a document ID that is a string, integer, boolean, array, map, or null. This\\n    means that when making `find_by_id` or `insert` calls you now need to\\n    provide a `DocumentId` object rather than a string. Similarly, when you\\n    access a document\'s ID it will now return a `DocumentId` object instead of a\\n    string.\\n  * The `start()` and `stop()` functions on the `Ditto` object have been renamed\\n    to `start_sync()` and `stop_sync()` respectively. They now also don\'t accept\\n    any arguments. If you wish to specify which transports you would like the\\n    Ditto SDK to make use of (along with any configuration that they might\\n    require) you now need to use the `set_transport_config` function on the\\n    `Ditto` object, and pass to that a transport config object. The default\\n    transports that will be enabled are still the same as they were in previous\\n    releases of the SDK though, so if you have no custom requirements then you\\n    can simply change your `start()` call to `start_sync()`.\\n* Lots of performance improvements and bug fixes.","api_reference_docs_url":"https://software.ditto.live/cpp-ios/Ditto/1.0.0/api-reference/","date_released":"2021-04-22T00:29:50.320Z"},"1.0.1":{"description":"* If you provide an invalid query then you will now get a better error message.","api_reference_docs_url":"https://software.ditto.live/cpp-ios/Ditto/1.0.1/api-reference/","date_released":"2021-05-04T16:02:44.151Z"},"1.0.2":{"description":"* Add support for subscripting `DocumentId`s in order to get nested values when\\na document ID is based on an array or a map.\\n* Deprecated `.to_native()` on `DocumentId`. You should use `.value()` instead.","api_reference_docs_url":"https://software.ditto.live/cpp-ios/Ditto/1.0.2/api-reference/","date_released":"2021-05-20T21:39:10.588Z"},"1.0.3":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/cpp-ios/Ditto/1.0.3/api-reference/","date_released":"2021-06-10T16:34:52.104Z"},"1.0.4":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/cpp-ios/Ditto/1.0.4/api-reference/","date_released":"2021-06-11T22:36:42.265Z"},"1.0.5":{"description":"* Added a new `find` function that accepts a query containing placeholders in\\n  the form of `$args.my_arg` along with a map of query arguments in the form of\\n  `{ \\"my_arg\\": \\"some value\\" }`. The placeholders in the query will be replaced\\n  by a query-appropriate representation of the relevant value from the map of\\n  query arguments.\\n\\n  For example, a query of `color == $args.color` with a query arguments map of\\n  `{ \\"color\\": \\"red\\" }` would internally be treated as a query of:\\n  `color == \\"red\\"`.\\n* Added the ability to get a hash and/or a mnemonic (string) representation of\\n  the matching documents from a live query event. This means you can do\\n  something like this:\\n\\n  ```cpp\\n  auto live_query = collection.find_all().observe(LiveQueryEventHandler{\\n        [&](std::vector<Document> docs, LiveQueryEvent event) {\\n            event.hash(docs); // e.g. `1950015808188223905`\\n            event.hash_mnemonic(docs); // e.g. `locate-quality-tina--helena-remote-cat`\\n            // ...\\n      });\\n  ```\\n* Fix for using floats in queries.\\n* Accessing the `store` property of a `Ditto` instance will no longer throw an\\n  error if you have not yet activated your `Ditto` instance with a valid license\\n  token.\\n* Deprecated `set_access_license` and added a new function, `set_license_token`,\\n  which will throw an appropriate exception if your provided license token is\\n  expired or invalid somehow.\\n* Deprecated `start_sync` and added a new function, `try_start_sync`, which will\\n  throw an exception if your `Ditto` instance hasn\'t yet been activated via a\\n  successful call to `set_license_token`.","api_reference_docs_url":"https://software.ditto.live/cpp-ios/Ditto/1.0.5/api-reference/","date_released":"2021-06-25T22:36:18.096Z"},"1.0.6":{"description":"* Add `value` accessor on `DocumentPath`, `MutableDocumentPath`, and\\n`DocumentIdPath` types to allow accessing a nested value in a document/ID as a\\n`nlohmann::json`.","api_reference_docs_url":"https://software.ditto.live/cpp-ios/Ditto/1.0.6/api-reference/","date_released":"2021-07-08T18:22:41.809Z"},"1.0.7":{"description":"* Improve SDK API documentation extensively\\n* Fix crash that can occur if a Ditto `Identity` is passed by value\\n* Fix bug where sync may fail if an unusually long `deviceName` is configured","api_reference_docs_url":"https://software.ditto.live/cpp-ios/Ditto/1.0.7/api-reference/","date_released":"2021-07-22T23:38:10.554Z"},"1.0.8":{"description":"* Added a Linux x86_64 version of the C++ to the group of published C++ SDKs.\\n* Improved debug logging.","api_reference_docs_url":"https://software.ditto.live/cpp/Ditto/1.0.8/api-reference/","date_released":"2021-08-02T16:19:41.134Z"}}},"dotnet":{"DittoSharp":{"latest":{"description":"* Fixed an issue where extensive writes can cause a session time-out","api_reference_docs_url":"https://software.ditto.live/dotnet/DittoSharp/0.4.0-alpha5/api-reference/","date_released":"2020-09-25T04:21:37.749Z"},"0.1.0-alpha3":{"description":"* Sorted out the packaging so that installing the SDK doesn\'t require any extra\\n  actions after installation.","api_reference_docs_url":"https://software.ditto.live/dotnet/DittoSharp/0.1.0-alpha3/api-reference/","date_released":"2020-06-29T21:04:19.973Z"},"0.1.0-alpha4":{"description":"* Added the licenses of the dependencies used by the SDK to the NuGet package","api_reference_docs_url":"https://software.ditto.live/dotnet/DittoSharp/0.1.0-alpha4/api-reference/","date_released":"2020-06-30T09:37:48.340Z"},"0.1.1-alpha1":{"description":"Compatibility update.","api_reference_docs_url":"https://software.ditto.live/dotnet/DittoSharp/0.1.1-alpha1/api-reference/","date_released":"2020-07-18T15:38:20.478Z"},"0.1.1-alpha2":{"description":"Further compatibility updates.","api_reference_docs_url":"https://software.ditto.live/dotnet/DittoSharp/0.1.1-alpha2/api-reference/","date_released":"2020-07-20T08:48:07.767Z"},"0.3.1-alpha1":{"description":"Compatibility update for 0.3.1 releases.","api_reference_docs_url":"https://software.ditto.live/dotnet/DittoSharp/0.3.1-alpha1/api-reference/","date_released":"2020-07-20T21:11:27.277Z"},"0.3.4-alpha1":{"description":"* Fixed a bug with query compilation where integer literals in the query would\\nlead to a query compilation failure.","api_reference_docs_url":"https://software.ditto.live/dotnet/DittoSharp/0.3.4-alpha1/api-reference/","date_released":"2020-08-11T07:45:19.205Z"},"0.3.5-alpha1":{"description":"* Fixed an issue where inserting data as default data (setting the `isDefault`\\nparameter to true) could lead to data that would not merge as expected.","api_reference_docs_url":"https://software.ditto.live/dotnet/DittoSharp/0.3.5-alpha1/api-reference/","date_released":"2020-09-04T20:25:28.669Z"},"0.4.0-alpha1":{"description":"* Note that this is a release with breaking changes, even just in terms of\\nclients running 0.4.0 not being able to communicate with clients running 0.3.X\\nreleases.\\n* Fixes for memory leaks.\\n* Performance improvements.","api_reference_docs_url":"https://software.ditto.live/dotnet/DittoSharp/0.4.0-alpha1/api-reference/","date_released":"2020-09-09T21:18:55.927Z"},"0.4.0-alpha2":{"description":"* Fix a potential crash when working with attachments.","api_reference_docs_url":"https://software.ditto.live/dotnet/DittoSharp/0.4.0-alpha2/api-reference/","date_released":"2020-09-11T09:25:30.221Z"},"0.4.0-alpha3":{"description":"* Fix disposal/clean-up of `DittoAttachmentFetcher` objects.\\n* Add support for Linux 64-bit platforms.","api_reference_docs_url":"https://software.ditto.live/dotnet/DittoSharp/0.4.0-alpha3/api-reference/","date_released":"2020-09-16T23:24:20.678Z"},"0.4.0-alpha4":{"description":"* Fixes an issue where deletes might not propagate correctly in a multi-hop mesh","api_reference_docs_url":"https://software.ditto.live/dotnet/DittoSharp/0.4.0-alpha4/api-reference/","date_released":"2020-09-18T01:01:44.857Z"},"0.4.0-alpha5":{"description":"* Fixed an issue where extensive writes can cause a session time-out","api_reference_docs_url":"https://software.ditto.live/dotnet/DittoSharp/0.4.0-alpha5/api-reference/","date_released":"2020-09-25T04:21:37.749Z"}},"DittoSyncKit":{"latest":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/dotnet/DittoSyncKit/1.0.0-alpha7/api-reference/","date_released":"2021-01-04T11:12:22.654Z"},"1.0.0-alpha1":{"description":"* Note that this is a release with breaking changes and clients using releases\\nin the 1.0 series will not be able to communicate with clients running a version\\nthat is anything less than 1.0. This should hopefully not be an issue because\\nthis release of the SDK has changed the name to be DittoSyncKit as opposed to\\nDittoSharp and the namespace has gone from DittoSharp to Ditto.SyncKit.\\n* Lots of performance improvements and some bug fixes.","api_reference_docs_url":"https://software.ditto.live/dotnet/DittoSyncKit/1.0.0-alpha1/api-reference/","date_released":"2020-10-09T17:53:42.857Z"},"1.0.0-alpha2":{"description":"Fixed several potential issues with attachment fetching that may result in the fetch callback not firing.","api_reference_docs_url":"https://software.ditto.live/dotnet/DittoSyncKit/1.0.0-alpha2/api-reference/","date_released":"2020-10-14T18:01:39.315Z"},"1.0.0-alpha3":{"description":"* Added new observeWithNextSignal API to allow the application to control the delivery of the next observe callback ev\\nent.\\n* Fixed several issues related to attachments that could delay sync.\\n* Simplified log statements","api_reference_docs_url":"https://software.ditto.live/dotnet/DittoSyncKit/1.0.0-alpha3/api-reference/","date_released":"2020-11-04T08:48:18.691Z"},"1.0.0-alpha4":{"description":"* Fix issue where attachments could stop being fetched incorrectly.\\n* Introduce a `DittoLogger` class with various log-related functionality to make\\n  logging easier and more feature-rich.","api_reference_docs_url":"https://software.ditto.live/dotnet/DittoSyncKit/1.0.0-alpha4/api-reference/","date_released":"2020-11-09T18:02:18.392Z"},"1.0.0-alpha5":{"description":"* Added a new intermediate security identity for a shared secret key. This is a simplistic authentication mode which is normally only suitable for private apps where all the users and devices are trusted. \\n* Fixed an issue that prevented Counter values from syncing correctly\\n* Renamed DittoAttachmentStatus to DittoAttachmentFetchEvent and subsequently Incomplete status to Progre\\nss.","api_reference_docs_url":"https://software.ditto.live/dotnet/DittoSyncKit/1.0.0-alpha5/api-reference/","date_released":"2020-11-23T20:30:04.206Z"},"1.0.0-alpha6":{"description":"* Performance and stability improvements.\\n* Fix default data insertion such that merge semantics are consistent and\\n  duplicate data isn\'t created.","api_reference_docs_url":"https://software.ditto.live/dotnet/DittoSyncKit/1.0.0-alpha6/api-reference/","date_released":"2020-12-15T01:00:39.148Z"},"1.0.0-alpha7":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/dotnet/DittoSyncKit/1.0.0-alpha7/api-reference/","date_released":"2021-01-04T11:12:22.654Z"}},"Ditto":{"1.0.0-alpha8":{"description":"* Site IDs, which make up part of a Ditto identity object, are now unsigned,\\n64-bit integers instead of unsigned 32-bit integers.\\n* Fix a crash that could occur if an offset with a value greater than the number\\nof matching documents was provided.","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.0.0-alpha8/api-reference/","date_released":"2021-01-22T15:09:01.907Z"},"latest":{"description":"Synchronized version bump release.","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.1.7/api-reference/","date_released":"2022-05-13T14:18:18.406Z"},"1.0.0-alpha9":{"description":"* The exact version of the Ditto SDK can now be retrieved using the `ditto.SDKVersion` property.\\n* Fixed a bug where mDNS advertising may continue after Ditto is stopped.\\n* Fixed a hang that could occur creating an attachment fetcher while requesting many attachments at once.\\n* Fixed sync failure when there are multiple overlapping subscriptions or live queries with the same query string for the same collection.\\n* Fixed a potential crash and other sync failures that could occur under certain conditions.","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.0.0-alpha9/api-reference/","date_released":"2021-02-05T00:58:10.294Z"},"1.0.0":{"description":"* This release is not compatible with any previous SDK releases. There are a\\nnumber of breaking changes both in terms of the SDK API and in terms of the\\ninternal systems used by the SDK to perform operations such as synchronization.\\nIf you have previously made use of the Ditto SDK and wish to update to this\\nversion then note that you will need to delete all existing Ditto data otherwise\\nyou will run into errors. If you have existing data that you need to keep then\\nplease contact us and we can advise you as to how you can migrate your data.\\n* The most notable API breaking changes are:\\n  * Document IDs are no longer restricted to just strings. You can now create\\n    a document ID that is a string, integer, boolean, array, map, or null. This\\n    means that when making `FindByID` or `insert` calls you now need to provide\\n    a `DittoDocumentID` object rather than a string. Similarly, when you access\\n    a document\'s ID it will now return a `DittoDocumentID` object instead of a\\n    string.\\n  * The `Start()` and `Stop()` functions on the `Ditto` object have been renamed\\n    to `StartSync()` and `StopSync()` respectively. They now also don\'t accept\\n    any arguments. If you wish to specify which transports you would like the\\n    Ditto SDK to make use of (along with any configuration that they might\\n    require) you now need to use the `SetTransportConfig` function on the\\n    `Ditto` object, and pass to that a transport config object. The default\\n    transports that will be enabled are still the same as they were in previous\\n    releases of the SDK though, so if you have no custom requirements then you\\n    can simply change your `Start()` call to `StartSync()`.\\n* Lots of performance improvements and bug fixes.","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.0.0/api-reference/","date_released":"2021-04-22T00:29:50.320Z"},"1.0.1":{"description":"* If you provide an invalid query then you will now get a better error message.","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.0.1/api-reference/","date_released":"2021-05-04T16:02:44.151Z"},"1.0.2":{"description":"* Add support for subscripting `DITDocumentID`s in order to get nested values\\nwhen a document ID is based on an array or a dictionary.\\n* Deprecated `.ToNative()` on `DittoDocumentID`. You should use `.Value`\\ninstead.","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.0.2/api-reference/","date_released":"2021-05-20T21:39:10.588Z"},"1.0.3":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.0.3/api-reference/","date_released":"2021-06-10T16:34:52.104Z"},"1.0.4":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.0.4/api-reference/","date_released":"2021-06-11T22:36:42.265Z"},"1.0.5":{"description":"* Added a new `find` function that accepts a query containing placeholders in\\n  the form of `$args.my_arg` along with a map of query arguments in the form of\\n  `{ \\"my_arg\\": \\"some value\\" }`. The placeholders in the query will be replaced\\n  by a query-appropriate representation of the relevant value from the map of\\n  query arguments.\\n\\n  For example, a query of `color == $args.color` with a query arguments map of\\n  `{ \\"color\\": \\"red\\" }` would internally be treated as a query of:\\n  `color == \\"red\\"`.\\n* Added the ability to get a hash and/or a mnemonic (string) representation of\\n  the matching documents from a live query event. This means you can do\\n  something like this:\\n\\n  ```dotnet\\n  var liveQuery = collection.FindAll().Observe((docs, event) =>\\n  {\\n      event.Hash(docs); // e.g. `1950015808188223905`\\n      event.HashMnemonic(docs); // e.g. `locate-quality-tina--helena-remote-cat`\\n      // ...\\n  });\\n  ```\\n* Fix for using floats in queries.\\n* Accessing the `store` property of a `Ditto` instance will no longer throw an\\n  error if you have not yet activated your `Ditto` instance with a valid license\\n  token.\\n* Deprecated `SetAccessLicense` and added a new function, `SetLicenseToken`,\\n  which will throw an appropriate exception if your provided license token is\\n  expired or invalid somehow.\\n* Deprecated `StartSync` and added a new function, `TryStartSync`, which will\\n  throw an exception if your `Ditto` instance hasn\'t yet been activated via a\\n  successful call to `SetLicenseToken`.","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.0.5/api-reference/","date_released":"2021-06-25T22:36:18.096Z"},"1.0.6":{"description":"* Add `Value` accessor on `DittoDocumentPath`, `DittoMutableDocumentPath`, and\\n`DittoDocumentIDPath` types to allow accessing a nested value in a document/ID\\nas an `object`.","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.0.6/api-reference/","date_released":"2021-07-08T18:22:41.809Z"},"1.0.7":{"description":"* Fix bug where sync may fail if an unusually long `deviceName` is configured","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.0.7/api-reference/","date_released":"2021-07-22T23:38:10.554Z"},"1.0.8":{"description":"* Improved debug logging.","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.0.8/api-reference/","date_released":"2021-08-02T16:19:41.134Z"},"1.0.9":{"description":"* Fixed an issue where `Ditto.dll` would fail to be loaded.\\n* Updated the `SharedKey` identity to allow a custom working directory to be provided.\\n* Fixed `default` construction of `DittoIdentity` in `new Ditto()`.\\n* Added support for getting information about all of the collections that the device is aware of. This is achieved by accessing `collections()` through the store object and then using the same sort of API used when getting documents in collections, i.e. `Exec/Observe/etc`.\\n* Added multicast as a transport option to the `LAN` config part of `TransportConfig`.\\n* Added new identity types: `Online` and `OnlinePlayground.` An `Online` identity should be used when running Ditto in secure production mode, logging on to Ditto Cloud, or using an on-premises authentication server. User permissions are centrally managed. Sync will not work until a successful login has occurred. An `OnlinePlayground` identity should be used when you want to test a Ditto Cloud app without authentication (\\"Playground mode\\"). This mode offers no security and must only be used for development.\\n* The `Production` identity has been renamed to `Manual`.\\n* Added a `DittoAuthenticator` type, accessible via the `Ditto` object, which allows you to perform login operations when you\'re using an `Online` identity.\\n* Similarly, added a `DittoAuthenticationDelegate` type that needs to be used when using an `Online` identity.\\n* Report an error if more than one Ditto instance is started using the same working directory.","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.0.9/api-reference/","date_released":"2021-09-03T22:38:24.690Z"},"1.0.10":{"description":"* Fix to stop a change in site ID from leading to an unnecessary error.\\n* Improve handling of persisted authentication data. Note that this might lead\\n  to a one-off change to a peer\'s site ID if you weren\'t and continue to not be\\n  specifying an explicit site ID when creating your identity.","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.0.10/api-reference/","date_released":"2021-09-10T16:21:51.194Z"},"1.0.11":{"description":"- Fixed `Update` call when chained to a `FindByID` call where no document with the provided ID exists.\\n- Added `WriteStrategy` enum.\\n- Added method `InsertWithStrategy()` to `DittoCollection`, allowing to specify the behavior when inserting a document with an ID that matches the ID of a document already in the store.\\n- Added `IsAuthenticated()` method and `UserId` property to `DittoAuthenticator`.","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.0.11/api-reference/","date_released":"2021-10-08T05:09:27.624Z"},"1.0.12":{"description":"- Added `global` section to `TransportConfig` allowing P2P sync to be contained within certain groups of devices by putting them in the same \\"sync group\\".","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.0.12/api-reference/","date_released":"2021-10-18T10:00:50.921Z"},"1.0.13":{"description":"- Changed `DittoIdentity`\'s `appID` construction parameter to be of type `string` instead of `Guid`.","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.0.13/api-reference/","date_released":"2021-10-18T17:02:38.549Z"},"1.0.14":{"description":"* Add support for array projections to DittoQL.\\n* Deprecate the `Online` identity in favor of the new `OnlineWithAuthentication`\\n  identity.\\n* Deprecate the `Development` identity in favor of the new `OfflinePlayground`\\n  identity.\\n* Deprecate the `Authenticator` property on `Ditto` in favor of an `Auth`\\n  property.","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.0.14/api-reference/","date_released":"2021-10-25T08:31:34.911Z"},"1.0.15-alpha1":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.0.15-alpha1/api-reference/","date_released":"2021-10-27T10:33:50.885Z"},"1.0.15":{"description":"* Ensure that when performing a `sort` that if a document that matches the\\n  filter specified via the accompanying `find` call doesn\'t have the key\\n  specified in the `sort` expression then it won\'t lead to an error. Now, if\\n  you\'re sorting in a descending order then the documents without the key\\n  specified in the `sort` will appear at the end of the set of results, after\\n  all of the documents that do have the key present. If you\'re sorting in an\\n  ascending order then the documents without the `sort` key will appear first in\\n  the set of documents, before all of the documents that do contain the `sort`\\n  key.","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.0.15/api-reference/","date_released":"2021-11-05T22:03:49.597Z"},"1.0.16":{"description":"* Fix an issue with live queries that involved a limit, no offset, at least one\\n  document being deleted, and some other conditions being met. Live queries that\\n  met these conditions could report incorrect sets of matching documents.\\n* Fix an issue that could potentially lead to an infinite loop in the\\n  replication system, meaning no sync progress would be made.","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.0.16/api-reference/","date_released":"2021-11-19T22:39:48.766Z"},"1.0.17":{"description":"* Fix an issue with write strategies not working correctly. Unexpected results\\n  could occur when performing sequences of operations on documents.","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.0.17/api-reference/","date_released":"2021-11-26T00:11:42.917Z"},"1.0.18-alpha1":{"description":"* Fixed an issue where document IDs that were specified inside the document\'s\\n  value as opposed to being specified explicitly (as a separate argument to\\n  `insert`) weren\'t being processed correctly, potentially leading to bugs with\\n  merge and overwrite behaviors.","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.0.18-alpha1/api-reference/","date_released":"2021-12-08T17:25:36.987Z"},"1.0.18-alpha2":{"description":"* Improve attachment sync performance.","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.0.18-alpha2/api-reference/","date_released":"2021-12-14T16:32:13.955Z"},"1.0.18":{"description":"* Reduced the opportunity for rapid memory growth in some scenarios.","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.0.18/api-reference/","date_released":"2021-12-20T13:22:16.631Z"},"1.0.19":{"description":"- Fixed: collections were not appearing in the data browser under certain permission configurations.\\n- Fixed: race condition when subscriptions were configured from multiple threads in parallel (sometimes leading to a crash).","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.0.19/api-reference/","date_released":"2021-12-23T20:42:05.711Z"},"1.1.0":{"description":"- Changed: improved peer-to-peer algorithms to create meshes that are more efficient and diverse.\\n- Changed: improved routing algorithms for more efficiency.\\n- Changed: improved performance of query parsing.\\n- Added: property `IsSyncActive` to class `Ditto`.\\n- Added: method `Logout()` to class `DittoAuthenticator`.\\n- Added: set of APIs to observe authentication status (see API reference for `DittoAuthenticator` and `DittoAuthenticationDelegate`).\\n- Added: method `Upsert()` to classes `DittoCollection` and `DittoScopedWriteTransaction` (as a replacement for `Insert()` & friends) which by default merges the newly inserted document if one with the same ID already exists.\\n- Added: property `DeviceName` to class `Ditto`.\\n- Deprecated: properties `IsAuthenticated` and `UserID` of class `DittoAuthenticator` in favor of newly introduced property `Status`.\\n- Deprecated: methods `Insert()` & frinds of classes `DittoCollection` and `DittoScopedWriteTransaction` in favor of newly introduced `Upsert()`.","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.1.0/api-reference/","date_released":"2022-01-28T11:21:11.093Z"},"1.1.1":{"description":"- Changed: Optimized the performance of accessing the value of a `Document`\\n- Added: Experimental mesh roles API\\n  - Added: `SetMeshRole()` method to `DittoExperimental` class\\n  - Added: `SetPriorityForMeshRole()` to `DittoExperimental` class","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.1.1/api-reference/","date_released":"2022-02-12T05:38:19.843Z"},"1.1.2":{"description":"- Added: method `SetOfflineOnlyLicenseToken()` to class `Ditto` as replacement for now deprecated `SetLicenseToken()`.\\n- Deprecated: `SetLicenseToken()` of class `Ditto`, please use newly added `SetOfflineOnlyLicenseToken()` instead.","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.1.2/api-reference/","date_released":"2022-02-28T14:36:18.966Z"},"1.1.3":{"description":"- Added: `OnlinePlaygroundV2` identity allowing for basic authentication for playgrounds\\n\\n- Deprecated: `OnlinePlayground` identity, use newly added `OnlinePlaygroundV2` instead\\n\\n- Fixed: document IDs are now validated when synced and removed if invalid (some of our early versions of the SDK stored malformed IDs under certain circumstances)","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.1.3/api-reference/","date_released":"2022-03-22T10:13:57.389Z"},"1.1.4":{"description":"- Changed: improved replication performance in some scenarios.","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.1.4/api-reference/","date_released":"2022-04-08T06:25:26.110Z"},"1.1.5":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.1.5/api-reference/","date_released":"2022-04-08T08:00:56.519Z"},"1.1.6":{"description":"- Fixed: a correctness issue in replication when peer permissions changed in the middle of a replication exchange.\\n- Fixed: error when querying a collection and there was a type mismatch for a field being used in a comparison in the query. \\n- Fixed: restarting an app too quickly could lead to multiple connection attempts to rejoin peers in the mesh.\\n- Fixed: apps using `OnlinePlaygroundV2` identities could experience a one minute delay before peer-to-peer sync occurs.\\n- Changed: improvements to Ditto mesh performance via fastest-available-transport prioritization.","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.1.6/api-reference/","date_released":"2022-05-09T12:04:39.210Z"},"1.1.7":{"description":"Synchronized version bump release.","api_reference_docs_url":"https://software.ditto.live/dotnet/Ditto/1.1.7/api-reference/","date_released":"2022-05-13T14:18:18.406Z"}}},"js":{"Ditto":{"1.0.8":{"description":"* Initial public *Beta* release of the JS SDK with the following constraints:\\n  * Web only for now. Node & Electron support will follow shortly.\\n  * Counters work only partially. Full support is in development.\\n  * No support for batch operations yet.\\n  * No support for attachments yet.\\n\\n* Known bugs and issues:\\n  * `runGarbageCollection()` doesn\'t work and throws an exception.\\n  * `observeWithNextSignal()` & `observeLocalWithNextSignal()` do not work and\\n    throw an exception.\\n  * Longer running queries might block the JS event loop.","api_reference_docs_url":"https://software.ditto.live/js/Ditto/1.0.8/api-reference/","date_released":"2021-08-02T16:19:41.134Z"},"latest":{"description":"- Fixed: module not found warnings when bundling for the Web (via Webpack & other bundlers).","api_reference_docs_url":"https://software.ditto.live/js/Ditto/1.1.7/api-reference/","date_released":"2022-05-13T14:18:18.407Z"},"1.0.9":{"description":"* Added support for attachments.\\n* When calling `insert` you should no longer nest the document\'s content under the `value` key. Instead the object that you provide to `insert` will directly be used to form the contents of the document.\\n* Similarly, when using `observe` or `exec` functionality you will no longer have a `Document` type returned to you and instead will have a `DocumentLike` object, which represents the document\'s contents, returned to you. You can directly subscript this object to get values at the specified key path of the document.\\n* Enabled support for loading `ditto.wasm` from Ditto\'s CDN.\\n* Allow passing a \\"raw\\" primitive type, instead of requiring a `DocumentID`, to the `insert` and `findByID` functions.\\n* Added support for getting information about all of the collections that the device is aware of. This is achieved by accessing `collections()` through the store object and then using the same sort of API used when getting documents in collections, i.e. `exec/observe/etc`.\\n* Added multicast as a transport option to the `LAN` config part of `TransportConfig`.\\n* Added new identity types: `Online` and `OnlinePlayground.` An `Online` identity should be used when running Ditto in secure production mode, logging on to Ditto Cloud, or using an on-premises authentication server. User permissions are centrally managed. Sync will not work until a successful login has occurred. An `OnlinePlayground` identity should be used when you want to test a Ditto Cloud app without authentication (\\"Playground mode\\"). This mode offers no security and must only be used for development.\\n* The `Production` identity has been renamed to `Manual`.\\n* Added an `Authenticator` type, accessible via the `Ditto` object, which allows you to perform login operations when you\'re using an `Online` identity.\\n* Similarly, added an `AuthenticationHandler` type that needs to be used when using an `Online` identity.\\n* Report an error if more than one Ditto instance is started using the same working directory.","api_reference_docs_url":"https://software.ditto.live/js/Ditto/1.0.9/api-reference/","date_released":"2021-09-03T22:38:24.690Z"},"1.0.10":{"description":"* Fix to stop a change in site ID from leading to an unnecessary error.\\n* Improve handling of persisted authentication data. Note that this might lead\\n  to a one-off change to a peer\'s site ID if you weren\'t and continue to not be\\n  specifying an explicit site ID when creating your identity.","api_reference_docs_url":"https://software.ditto.live/js/Ditto/1.0.10/api-reference/","date_released":"2021-09-10T16:21:51.194Z"},"1.0.11":{"description":"- Fixed exception when creating a `Ditto` instance without providing a `path`.\\n- Added `WriteStrategy` type.\\n- Added option `writeStrategy` to method `insert()` of `Collection`, allowing to specify the behavior when inserting a document with an ID that matches the ID of a document already in the store.\\n- Added Node support for macOS/x86_64, Linux/x86_64 and Linux/ARMhf. Support for more OS/arch combinations will follow.\\n- Added method `value()` to `DocumentPath` and `MutableDocumentPath` allowing to access the value at the key-path represented by the receiver.\\n- Added static method `valueAt()` and corresponding (convenience) instance method `_valueAt()` to `Document` and `MutableDocument` allowing to access the value at a given key-path.\\n- Added static method `replaceWithCounterAt()` and corresponding (convenience) instance method `_replaceWithCounterAt()` to `MutableDocument` allowing to turn a property at a given key-path into a counter.\\n- Added static method `incrementCounterAt()` and corresponding (convenience) instance method `_incrementCounterAt()` to `MutableDocument` allowing to increment a counter property at a given key-path.\\n- Added `isAuthenticated()` method and `userID` property to `Authenticator`.\\n- Changed `at()` method of `DocumentPath` and `MutableDocumentPath` to also take a number (index).\\n- Changed `MutableDocument` proxy to return `undefined` for non-existing paths.\\n- Changed property `siteID` of relevant `Identity` variants to be optional and allow `0` to be passed.\\n- Deprecated `appName` in favor of `appID` for identities of type `development` and `sharedKey`.\\n- Deprecated `atIndex()` method of `DocumentPath` and `MutableDocumentPath` in favor of `at()`.\\n- Deprecated option `isDefault` for method `insert()` of `Collection` in favor of `writeStrategy`.","api_reference_docs_url":"https://software.ditto.live/js/Ditto/1.0.11/api-reference/","date_released":"2021-10-08T05:09:27.624Z"},"1.0.12":{"description":"- Added `global` section to `TransportConfig` allowing P2P sync to be contained within certain groups of devices by putting them in the same \\"sync group\\".\\n- Fixed issues with key-paths containing dashes.\\n- Fixed issues with key-paths containing multiple subscript operators.","api_reference_docs_url":"https://software.ditto.live/js/Ditto/1.0.12/api-reference/","date_released":"2021-10-18T10:00:50.921Z"},"1.0.13":{"description":"- Fixed serialization errors during authentication when running in the browser.","api_reference_docs_url":"https://software.ditto.live/js/Ditto/1.0.13/api-reference/","date_released":"2021-10-18T17:02:38.549Z"},"1.0.14":{"description":"* Add support for array projections to DittoQL.\\n* Deprecate the `Online` identity in favor of the new `OnlineWithAuthentication`\\n  identity.\\n* Deprecate the `Development` identity in favor of the new `OfflinePlayground`\\n  identity.\\n* Add validation of all queries specified as part of `find()` calls.","api_reference_docs_url":"https://software.ditto.live/js/Ditto/1.0.14/api-reference/","date_released":"2021-10-25T08:31:34.911Z"},"1.0.15-alpha1":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/js/Ditto/1.0.15-alpha1/api-reference/","date_released":"2021-10-27T10:33:50.886Z"},"1.0.15":{"description":"* Ensure that when performing a `sort` that if a document that matches the\\n  filter specified via the accompanying `find` call doesn\'t have the key\\n  specified in the `sort` expression then it won\'t lead to an error. Now, if\\n  you\'re sorting in a descending order then the documents without the key\\n  specified in the `sort` will appear at the end of the set of results, after\\n  all of the documents that do have the key present. If you\'re sorting in an\\n  ascending order then the documents without the `sort` key will appear first in\\n  the set of documents, before all of the documents that do contain the `sort`\\n  key.\\n* Fix a potential deadlock in relation to logging.","api_reference_docs_url":"https://software.ditto.live/js/Ditto/1.0.15/api-reference/","date_released":"2021-11-05T22:03:49.598Z"},"1.0.16":{"description":"* Fix an issue with live queries that involved a limit, no offset, at least one\\n  document being deleted, and some other conditions being met. Live queries that\\n  met these conditions could report incorrect sets of matching documents.\\n* Fix an issue that could potentially lead to an infinite loop in the\\n  replication system, meaning no sync progress would be made.\\n* Expose `CollectionsEvent` as part of the public API.","api_reference_docs_url":"https://software.ditto.live/js/Ditto/1.0.16/api-reference/","date_released":"2021-11-19T22:39:48.766Z"},"1.0.17":{"description":"* Fix an issue with write strategies not working correctly. Unexpected results\\n  could occur when performing sequences of operations on documents.\\n* Removed the `DocumentID` type and replaced it with `DocumentIDValue`.\\n* Fixed the `sort(...)` functionality not having an effect for live queries.","api_reference_docs_url":"https://software.ditto.live/js/Ditto/1.0.17/api-reference/","date_released":"2021-11-26T00:11:42.918Z"},"1.0.18-alpha1":{"description":"* Fixed a bug where Ditto Cloud sync was not enabled by default for\\n  `Online`-based identities.\\n* Fixed an issue where document IDs that were specified inside the document\'s\\n  value as opposed to being specified explicitly (as a separate argument to\\n  `insert`) weren\'t being processed correctly, potentially leading to bugs with\\n  merge and overwrite behaviors.","api_reference_docs_url":"https://software.ditto.live/js/Ditto/1.0.18-alpha1/api-reference/","date_released":"2021-12-08T17:25:36.988Z"},"1.0.18-alpha2":{"description":"* Improve attachment sync performance.","api_reference_docs_url":"https://software.ditto.live/js/Ditto/1.0.18-alpha2/api-reference/","date_released":"2021-12-14T16:32:13.956Z"},"1.0.18":{"description":"* Reduced the opportunity for rapid memory growth in some scenarios.","api_reference_docs_url":"https://software.ditto.live/js/Ditto/1.0.18/api-reference/","date_released":"2021-12-20T13:22:16.631Z"},"1.0.19":{"description":"- Fixed: collections were not appearing in the data browser under certain permission configurations.\\n- Fixed: race condition when subscriptions were configured from multiple threads in parallel (sometimes leading to a crash).\\n- Fixed: missing canonicalization step for IDs of inserted documents leading to multiple instances of documents with the \\"same\\" ID being stored in the DB.\\n\\n**IMPORTANT**: This fix only applies to newly inserted documents, documents inserted with an older version of the JavaScript SDK may still have multiple instances in the DB and replicated to other peers. We\'ll provide a proper migration for these in follow-up releases.","api_reference_docs_url":"https://software.ditto.live/js/Ditto/1.0.19/api-reference/","date_released":"2021-12-23T20:42:05.711Z"},"1.1.0":{"description":"- Changed: improved peer-to-peer algorithms to create meshes that are more efficient and diverse.\\n- Changed: improved routing algorithms for more efficiency.\\n- Changed: improved performance of query parsing.\\n- Added: property `isSyncActive` to class `Ditto`.\\n- Added: method `logout()` to class `Authenticator`.\\n- Added: set of APIs to observe authentication status (see API reference for `Authenticator` and `AuthenticationHandler`).\\n- Added: method `upsert()` to class `Authenticator` (as a replacement for `insert()`) which by default merges the newly inserted document if one with the same ID already exists.\\n- Fixed: crashes when many insertions or removals were in flight (only WebAssembly were affected, i.e. when running in the browser).\\n- Fixed: high memory consumption and main thread blocking in certain edge cases.\\n- Fixed: type signature and API documentation for methods `loginWithToken()` and `loginWithCredentials()` of class `Authenticator`, where the second parameter should be `portal` instead of options. (The actual implementation itself was correct.)\\n- Deprecated: property `isSyncEnabled` of class `Ditto` in favor of the newly introduced `isSyncActive`.\\n- Deprecated: properties `isAuthenticated` and `userID` of class `Authenticator` in favor of newly introduced property `status`.\\n- Deprecated: method `insert()` in favor of newly introduced `upsert()`.","api_reference_docs_url":"https://software.ditto.live/js/Ditto/1.1.0/api-reference/","date_released":"2022-01-28T11:21:11.095Z"},"1.1.1":{"description":"- Changed: Optimized the performance of accessing the value of a `Document`\\n- Changed: Make `identity` optional for `Ditto` constructor\\n- Added: `toJSON()` to `Document` and `MutableDocument`\\n- Added: Support for observing transport condition of websocket connections\\n- Fixed: Node process from exiting prematurely\\n- Fixed: Obscure exception if `appID` is not given for certain identities","api_reference_docs_url":"https://software.ditto.live/js/Ditto/1.1.1/api-reference/","date_released":"2022-02-12T05:38:19.845Z"},"1.1.2":{"description":"- Added: method `setOfflineOnlyLicenseToken()` to class `Ditto` as replacement for now deprecated `setLicenseToken()`.\\n- Deprecated: method `setLicenseToken()` of class `Ditto`, please use newly added `setOfflineOnlyLicenseToken()` instead.","api_reference_docs_url":"https://software.ditto.live/js/Ditto/1.1.2/api-reference/","date_released":"2022-02-28T14:36:18.966Z"},"1.1.3":{"description":"- Added: `onlinePlaygroundV2` identity type and corresponding `IdentityOnlinePlaygroundV2` allowing for basic authentication for playgrounds\\n\\n- Deprecated: `onlinePlayground` identity type and corresponding `IdentityOnlinePlayground`, use newly added `ONLINE_PLAYGROUND_V2` and `IdentityOnlinePlaygroundV2` instead\\n\\n- Fixed: multiple retain cycles preventing `Ditto` instances from being properly garbage collected\\n\\n- Fixed: document IDs are now validated when synced and removed if invalid (some of our early versions of the SDK stored malformed IDs under certain circumstances)","api_reference_docs_url":"https://software.ditto.live/js/Ditto/1.1.3/api-reference/","date_released":"2022-03-22T10:13:57.390Z"},"1.1.4":{"description":"- Changed: improved replication performance in some scenarios.","api_reference_docs_url":"https://software.ditto.live/js/Ditto/1.1.4/api-reference/","date_released":"2022-04-08T06:25:26.111Z"},"1.1.5":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/js/Ditto/1.1.5/api-reference/","date_released":"2022-04-08T08:00:56.520Z"},"1.1.6":{"description":"- Fixed: a correctness issue in replication when peer permissions changed in the middle of a replication exchange.\\n- Fixed: error when querying a collection and there was a type mismatch for a field being used in a comparison in the query. \\n- Fixed: restarting an app too quickly could lead to multiple connection attempts to rejoin peers in the mesh.\\n- Fixed: apps using `OnlinePlaygroundV2` identities could experience a one minute delay before peer-to-peer sync occurs.\\n- Fixed: compatibility with packagers that perform static analysis to locate native Node modules, such as [Electron Forge](https://www.electronforge.io).\\n- Fixed: issues when inserting a value at a specific index in an array via `MutableDocument.pathAt()`.\\n- Changed: improvements to Ditto mesh performance via fastest-available-transport prioritization.","api_reference_docs_url":"https://software.ditto.live/js/Ditto/1.1.6/api-reference/","date_released":"2022-05-09T12:04:39.211Z"},"1.1.7":{"description":"- Fixed: module not found warnings when bundling for the Web (via Webpack & other bundlers).","api_reference_docs_url":"https://software.ditto.live/js/Ditto/1.1.7/api-reference/","date_released":"2022-05-13T14:18:18.407Z"}}},"cpp":{"DittoKit":{"latest":{"description":"* Initial release of the SDK","api_reference_docs_url":"https://software.ditto.live/cpp-ios/DittoKit/0.1.0/api-reference/","date_released":"2019-12-05T16:36:03.940Z"},"0.1.0":{"description":"* Initial release of the SDK","api_reference_docs_url":"https://software.ditto.live/cpp-ios/DittoKit/0.1.0/api-reference/","date_released":"2019-12-05T16:36:03.940Z"}},"DittoSyncKit":{"latest":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/cpp-ios/DittoSyncKit/1.0.0-alpha7/api-reference/","date_released":"2021-01-04T11:12:22.654Z"},"1.0.0-alpha5":{"description":"* Added a new intermediate security identity for a shared secret key. This is a simplistic authentication mode which is normally only suitable for private apps where all the users and devices are trusted. \\n* Fixed an issue that prevented Counter values from syncing correctly\\n* Renamed DittoAttachmentStatus to DittoAttachmentFetchEvent and subsequently Incomplete status to Progre\\nss.","api_reference_docs_url":"https://software.ditto.live/cpp-ios/DittoSyncKit/1.0.0-alpha5/api-reference/","date_released":"2020-11-23T21:22:41.601Z"},"1.0.0-alpha6":{"description":"* Performance and stability improvements.\\n* Fix default data insertion such that merge semantics are consistent and\\n  duplicate data isn\'t created.\\n* Fixed a bug where documents containing attachments syncing to an instance of\\n  the C++ SDK could lead to a crash.\\n* Upgrade nlohmann json header from 3.7.0 to 3.9.1.\\n* Added `set_custom_log_cb` and `set_log_file` method calls to `Log` class to\\n  allow provision of a custom logging callback function, and a file path\\n  that logs should be directed to.","api_reference_docs_url":"https://software.ditto.live/cpp-ios/DittoSyncKit/1.0.0-alpha6/api-reference/","date_released":"2020-12-15T01:00:39.148Z"},"1.0.0-alpha7":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/cpp-ios/DittoSyncKit/1.0.0-alpha7/api-reference/","date_released":"2021-01-04T11:12:22.654Z"}},"Ditto":{"1.0.0-alpha8":{"description":"* Site IDs, which make up part of a Ditto identity object, are now unsigned,\\n64-bit integers instead of unsigned 32-bit integers.\\n* Fix a crash that could occur if an offset with a value greater than the number\\nof matching documents was provided.","api_reference_docs_url":"https://software.ditto.live/cpp-ios/Ditto/1.0.0-alpha8/api-reference/","date_released":"2021-01-22T15:09:01.907Z"},"1.0.0-alpha9":{"description":"* Fixed a bug where mDNS advertising may continue after Ditto is stopped.\\n* Fixed a hang that could occur creating an attachment fetcher while requesting many attachments at once.\\n* Fixed sync failure when there are multiple overlapping subscriptions or live queries with the same query string for the same collection.\\n* Fixed a potential crash and other sync failures that could occur under certain conditions.","api_reference_docs_url":"https://software.ditto.live/cpp-ios/Ditto/1.0.0-alpha9/api-reference/","date_released":"2021-02-05T00:58:10.294Z"},"1.0.0":{"description":"* This release is not compatible with any previous SDK releases. There are a\\nnumber of breaking changes both in terms of the SDK API and in terms of the\\ninternal systems used by the SDK to perform operations such as synchronization.\\nIf you have previously made use of the Ditto SDK and wish to update to this\\nversion then note that you will need to delete all existing Ditto data otherwise\\nyou will run into errors. If you have existing data that you need to keep then\\nplease contact us and we can advise you as to how you can migrate your data.\\n* The most notable API breaking changes are:\\n  * Document IDs are no longer restricted to just strings. You can now create\\n    a document ID that is a string, integer, boolean, array, map, or null. This\\n    means that when making `find_by_id` or `insert` calls you now need to\\n    provide a `DocumentId` object rather than a string. Similarly, when you\\n    access a document\'s ID it will now return a `DocumentId` object instead of a\\n    string.\\n  * The `start()` and `stop()` functions on the `Ditto` object have been renamed\\n    to `start_sync()` and `stop_sync()` respectively. They now also don\'t accept\\n    any arguments. If you wish to specify which transports you would like the\\n    Ditto SDK to make use of (along with any configuration that they might\\n    require) you now need to use the `set_transport_config` function on the\\n    `Ditto` object, and pass to that a transport config object. The default\\n    transports that will be enabled are still the same as they were in previous\\n    releases of the SDK though, so if you have no custom requirements then you\\n    can simply change your `start()` call to `start_sync()`.\\n* Lots of performance improvements and bug fixes.","api_reference_docs_url":"https://software.ditto.live/cpp-ios/Ditto/1.0.0/api-reference/","date_released":"2021-04-22T00:29:50.320Z"},"1.0.1":{"description":"* If you provide an invalid query then you will now get a better error message.","api_reference_docs_url":"https://software.ditto.live/cpp-ios/Ditto/1.0.1/api-reference/","date_released":"2021-05-04T16:02:44.151Z"},"1.0.2":{"description":"* Add support for subscripting `DocumentId`s in order to get nested values when\\na document ID is based on an array or a map.\\n* Deprecated `.to_native()` on `DocumentId`. You should use `.value()` instead.","api_reference_docs_url":"https://software.ditto.live/cpp-ios/Ditto/1.0.2/api-reference/","date_released":"2021-05-20T21:39:10.588Z"},"1.0.3":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/cpp-ios/Ditto/1.0.3/api-reference/","date_released":"2021-06-10T16:34:52.104Z"},"1.0.4":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/cpp-ios/Ditto/1.0.4/api-reference/","date_released":"2021-06-11T22:36:42.265Z"},"1.0.5":{"description":"* Added a new `find` function that accepts a query containing placeholders in\\n  the form of `$args.my_arg` along with a map of query arguments in the form of\\n  `{ \\"my_arg\\": \\"some value\\" }`. The placeholders in the query will be replaced\\n  by a query-appropriate representation of the relevant value from the map of\\n  query arguments.\\n\\n  For example, a query of `color == $args.color` with a query arguments map of\\n  `{ \\"color\\": \\"red\\" }` would internally be treated as a query of:\\n  `color == \\"red\\"`.\\n* Added the ability to get a hash and/or a mnemonic (string) representation of\\n  the matching documents from a live query event. This means you can do\\n  something like this:\\n\\n  ```cpp\\n  auto live_query = collection.find_all().observe(LiveQueryEventHandler{\\n        [&](std::vector<Document> docs, LiveQueryEvent event) {\\n            event.hash(docs); // e.g. `1950015808188223905`\\n            event.hash_mnemonic(docs); // e.g. `locate-quality-tina--helena-remote-cat`\\n            // ...\\n      });\\n  ```\\n* Fix for using floats in queries.\\n* Accessing the `store` property of a `Ditto` instance will no longer throw an\\n  error if you have not yet activated your `Ditto` instance with a valid license\\n  token.\\n* Deprecated `set_access_license` and added a new function, `set_license_token`,\\n  which will throw an appropriate exception if your provided license token is\\n  expired or invalid somehow.\\n* Deprecated `start_sync` and added a new function, `try_start_sync`, which will\\n  throw an exception if your `Ditto` instance hasn\'t yet been activated via a\\n  successful call to `set_license_token`.","api_reference_docs_url":"https://software.ditto.live/cpp-ios/Ditto/1.0.5/api-reference/","date_released":"2021-06-25T22:36:18.096Z"},"1.0.6":{"description":"* Add `value` accessor on `DocumentPath`, `MutableDocumentPath`, and\\n`DocumentIdPath` types to allow accessing a nested value in a document/ID as a\\n`nlohmann::json`.","api_reference_docs_url":"https://software.ditto.live/cpp-ios/Ditto/1.0.6/api-reference/","date_released":"2021-07-08T18:22:41.809Z"},"1.0.7":{"description":"* Improve SDK API documentation extensively\\n* Fix crash that can occur if a Ditto `Identity` is passed by value\\n* Fix bug where sync may fail if an unusually long `deviceName` is configured","api_reference_docs_url":"https://software.ditto.live/cpp-ios/Ditto/1.0.7/api-reference/","date_released":"2021-07-22T23:38:10.554Z"},"1.0.8":{"description":"* Added a Linux x86_64 version of the C++ to the group of published C++ SDKs.\\n* Improved debug logging.","api_reference_docs_url":"https://software.ditto.live/cpp/Ditto/1.0.8/api-reference/","date_released":"2021-08-02T16:19:41.134Z"},"1.0.9":{"description":"* Added support for getting information about all of the collections that the device is aware of. This is achieved by accessing `collections()` through the store object and then using the same sort of API used when getting documents in collections, i.e. `exec/observe/etc`.\\n* Added multicast as a transport option to the `LAN` config part of `TransportConfig`.\\n* Added new identity types: `ONLINE` and `ONLINE_PLAYGROUND.` An `Online` identity should be used when running Ditto in secure production mode, logging on to Ditto Cloud, or using an on-premises authentication server. User permissions are centrally managed. Sync will not work until a successful login has occurred. An `ONLINE_PLAYGROUND` identity should be used when you want to test a Ditto Cloud app without authentication (\\"Playground mode\\"). This mode offers no security and must only be used for development.\\n* The `PRODUCTION` identity has been renamed to `MANUAL`.\\n* Added an `Authenticator` type, accessible via the `Ditto` object, which allows you to perform login operations when you\'re using an `Online` identity.\\n* Similarly, added an `AuthenticationDelegate` type that needs to be used when using an `Online` identity.\\n* Report an error if more than one Ditto instance is started using the same working directory.","api_reference_docs_url":"https://software.ditto.live/cpp/Ditto/1.0.9/api-reference/","date_released":"2021-09-03T22:38:24.690Z"},"latest":{"description":"Synchronized version bump release.","api_reference_docs_url":"https://software.ditto.live/cpp/Ditto/1.1.7/api-reference/","date_released":"2022-05-13T14:18:18.407Z"},"1.0.10":{"description":"* Fix to stop a change in site ID from leading to an unnecessary error.\\n* Improve handling of persisted authentication data. Note that this might lead\\n  to a one-off change to a peer\'s site ID if you weren\'t and continue to not be\\n  specifying an explicit site ID when creating your identity.","api_reference_docs_url":"https://software.ditto.live/cpp/Ditto/1.0.10/api-reference/","date_released":"2021-09-10T16:21:51.194Z"},"1.0.11":{"description":"- Added `WriteStrategy` enum.\\n- Added method `insert_with_strategy()` to `Collection`, allowing to specify the behavior when inserting a document with an ID that matches the ID of a document already in the store.\\n- Added `is_authenticated()` and `user_id()` methods to `Authenticator`.","api_reference_docs_url":"https://software.ditto.live/cpp/Ditto/1.0.11/api-reference/","date_released":"2021-10-08T05:09:27.624Z"},"1.0.12":{"description":"- Added `global` section to `TransportConfig` allowing P2P sync to be contained within certain groups of devices by putting them in the same \\"sync group\\".","api_reference_docs_url":"https://software.ditto.live/cpp/Ditto/1.0.12/api-reference/","date_released":"2021-10-18T10:00:50.921Z"},"1.0.13":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/cpp/Ditto/1.0.13/api-reference/","date_released":"2021-10-18T17:02:38.549Z"},"1.0.14":{"description":"* Add support for array projections to DittoQL.\\n* Deprecate the `Online` identity in favor of the new `OnlineWithAuthentication`\\n  identity.\\n* Deprecate the `Development` identity in favor of the new `OfflinePlayground`\\n  identity.","api_reference_docs_url":"https://software.ditto.live/cpp/Ditto/1.0.14/api-reference/","date_released":"2021-10-25T08:31:34.911Z"},"1.0.15-alpha1":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/cpp/Ditto/1.0.15-alpha1/api-reference/","date_released":"2021-10-27T10:33:50.885Z"},"1.0.15":{"description":"* Ensure that when performing a `sort` that if a document that matches the\\n  filter specified via the accompanying `find` call doesn\'t have the key\\n  specified in the `sort` expression then it won\'t lead to an error. Now, if\\n  you\'re sorting in a descending order then the documents without the key\\n  specified in the `sort` will appear at the end of the set of results, after\\n  all of the documents that do have the key present. If you\'re sorting in an\\n  ascending order then the documents without the `sort` key will appear first in\\n  the set of documents, before all of the documents that do contain the `sort`\\n  key.","api_reference_docs_url":"https://software.ditto.live/cpp/Ditto/1.0.15/api-reference/","date_released":"2021-11-05T22:03:49.597Z"},"1.0.16":{"description":"* Fix an issue with live queries that involved a limit, no offset, at least one\\n  document being deleted, and some other conditions being met. Live queries that\\n  met these conditions could report incorrect sets of matching documents.\\n* Fix an issue that could potentially lead to an infinite loop in the\\n  replication system, meaning no sync progress would be made.","api_reference_docs_url":"https://software.ditto.live/cpp/Ditto/1.0.16/api-reference/","date_released":"2021-11-19T22:39:48.766Z"},"1.0.17":{"description":"* Fix an issue with write strategies not working correctly. Unexpected results\\n  could occur when performing sequences of operations on documents.","api_reference_docs_url":"https://software.ditto.live/cpp/Ditto/1.0.17/api-reference/","date_released":"2021-11-26T00:11:42.918Z"},"1.0.18-alpha1":{"description":"* Fixed an issue where document IDs that were specified inside the document\'s\\n  value as opposed to being specified explicitly (as a separate argument to\\n  `insert`) weren\'t being processed correctly, potentially leading to bugs with\\n  merge and overwrite behaviors.","api_reference_docs_url":"https://software.ditto.live/cpp/Ditto/1.0.18-alpha1/api-reference/","date_released":"2021-12-08T17:25:36.988Z"},"1.0.18-alpha2":{"description":"* Improve attachment sync performance.","api_reference_docs_url":"https://software.ditto.live/cpp/Ditto/1.0.18-alpha2/api-reference/","date_released":"2021-12-14T16:32:13.956Z"},"1.0.18":{"description":"* Reduced the opportunity for rapid memory growth in some scenarios.","api_reference_docs_url":"https://software.ditto.live/cpp/Ditto/1.0.18/api-reference/","date_released":"2021-12-20T13:22:16.631Z"},"1.0.19":{"description":"- Fixed: collections were not appearing in the data browser under certain permission configurations.\\n- Fixed: race condition when subscriptions were configured from multiple threads in parallel (sometimes leading to a crash).","api_reference_docs_url":"https://software.ditto.live/cpp/Ditto/1.0.19/api-reference/","date_released":"2021-12-23T20:42:05.711Z"},"1.1.0":{"description":"- Changed: improved peer-to-peer algorithms to create meshes that are more efficient and diverse.\\n- Changed: improved routing algorithms for more efficiency.\\n- Changed: improved performance of query parsing.\\n- Added: accessor `get_is_sync_active()` to class `Ditto`.\\n- Added: method `logout()` to class `Authenticator`.\\n- Added: set of APIs to observe authentication status (see API reference for `Authenticator` and `AuthenticationCallback`).\\n- Added: method `upsert()` to classes `Collection` and `ScopedWriteTransaction` (as a replacement for `insert()` & friends) which by default merges the newly inserted document if one with the same ID already exists.\\n- Added: (missing) accessor `get_auth()` to class `Ditto`.\\n- Deprecated: accessors `is_authenticated()` and `user_id()` of class `Authenticator` in favor of newly introduced accessor `get_status()`.\\n- Deprecated: methods `insert()` & frinds of classes `Collection` and `ScopedWriteTransaction` in favor of newly introduced `upsert()`.","api_reference_docs_url":"https://software.ditto.live/cpp/Ditto/1.1.0/api-reference/","date_released":"2022-01-28T11:21:11.093Z"},"1.1.1":{"description":"- Changed: Optimized the performance of accessing the value of a `Document`","api_reference_docs_url":"https://software.ditto.live/cpp/Ditto/1.1.1/api-reference/","date_released":"2022-02-12T05:38:19.844Z"},"1.1.2":{"description":"- Added: method `set_offline_only_license_token()` to class `Ditto` as replacement for now deprecated `set_license_token()`.\\n- Deprecated: method `set_license_token()` of class `Ditto`, please use newly added `set_offline_only_license_token()` instead.","api_reference_docs_url":"https://software.ditto.live/cpp/Ditto/1.1.2/api-reference/","date_released":"2022-02-28T14:36:18.966Z"},"1.1.3":{"description":"- Added: `ONLINE_PLAYGROUND_V2` identity type and corresponding `OnlinePlaygroundV2Identity` allowing for basic authentication for playgrounds\\n\\n- Deprecated: `ONLINE_PLAYGROUND` identity type and corresponding `OnlinePlaygroundIdentity`, use newly added `ONLINE_PLAYGROUND_V2` and `OnlinePlaygroundV2Identity` instead\\n\\n- Changed: improved const correctness for a lot of the C++ API\\n\\n- Fixed: document IDs are now validated when synced and removed if invalid (some of our early versions of the SDK stored malformed IDs under certain circumstances)","api_reference_docs_url":"https://software.ditto.live/cpp/Ditto/1.1.3/api-reference/","date_released":"2022-03-22T10:13:57.389Z"},"1.1.4":{"description":"- Changed: improved replication performance in some scenarios.","api_reference_docs_url":"https://software.ditto.live/cpp/Ditto/1.1.4/api-reference/","date_released":"2022-04-08T06:25:26.111Z"},"1.1.5":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/cpp/Ditto/1.1.5/api-reference/","date_released":"2022-04-08T08:00:56.520Z"},"1.1.6":{"description":"- Fixed: a correctness issue in replication when peer permissions changed in the middle of a replication exchange.\\n- Fixed: error when querying a collection and there was a type mismatch for a field being used in a comparison in the query. \\n- Fixed: restarting an app too quickly could lead to multiple connection attempts to rejoin peers in the mesh.\\n- Fixed: apps using `OnlinePlaygroundV2` identities could experience a one minute delay before peer-to-peer sync occurs.\\n- Fixed: cloud sync would stop working when setting a newly created transport config.\\n- Changed: improvements to Ditto mesh performance via fastest-available-transport prioritization.","api_reference_docs_url":"https://software.ditto.live/cpp/Ditto/1.1.6/api-reference/","date_released":"2022-05-09T12:04:39.211Z"},"1.1.7":{"description":"Synchronized version bump release.","api_reference_docs_url":"https://software.ditto.live/cpp/Ditto/1.1.7/api-reference/","date_released":"2022-05-13T14:18:18.407Z"}}},"rustsdk":{"Ditto":{"1.0.14":{"description":"* Add support for array projections to DittoQL.\\n* Deprecate the `Online` identity in favor of the new `OnlineWithAuthentication`\\n  identity.\\n* Deprecate the `Development` identity in favor of the new `OfflinePlayground`\\n  identity.\\n* Permit `FnMut` event handlers for live queries.\\n* Add support for the Presence V2 API via `Ditto::observe_peers_v2`.","api_reference_docs_url":"https://software.ditto.live/rustsdk/Ditto/1.0.14/api-reference/","date_released":"2021-10-25T08:31:34.911Z"},"latest":{"description":"Synchronized version bump release.","api_reference_docs_url":"https://software.ditto.live/rust/Ditto/1.1.7/x86_64-unknown-linux-gnu/docs/dittolive_ditto/index.html","date_released":"2022-05-13T14:18:18.407Z"},"1.0.15-alpha1":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/rustsdk/Ditto/1.0.15-alpha1/api-reference/","date_released":"2021-10-27T10:33:50.888Z"},"1.0.15":{"description":"* Ensure that when performing a `sort` that if a document that matches the\\n  filter specified via the accompanying `find` call doesn\'t have the key\\n  specified in the `sort` expression then it won\'t lead to an error. Now, if\\n  you\'re sorting in a descending order then the documents without the key\\n  specified in the `sort` will appear at the end of the set of results, after\\n  all of the documents that do have the key present. If you\'re sorting in an\\n  ascending order then the documents without the `sort` key will appear first in\\n  the set of documents, before all of the documents that do contain the `sort`\\n  key.","api_reference_docs_url":"https://software.ditto.live/rustsdk/Ditto/1.0.15/api-reference/","date_released":"2021-11-05T22:03:49.598Z"},"1.0.16":{"description":"* Fix an issue with live queries that involved a limit, no offset, at least one\\n  document being deleted, and some other conditions being met. Live queries that\\n  met these conditions could report incorrect sets of matching documents.\\n* Fix an issue that could potentially lead to an infinite loop in the\\n  replication system, meaning no sync progress would be made.","api_reference_docs_url":"https://software.ditto.live/rustsdk/Ditto/1.0.16/api-reference/","date_released":"2021-11-19T22:39:48.766Z"},"1.0.17":{"description":"* Fix an issue with write strategies not working correctly. Unexpected results\\n  could occur when performing sequences of operations on documents.","api_reference_docs_url":"https://software.ditto.live/rustsdk/Ditto/1.0.17/api-reference/","date_released":"2021-11-26T00:11:42.918Z"},"1.0.18-alpha1":{"description":"* Fixed an issue where document IDs that were specified inside the document\'s\\n  value as opposed to being specified explicitly (as a separate argument to\\n  `insert`) weren\'t being processed correctly, potentially leading to bugs with\\n  merge and overwrite behaviors.","api_reference_docs_url":"https://software.ditto.live/rustsdk/Ditto/1.0.18-alpha1/api-reference/","date_released":"2021-12-08T17:25:36.988Z"},"1.0.18-alpha2":{"description":"* Improve attachment sync performance.","api_reference_docs_url":"https://software.ditto.live/rustsdk/Ditto/1.0.18-alpha2/api-reference/","date_released":"2021-12-14T16:32:13.956Z"},"1.0.18":{"description":"* Reduced the opportunity for rapid memory growth in some scenarios.","api_reference_docs_url":"https://software.ditto.live/rustsdk/Ditto/1.0.18/api-reference/","date_released":"2021-12-20T13:22:16.632Z"},"1.0.19":{"description":"- Fixed: collections were not appearing in the data browser under certain permission configurations.\\n- Fixed: race condition when subscriptions were configured from multiple threads in parallel (sometimes leading to a crash).","api_reference_docs_url":"https://software.ditto.live/rustsdk/Ditto/1.0.19/api-reference/","date_released":"2021-12-23T20:42:05.711Z"},"1.1.0":{"description":"- Changed: improved peer-to-peer algorithms to create meshes that are more efficient and diverse.\\n- Changed: improved routing algorithms for more efficiency.\\n- Changed: improved performance of query parsing.","api_reference_docs_url":"https://software.ditto.live/rustsdk/Ditto/1.1.0/api-reference/","date_released":"2022-01-28T11:21:11.095Z"},"1.1.1":{"description":"- Changed: Optimized the performance of accessing the value of a `Document`\\n- Added: Experimental mesh roles API\\n  - Added: `set_mesh_role()` method to `Peer` class\\n  - Added: `set_priority_for_mesh_role()` to `Peer` class\\n- Fixed: An incorrect error from `find_by_id(\\"some_id\\").exec()` when a document wasn\'t found.","api_reference_docs_url":"https://software.ditto.live/rust/Ditto/1.1.1/x86_64-unknown-linux-gnu/docs/dittolive_ditto/index.html","date_released":"2022-02-12T05:38:19.845Z"},"1.1.2":{"description":"- Added: method `set_offline_only_license_token()` to type `Ditto` as replacement for now deprecated `set_license_token()`.\\n- Deprecated: method `set_license_token()` of type `Ditto`, please use newly added `set_offline_only_license_token()` instead.","api_reference_docs_url":"https://software.ditto.live/rust/Ditto/1.1.2/x86_64-unknown-linux-gnu/docs/dittolive_ditto/index.html","date_released":"2022-02-28T14:36:18.966Z"},"1.1.3":{"description":"- Added: `OnlinePlaygroundV2` identity allowing for basic authentication for playgrounds\\n\\n- Deprecated: `OnlinePlayground` identity, use newly added `OnlinePlaygroundV2` instead\\n\\n- Fixed: document IDs are now validated when synced and removed if invalid (some of our early versions of the SDK stored malformed IDs under certain circumstances)","api_reference_docs_url":"https://software.ditto.live/rust/Ditto/1.1.3/x86_64-unknown-linux-gnu/docs/dittolive_ditto/index.html","date_released":"2022-03-22T10:13:57.390Z"},"1.1.4":{"description":"- Changed: improved replication performance in some scenarios.","api_reference_docs_url":"https://software.ditto.live/rust/Ditto/1.1.4/x86_64-unknown-linux-gnu/docs/dittolive_ditto/index.html","date_released":"2022-04-08T06:25:26.112Z"},"1.1.5":{"description":"* Synchronized version bump release","api_reference_docs_url":"https://software.ditto.live/rust/Ditto/1.1.5/x86_64-unknown-linux-gnu/docs/dittolive_ditto/index.html","date_released":"2022-04-08T08:00:56.520Z"},"1.1.6":{"description":"- Fixed: a correctness issue in replication when peer permissions changed in the middle of a replication exchange.\\n- Fixed: error when querying a collection and there was a type mismatch for a field being used in a comparison in the query. \\n- Fixed: restarting an app too quickly could lead to multiple connection attempts to rejoin peers in the mesh.\\n- Fixed: apps using `OnlinePlaygroundV2` identities could experience a one minute delay before peer-to-peer sync occurs.\\n- Fixed: issues with serialization and deserialization of `DocumentId`s.\\n- Added: a new typealias named `LogLevel` for `CLogLevel`.\\n- Added: `upsert()` and `upsert_with_strategy()` to `Collection`. If you want to provide an explicit `DocumentId` for your document you should specify it under the `\\"_id\\"` key at the root of your document.\\n- Added: `observe_v2()` and `observe_local_v2()` to `PendingIdSpecificOperation`.\\n- Added: `SingleDocumentEventHandler` and `SingleDocumentLiveQueryEvent` as counterparts to `EventHandler` and `LiveQueryEvent`.\\n- Deprecated: `insert()` and `insert_with_strategy()`. Please use the newly introduced `upsert()` and `upsert_with_strategy()` instead.\\n- Deprecated: `observe()` and `observe_local()`. Please use the newly introduced `observe_v2()` and `observe_local_v2()` instead.\\n- Changed: improved compatibility with the 1.60.0 Rust toolchain, which is now the recommended toolchain.\\n- Changed: improvements to Ditto mesh performance via fastest-available-transport prioritization.","api_reference_docs_url":"https://software.ditto.live/rust/Ditto/1.1.6/x86_64-unknown-linux-gnu/docs/dittolive_ditto/index.html","date_released":"2022-05-09T12:04:39.211Z"},"1.1.7":{"description":"Synchronized version bump release.","api_reference_docs_url":"https://software.ditto.live/rust/Ditto/1.1.7/x86_64-unknown-linux-gnu/docs/dittolive_ditto/index.html","date_released":"2022-05-13T14:18:18.407Z"}}}}')}}]);